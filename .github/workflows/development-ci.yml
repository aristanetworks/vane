name: development-ci
run-name: ${{ github.actor }} CI development run

on: [push]

jobs:
  validate:

    runs-on: ubuntu-latest

    steps:
      # Check out the repository
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # architecture: 'x64' # The default

      - name: Display the Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black==22.12.0 flake8==5.0.4 pylint==2.16.2

      # - name: Get fork point
      #   id: forkpoint
      #   run: |
      #     git fetch origin develop:develop
      #     echo "----------"
      #     git branch -a
      #     echo "----------"
      #     git merge-base --fork-point remotes/origin/develop gar-testing
      #     echo "----------"
      #     echo "base=$(git merge-base --fork-point develop ${{ github.ref_name }})" >> $GITHUB_ENV

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Get fork point
        id: forkpoint
        run: |
          git fetch origin develop:develop
          echo "----------"
          ls -la .git/refs/heads
          echo "----------"
          git log develop.. | grep commit
          echo "----------"
          echo "base=$(cat .git/refs/heads/develop)" >> $GITHUB_ENV

      - name: Get changed files
        id: changes
        run: |
          echo ${{ env.base }}
          git diff --name-only --diff-filter=ACMRT ${{ env.base }} ${{ github.sha }}
          echo "all=$(git diff --name-only --diff-filter=ACMRT ${{ env.base }} ${{ github.sha }} | xargs)" >> $GITHUB_ENV
          echo "python=$(git diff --name-only --diff-filter=ACMRT ${{ env.base }} ${{ github.sha }} | grep .py$ | xargs)" >> $GITHUB_ENV

      # - name: Get changed files
      #   id: changes
      #   run: |
      #     git diff-tree --name-only --diff-filter=ACMRT -r ${{ github.sha }}

      # Run Black on the whole repo
      - name: Run Black to check the code for formatting problems
        # If any code needs reformatting, black returns an exit code of 1,
        # which fails the action
        run: black --check ${{ env.python }}

      # Run flake8 on the vane and tests directories
      - name: Lint with flake8
        run: flake8 ${{ env.python }}

      # Run pylint on the vane and tests directories
      - name: Lint with pylint
        run: pylint ${{ env.python }}
