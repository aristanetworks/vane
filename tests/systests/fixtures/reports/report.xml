<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="10" skipped="0" tests="42" time="14.979" timestamp="2022-06-28T12:26:23.448621" hostname="sagarwal"><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[BL1]" time="0.154" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[BL1]" time="0.014" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[BL1]" time="0.015" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[BL1]" time="0.013" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[BL1]" time="0.018" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[BL1]" time="0.098" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[BL1]" time="0.100" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[BL1]" time="0.099" /><testcase classname="tests.systests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[BL1]" time="0.008" /><testcase classname="tests.systests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[BL1]" time="0.012" /><testcase classname="tests.systests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[BL1]" time="0.428" /><testcase classname="tests.systests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[BL1]" time="6.355"><failure message="AssertionError: assert 'bl1' == 'BL1'&#10;  - BL1&#10;  + bl1">self = &lt;systests.host.test_host.HostTests object at 0x107c36640&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x10634c3d0&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.74.38', 'name': 'BL1', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'description': '...xpected_output': True, 'name': 'test_for_zerotouch_config_file_on_', 'show_cmd': 'dir flash:zerotouch-config'}]}, ...]}

    def test_if_hostname_is_correcet_on_(self, dut, tests_definitions):
        """Verify hostname is set on device is correct
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        tops.expected_output = tops.dut_name
        tops.actual_output = dut["connection"].run_commands(tops.show_cmd, "json")[0]["hostname"]
        print(tops.actual_output)
        #["json"]["hostname"]
        tops.test_result = tops.actual_output == tops.expected_output
    
        tops.output_msg = (
            f"On router |{tops.dut_name}| the configured hostname is "
            f"|{tops.actual_output}| and the correct hostname is "
            f"|{tops.expected_output}|"
        )
        tops.comment = (
            "TEST is hostname correct.\n"
            f"GIVEN hostname |{tops.expected_output}|.\n"
            f"WHEN hostname is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}"
        )
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output == tops.expected_output
E       AssertionError: assert 'bl1' == 'BL1'
E         - BL1
E         + bl1

tests/systests/host/test_host.py:83: AssertionError</failure></testcase><testcase classname="tests.systests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[BL1]" time="0.032" /><testcase classname="tests.systests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[BL1]" time="0.037" /><testcase classname="tests.systests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[BL1]" time="0.066" /><testcase classname="tests.systests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[BL1]" time="0.010" /><testcase classname="tests.systests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[BL1]" time="0.160" /><testcase classname="tests.systests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[BL1]" time="0.011" /><testcase classname="tests.systests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[BL1]" time="0.031" /><testcase classname="tests.systests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[BL1]" time="0.009" /><testcase classname="tests.systests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[BL1]" time="0.009" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[BL2]" time="0.030" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[BL2]" time="0.016" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[BL2]" time="0.033" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[BL2]" time="0.016" /><testcase classname="tests.systests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[BL2]" time="0.030" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[BL2]" time="0.103" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[BL2]" time="0.098" /><testcase classname="tests.systests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[BL2]" time="0.104" /><testcase classname="tests.systests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[BL2]" time="0.010"><failure message="assert [True] == [[True]]&#10;  At index 0 diff: True != [True]&#10;  Full diff:&#10;  - [[True]]&#10;  ? -      -&#10;  + [True]">self = &lt;systests.daemon.test_daemon.DaemonTests object at 0x107db1580&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_daemons_are_running_on_(self, dut, tests_definitions):
        """Verify a list of daemons are running on DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        daemons = tops.test_parameters["daemons"]
    
        for daemon in daemons:
            dut_ptr = dut["output"][tops.show_cmd]["json"]["daemons"]
            tops.actual_output = dut_ptr[daemon]["running"]
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}|, daemon running "
                f"state is |{tops.actual_output}| correct"
                f" state is |{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {daemon} daemon running on "
                f"|{tops.dut_name}|.\n"
                f"GIVEN expected {daemon} running state: "
                f"|{tops.expected_output}|.\n"
                f"WHEN {daemon} device running state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [True] == [[True]]
E         At index 0 diff: True != [True]
E         Full diff:
E         - [[True]]
E         ? -      -
E         + [True]

tests/systests/daemon/test_daemon.py:98: AssertionError</failure></testcase><testcase classname="tests.systests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[BL2]" time="0.009"><failure message="assert [True] == [[True]]&#10;  At index 0 diff: True != [True]&#10;  Full diff:&#10;  - [[True]]&#10;  ? -      -&#10;  + [True]">self = &lt;systests.daemon.test_daemon.DaemonTests object at 0x107dc5eb0&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_daemons_are_enabled_on_(self, dut, tests_definitions):
        """Verify a list of daemons are enabled on DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        daemons = tops.test_parameters["daemons"]
    
        for daemon in daemons:
            dut_ptr = dut["output"][tops.show_cmd]["json"]["daemons"]
            tops.actual_output = dut_ptr[daemon]["enabled"]
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}|, daemon enabled "
                f"state is |{tops.actual_output}| correct"
                f" state is |{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {daemon} daemon enabled on "
                f"|{tops.dut_name}|.\n"
                f"GIVEN expected {daemon} enabled state: "
                f"|{tops.expected_output}|.\n"
                f"WHEN {daemon} device enabled state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [True] == [[True]]
E         At index 0 diff: True != [True]
E         Full diff:
E         - [[True]]
E         ? -      -
E         + [True]

tests/systests/daemon/test_daemon.py:145: AssertionError</failure></testcase><testcase classname="tests.systests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[BL2]" time="0.443"><failure message="assert [False, False, False] == [[False, Fals...False, False]]&#10;  At index 0 diff: False != [False, False, False]&#10;  Full diff:&#10;  - [[False, False, False], [False, False, False], [False, False, False]]&#10;  + [False, False, False]">self = &lt;systests.filesystem.test_filesystem.FileSystemTests object at 0x107dcb040&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_files_on_(self, dut, tests_definitions):
        """Verify filesystem is correct and expected files are present
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        files = tops.test_parameters["files"]
    
        for file_name in files:
            show_cmd = f"show file information {file_name}"
            show_output, show_cmd_txt = tests_tools.return_show_cmd(
                show_cmd, dut, tops.test_case, LOG_FILE
            )
            if show_output:
                tops.actual_output = show_output[0]["isDir"]
            elif show_cmd_txt:
                tops.actual_output = json.loads(show_cmd_txt[0]["output"])["isDir"]
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}|: {file_name} file isDir "
                f"state is |{tops.actual_output}|, correct state is "
                f"|{tops.expected_output}|.\n"
            )
    
            tops.test_result = tops.actual_output is tops.expected_output
            tops.comment += (
                f"TEST is {file_name} file present on |{tops.dut_name}|.\n"
                f"GIVEN {file_name} file isDir state is: "
                f"|{tops.expected_output}|.\n"
                f"WHEN {file_name} file isDir state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
                f"OUTPUT of |{show_cmd}| is :\n\n{show_cmd_txt}.\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [False, False, False] == [[False, Fals...False, False]]
E         At index 0 diff: False != [False, False, False]
E         Full diff:
E         - [[False, False, False], [False, False, False], [False, False, False]]
E         + [False, False, False]

tests/systests/filesystem/test_filesystem.py:103: AssertionError</failure></testcase><testcase classname="tests.systests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[BL2]" time="5.357"><failure message="AssertionError: assert 'bl2' == 'BL2'&#10;  - BL2&#10;  + bl2">self = &lt;systests.host.test_host.HostTests object at 0x107db18b0&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_hostname_is_correcet_on_(self, dut, tests_definitions):
        """Verify hostname is set on device is correct
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        tops.expected_output = tops.dut_name
        tops.actual_output = dut["connection"].run_commands(tops.show_cmd, "json")[0]["hostname"]
        print(tops.actual_output)
        #["json"]["hostname"]
        tops.test_result = tops.actual_output == tops.expected_output
    
        tops.output_msg = (
            f"On router |{tops.dut_name}| the configured hostname is "
            f"|{tops.actual_output}| and the correct hostname is "
            f"|{tops.expected_output}|"
        )
        tops.comment = (
            "TEST is hostname correct.\n"
            f"GIVEN hostname |{tops.expected_output}|.\n"
            f"WHEN hostname is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}"
        )
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output == tops.expected_output
E       AssertionError: assert 'bl2' == 'BL2'
E         - BL2
E         + bl2

tests/systests/host/test_host.py:83: AssertionError</failure></testcase><testcase classname="tests.systests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[BL2]" time="0.040"><failure message="AssertionError: assert ['up', 'up'] == [['up', 'up'], ['up', 'up']]&#10;  At index 0 diff: 'up' != ['up', 'up']&#10;  Full diff:&#10;  - [['up', 'up'], ['up', 'up']]&#10;  + ['up', 'up']">self = &lt;systests.interface.test_interface.InterfaceStatusTests object at 0x107dc58b0&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    @pytest.mark.virtual
    @pytest.mark.physical
    @pytest.mark.eos424
    def test_if_intf_protocol_status_is_connected_on_(
        self, dut, tests_definitions
    ):
        """Verify the interfaces of interest protocol statuses are up
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
            tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        print(f"\nOn router |{tops.dut_name}|:")
    
        for interface in tops.interface_list:
            interface_name = interface["interface_name"].replace(" ", "")
            int_ptr = dut["output"][tops.show_cmd]["json"]["interfaceStatuses"]
            tops.actual_output = int_ptr[interface_name]["lineProtocolStatus"]
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"On interface |{interface_name}|: interface link "
                f"line protocol status is set to: |{tops.actual_output}|"
                f", correct state is |{tops.expected_output}|.\n\n"
            )
            tops.comment += (
                f"TEST if interface |{interface_name}| link prootocol "
                f"statuses on |{tops.dut_name}|.\n"
                f"GIVEN interface status is |{tops.expected_output}|.\n"
                f"WHEN interface status is |{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['up', 'up'] == [['up', 'up'], ['up', 'up']]
E         At index 0 diff: 'up' != ['up', 'up']
E         Full diff:
E         - [['up', 'up'], ['up', 'up']]
E         + ['up', 'up']

tests/systests/interface/test_interface.py:99: AssertionError</failure></testcase><testcase classname="tests.systests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[BL2]" time="0.030"><failure message="AssertionError: assert ['connected', 'connected'] == [['connected'... 'connected']]&#10;  At index 0 diff: 'connected' != ['connected', 'connected']&#10;  Full diff:&#10;  - [['connected', 'connected'], ['connected', 'connected']]&#10;  + ['connected', 'connected']">self = &lt;systests.interface.test_interface.InterfaceStatusTests object at 0x107c36370&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    @pytest.mark.virtual
    @pytest.mark.physical
    @pytest.mark.eos424
    def test_if_intf_link_status_is_connected_on_(self, dut, tests_definitions):
        """Verify the interfaces of interest link statuses are up
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
            tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        print(f"\nOn router |{tops.dut_name}|:")
    
        for interface in tops.interface_list:
            interface_name = interface["interface_name"].replace(" ", "")
            int_ptr = dut["output"][tops.show_cmd]["json"]["interfaceStatuses"]
            tops.actual_output = int_ptr[interface_name]["linkStatus"]
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"On interface |{interface_name}|: interface link "
                f" status is set to: |{tops.actual_output}|"
                f", correct state is |{tops.expected_output}|.\n\n"
            )
            tops.comment += (
                f"TEST if interface |{interface_name}| link "
                f"status on |{tops.dut_name}|."
                f"\nGIVEN interface status is |{tops.expected_output}|.\n"
                f"WHEN interface status is |{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['connected', 'connected'] == [['connected'... 'connected']]
E         At index 0 diff: 'connected' != ['connected', 'connected']
E         Full diff:
E         - [['connected', 'connected'], ['connected', 'connected']]
E         + ['connected', 'connected']

tests/systests/interface/test_interface.py:149: AssertionError</failure></testcase><testcase classname="tests.systests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[BL2]" time="0.080"><failure message="AssertionError: assert [False, False... False, False] == [[False, Fals...False, False]]&#10;  At index 0 diff: False != [False, False, False, False, False]&#10;  Full diff:&#10;    [&#10;  -  [False,&#10;  ?  -&#10;  +  False,&#10;  -   False,...&#10;  &#10;  ...Full output truncated (33 lines hidden), use '-vv' to show">self = &lt;systests.log.test_logging.LoggingTests object at 0x107dae9a0&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_log_messages_appear_on_(self, dut, tests_definitions):
        """Verify local log messages
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        sys_msgs = tops.test_parameters["sys_msgs"]
    
        print(f"\nOn router |{tops.dut_name}|:")
    
        for sys_msg in sys_msgs:
            tops.actual_output = sys_msg in tops.show_cmd_txt
    
            tops.output_msg += (
                f"Test for log message {sys_msg}, "
                "message should not be present.\n"
            )
    
            tops.test_result = tops.actual_output is tops.expected_output
            tops.comment += (
                f"Test for log message |{sys_msg}| on |{tops.dut_name}|.\n"
                f"GIVEN message presence is |{tops.expected_output}|.\n"
                f"WHEN message presence is |{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert [False, False... False, False] == [[False, Fals...False, False]]
E         At index 0 diff: False != [False, False, False, False, False]
E         Full diff:
E           [
E         -  [False,
E         ?  -
E         +  False,
E         -   False,...
E         
E         ...Full output truncated (33 lines hidden), use '-vv' to show

tests/systests/log/test_logging.py:97: AssertionError</failure></testcase><testcase classname="tests.systests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[BL2]" time="0.009" /><testcase classname="tests.systests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[BL2]" time="0.004"><failure message="AssertionError">self = &lt;systests.system.test_system.CrashTests object at 0x107dae880&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_there_is_agents_have_crashed_on_(self, dut, tests_definitions):
        """Verifies the agents logs crash is empty
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
        """
    
&gt;       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)

tests/systests/system/test_system.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
vane/tests_tools.py:789: in __init__
    self._verify_show_cmd(self.show_cmd, self.dut)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;vane.tests_tools.TestOps object at 0x107dae520&gt;, show_cmd = 'show agent logs crash'
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}

    def _verify_show_cmd(self, show_cmd, dut):
        """Verify if show command was successfully executed on dut
    
        show_cmd (str): show command
        dut (dict): data structure of dut parameters
        """
    
        dut_name = dut["name"]
        logging.info(
            f"Verify if show command |{show_cmd}| was successfully "
            f"executed on {dut_name} dut"
        )
    
        if show_cmd in dut["output"]:
            logging.info(
                f"Verified output for show command |{show_cmd}| on "
                f"{dut_name}"
            )
        else:
            logging.critical(
                f"Show command |{show_cmd}| not executed on " f"{dut_name}"
            )
&gt;           assert False
E           AssertionError

vane/tests_tools.py:824: AssertionError</failure></testcase><testcase classname="tests.systests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[BL2]" time="0.008" /><testcase classname="tests.systests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[BL2]" time="0.026"><failure message="assert [True] == [[True]]&#10;  At index 0 diff: True != [True]&#10;  Full diff:&#10;  - [[True]]&#10;  ? -      -&#10;  + [True]">self = &lt;systests.users.test_users.UsersTests object at 0x107dcb4c0&gt;
dut = {'connection': &lt;vane.device_interface.PyeapiConn object at 0x1075e1100&gt;, 'eapi_file': 'tests/unittests/fixtures/eapi.conf', 'mgmt_ip': '10.255.22.26', 'name': 'BL2', ...}
tests_definitions = {'test_suites': [{'dir_path': 'tests/systests/interface', 'name': 'test_interface.py', 'testcases': [{'actual_output':...otal (7341510656 bytes free)\n', 'description': 'Verify zerotoucn-config file is on flash', 'dut': 'BL1', ...}]}, ...]}

    def test_if_usernames_are_configured_on_(self, dut, tests_definitions):
        """Verify username is set correctly
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        usernames = tops.test_parameters["usernames"]
    
        for username in usernames:
            tops.actual_output = username in tops.show_cmd_txt
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"On router |{tops.dut_name}|: |{username}| "
                f"username configured is "
                f"|{tops.actual_output}|, username configured "
                f"should be |{tops.expected_output}|.\n\n"
            )
            tops.comment += (
                f"TEST is {username} username configured on "
                f" |{tops.dut_name}|.\n"
                "GIVEN username configured status: "
                f"|{tops.expected_output}|.\n"
                "WHEN username configured status: "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.comment += (
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [True] == [[True]]
E         At index 0 diff: True != [True]
E         Full diff:
E         - [[True]]
E         ? -      -
E         + [True]

tests/systests/users/test_users.py:97: AssertionError</failure></testcase><testcase classname="tests.systests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[BL2]" time="0.009" /><testcase classname="tests.systests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[BL2]" time="0.027" /></testsuite></testsuites>