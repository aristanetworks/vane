<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="92" time="24.995" timestamp="2021-02-10T15:05:04.330778" hostname="00074ac39348"><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[att-CloudEOS1]" time="0.305" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[att-CloudEOS1]" time="0.224" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[att-CloudEOS1]" time="0.217" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[att-CloudEOS1]" time="0.190" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[att-CloudEOS1]" time="0.193" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[att-CloudEOS1]" time="0.268"><failure message="assert 3.33 &lt; 1&#10; +  where 3.33 = &lt;tests_tools.TestOps object at 0x7f8967634b80&gt;.actual_output&#10; +  and   1 = &lt;tests_tools.TestOps object at 0x7f8967634b80&gt;.expected_output">self = &lt;vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f8967634130&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.141.92.242:443//command-api)), 'name': 'att-CloudEOS...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):
        """Verify 1 second CPU % is under specificied value
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        dut_ptr = dut["output"][tops.show_cmd]["json"]
        tops.actual_output = dut_ptr["timeInfo"]["loadAvg"][0]
        tops.test_result = tops.actual_output &lt; tops.expected_output
    
        tops.output_msg = (
            f"\nOn router |{tops.dut_name}| 1 second CPU load average is "
            f"|{tops.actual_output}%| and should be under "
            f"|{tops.expected_output}%|"
        )
        tops.comment = (
            "TEST if 1 second CPU utilization is less than "
            f"specified value on |{tops.dut_name}|.\n"
            "GIVEN CPU utilization is less than "
            f"|{tops.expected_output}|.\n"
            f"WHEN CPU utilization is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output &lt; tops.expected_output
E       assert 3.33 &lt; 1
E        +  where 3.33 = &lt;tests_tools.TestOps object at 0x7f8967634b80&gt;.actual_output
E        +  and   1 = &lt;tests_tools.TestOps object at 0x7f8967634b80&gt;.expected_output

tests/cpu/test_cpu.py:79: AssertionError</failure></testcase><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[att-CloudEOS1]" time="0.284" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[att-CloudEOS1]" time="0.252" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[att-CloudEOS1]" time="0.198" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[att-CloudEOS1]" time="0.215" /><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_installed_on_[att-CloudEOS1]" time="0.219"><failure message="AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']&#10;  At index 2 diff: None != 'installed'&#10;  Full diff:&#10;  - ['installed', 'installed', 'installed']&#10;  ?                            ^^ ----- --&#10;  + ['installed', 'installed', None]&#10;  ?                            ^^">self = &lt;vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f8967558e50&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.141.92.242:443//command-api)), 'name': 'att-CloudEOS...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):
        """Verify a list of extension are installed on a DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        extensions = tops.test_parameters["extensions"]
    
        for extension in extensions:
            dut_ptr = dut["output"][tops.show_cmd]["json"]
    
            if extension in dut_ptr["extensions"]:
                tops.actual_output = dut_ptr["extensions"][extension]["status"]
            else:
                tops.actual_output = None
    
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}| extension "
                f"|{extension}| status is "
                f"|{tops.actual_output}|, correct status is "
                f"|{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {extension} extension installed on "
                f" |{tops.dut_name}|.\n"
                f"GIVEN {extension} extenstion installation state is "
                f"|{tops.expected_output}|.\n"
                f"WHEN {extension} extenstion installation state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
                f"OUTPUT of |{tops.show_cmd}| is:\n{tops.show_cmd_txt}"
                ".\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']
E         At index 2 diff: None != 'installed'
E         Full diff:
E         - ['installed', 'installed', 'installed']
E         ?                            ^^ ----- --
E         + ['installed', 'installed', None]
E         ?                            ^^

tests/extension/test_extension.py:97: AssertionError</failure></testcase><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_erroring_on_[att-CloudEOS1]" time="0.224" /><testcase classname="tests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[att-CloudEOS1]" time="0.940" /><testcase classname="tests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[att-CloudEOS1]" time="0.194" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[att-CloudEOS1]" time="0.192" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[att-CloudEOS1]" time="0.193" /><testcase classname="tests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[att-CloudEOS1]" time="0.233" /><testcase classname="tests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[att-CloudEOS1]" time="0.196" /><testcase classname="tests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[att-CloudEOS1]" time="0.593" /><testcase classname="tests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[att-CloudEOS1]" time="0.206" /><testcase classname="tests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[att-CloudEOS1]" time="0.225" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[att-CloudEOS1]" time="0.191" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[att-CloudEOS1]" time="0.194" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[att-CloudEOS2]" time="0.193" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[att-CloudEOS2]" time="0.204" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[att-CloudEOS2]" time="0.220" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[att-CloudEOS2]" time="0.187" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[att-CloudEOS2]" time="0.196" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[att-CloudEOS2]" time="0.249"><failure message="assert 3.88 &lt; 1&#10; +  where 3.88 = &lt;tests_tools.TestOps object at 0x7f8967478e80&gt;.actual_output&#10; +  and   1 = &lt;tests_tools.TestOps object at 0x7f8967478e80&gt;.expected_output">self = &lt;vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f89674bd2b0&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.139.150.68:443//command-api)), 'name': 'att-CloudEOS...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):
        """Verify 1 second CPU % is under specificied value
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        dut_ptr = dut["output"][tops.show_cmd]["json"]
        tops.actual_output = dut_ptr["timeInfo"]["loadAvg"][0]
        tops.test_result = tops.actual_output &lt; tops.expected_output
    
        tops.output_msg = (
            f"\nOn router |{tops.dut_name}| 1 second CPU load average is "
            f"|{tops.actual_output}%| and should be under "
            f"|{tops.expected_output}%|"
        )
        tops.comment = (
            "TEST if 1 second CPU utilization is less than "
            f"specified value on |{tops.dut_name}|.\n"
            "GIVEN CPU utilization is less than "
            f"|{tops.expected_output}|.\n"
            f"WHEN CPU utilization is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output &lt; tops.expected_output
E       assert 3.88 &lt; 1
E        +  where 3.88 = &lt;tests_tools.TestOps object at 0x7f8967478e80&gt;.actual_output
E        +  and   1 = &lt;tests_tools.TestOps object at 0x7f8967478e80&gt;.expected_output

tests/cpu/test_cpu.py:79: AssertionError</failure></testcase><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[att-CloudEOS2]" time="0.262" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[att-CloudEOS2]" time="0.250" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[att-CloudEOS2]" time="0.218" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[att-CloudEOS2]" time="0.189" /><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_installed_on_[att-CloudEOS2]" time="0.199"><failure message="AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']&#10;  At index 2 diff: None != 'installed'&#10;  Full diff:&#10;  - ['installed', 'installed', 'installed']&#10;  ?                            ^^ ----- --&#10;  + ['installed', 'installed', None]&#10;  ?                            ^^">self = &lt;vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f89674fd9d0&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.139.150.68:443//command-api)), 'name': 'att-CloudEOS...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):
        """Verify a list of extension are installed on a DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        extensions = tops.test_parameters["extensions"]
    
        for extension in extensions:
            dut_ptr = dut["output"][tops.show_cmd]["json"]
    
            if extension in dut_ptr["extensions"]:
                tops.actual_output = dut_ptr["extensions"][extension]["status"]
            else:
                tops.actual_output = None
    
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}| extension "
                f"|{extension}| status is "
                f"|{tops.actual_output}|, correct status is "
                f"|{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {extension} extension installed on "
                f" |{tops.dut_name}|.\n"
                f"GIVEN {extension} extenstion installation state is "
                f"|{tops.expected_output}|.\n"
                f"WHEN {extension} extenstion installation state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
                f"OUTPUT of |{tops.show_cmd}| is:\n{tops.show_cmd_txt}"
                ".\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']
E         At index 2 diff: None != 'installed'
E         Full diff:
E         - ['installed', 'installed', 'installed']
E         ?                            ^^ ----- --
E         + ['installed', 'installed', None]
E         ?                            ^^

tests/extension/test_extension.py:97: AssertionError</failure></testcase><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_erroring_on_[att-CloudEOS2]" time="0.212" /><testcase classname="tests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[att-CloudEOS2]" time="0.873" /><testcase classname="tests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[att-CloudEOS2]" time="0.222" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[att-CloudEOS2]" time="0.196" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[att-CloudEOS2]" time="0.191" /><testcase classname="tests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[att-CloudEOS2]" time="0.211" /><testcase classname="tests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[att-CloudEOS2]" time="0.204" /><testcase classname="tests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[att-CloudEOS2]" time="0.644" /><testcase classname="tests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[att-CloudEOS2]" time="0.243" /><testcase classname="tests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[att-CloudEOS2]" time="0.208" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[att-CloudEOS2]" time="0.197" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[att-CloudEOS2]" time="0.196" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[att-Leaf01]" time="0.204" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[att-Leaf01]" time="0.200" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[att-Leaf01]" time="0.203" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[att-Leaf01]" time="0.201" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[att-Leaf01]" time="0.206" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[att-Leaf01]" time="0.251"><failure message="assert 3.27 &lt; 1&#10; +  where 3.27 = &lt;tests_tools.TestOps object at 0x7f89674c7490&gt;.actual_output&#10; +  and   1 = &lt;tests_tools.TestOps object at 0x7f89674c7490&gt;.expected_output">self = &lt;vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f89674c7160&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.23.152.127:443//command-api)), 'name': 'att-Leaf01',...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):
        """Verify 1 second CPU % is under specificied value
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        dut_ptr = dut["output"][tops.show_cmd]["json"]
        tops.actual_output = dut_ptr["timeInfo"]["loadAvg"][0]
        tops.test_result = tops.actual_output &lt; tops.expected_output
    
        tops.output_msg = (
            f"\nOn router |{tops.dut_name}| 1 second CPU load average is "
            f"|{tops.actual_output}%| and should be under "
            f"|{tops.expected_output}%|"
        )
        tops.comment = (
            "TEST if 1 second CPU utilization is less than "
            f"specified value on |{tops.dut_name}|.\n"
            "GIVEN CPU utilization is less than "
            f"|{tops.expected_output}|.\n"
            f"WHEN CPU utilization is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output &lt; tops.expected_output
E       assert 3.27 &lt; 1
E        +  where 3.27 = &lt;tests_tools.TestOps object at 0x7f89674c7490&gt;.actual_output
E        +  and   1 = &lt;tests_tools.TestOps object at 0x7f89674c7490&gt;.expected_output

tests/cpu/test_cpu.py:79: AssertionError</failure></testcase><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[att-Leaf01]" time="0.255" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[att-Leaf01]" time="0.257" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[att-Leaf01]" time="0.203" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[att-Leaf01]" time="0.197" /><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_installed_on_[att-Leaf01]" time="0.196"><failure message="AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']&#10;  At index 2 diff: None != 'installed'&#10;  Full diff:&#10;  - ['installed', 'installed', 'installed']&#10;  ?                            ^^ ----- --&#10;  + ['installed', 'installed', None]&#10;  ?                            ^^">self = &lt;vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f8967474b50&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.23.152.127:443//command-api)), 'name': 'att-Leaf01',...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):
        """Verify a list of extension are installed on a DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        extensions = tops.test_parameters["extensions"]
    
        for extension in extensions:
            dut_ptr = dut["output"][tops.show_cmd]["json"]
    
            if extension in dut_ptr["extensions"]:
                tops.actual_output = dut_ptr["extensions"][extension]["status"]
            else:
                tops.actual_output = None
    
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}| extension "
                f"|{extension}| status is "
                f"|{tops.actual_output}|, correct status is "
                f"|{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {extension} extension installed on "
                f" |{tops.dut_name}|.\n"
                f"GIVEN {extension} extenstion installation state is "
                f"|{tops.expected_output}|.\n"
                f"WHEN {extension} extenstion installation state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
                f"OUTPUT of |{tops.show_cmd}| is:\n{tops.show_cmd_txt}"
                ".\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']
E         At index 2 diff: None != 'installed'
E         Full diff:
E         - ['installed', 'installed', 'installed']
E         ?                            ^^ ----- --
E         + ['installed', 'installed', None]
E         ?                            ^^

tests/extension/test_extension.py:97: AssertionError</failure></testcase><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_erroring_on_[att-Leaf01]" time="0.207" /><testcase classname="tests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[att-Leaf01]" time="0.952" /><testcase classname="tests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[att-Leaf01]" time="0.189" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[att-Leaf01]" time="0.197" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[att-Leaf01]" time="0.202" /><testcase classname="tests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[att-Leaf01]" time="0.221" /><testcase classname="tests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[att-Leaf01]" time="0.192" /><testcase classname="tests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[att-Leaf01]" time="0.603" /><testcase classname="tests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[att-Leaf01]" time="0.220" /><testcase classname="tests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[att-Leaf01]" time="0.193" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[att-Leaf01]" time="0.191" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[att-Leaf01]" time="0.225" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_running_on_[att-Leaf02]" time="0.194" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_port_is_correct_on_[att-Leaf02]" time="0.206" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_https_api_server_is_enabled_on_[att-Leaf02]" time="0.228" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_http_api_server_is_running_on_[att-Leaf02]" time="0.198" /><testcase classname="tests.api.test_api.APITests" name="test_if_management_local_http_api_server_is_running_on_[att-Leaf02]" time="0.215" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_sec_cpu_utlization_on_[att-Leaf02]" time="0.300"><failure message="assert 3.47 &lt; 1&#10; +  where 3.47 = &lt;tests_tools.TestOps object at 0x7f89675068b0&gt;.actual_output&#10; +  and   1 = &lt;tests_tools.TestOps object at 0x7f89675068b0&gt;.expected_output">self = &lt;vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f8967474ca0&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.141.125.33:443//command-api)), 'name': 'att-Leaf02',...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):
        """Verify 1 second CPU % is under specificied value
    
        Args:
            dut (dict): Encapsulates dut details including name, connection
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
    
        dut_ptr = dut["output"][tops.show_cmd]["json"]
        tops.actual_output = dut_ptr["timeInfo"]["loadAvg"][0]
        tops.test_result = tops.actual_output &lt; tops.expected_output
    
        tops.output_msg = (
            f"\nOn router |{tops.dut_name}| 1 second CPU load average is "
            f"|{tops.actual_output}%| and should be under "
            f"|{tops.expected_output}%|"
        )
        tops.comment = (
            "TEST if 1 second CPU utilization is less than "
            f"specified value on |{tops.dut_name}|.\n"
            "GIVEN CPU utilization is less than "
            f"|{tops.expected_output}|.\n"
            f"WHEN CPU utilization is |{tops.actual_output}|.\n"
            f"THEN test case result is |{tops.test_result}|.\n"
            f"OUTPUT of |{tops.show_cmd}| is :\n\n{tops.show_cmd_txt}.\n"
        )
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.post_testcase()
    
&gt;       assert tops.actual_output &lt; tops.expected_output
E       assert 3.47 &lt; 1
E        +  where 3.47 = &lt;tests_tools.TestOps object at 0x7f89675068b0&gt;.actual_output
E        +  and   1 = &lt;tests_tools.TestOps object at 0x7f89675068b0&gt;.expected_output

tests/cpu/test_cpu.py:79: AssertionError</failure></testcase><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_1_min_cpu_utlization_on_[att-Leaf02]" time="0.286" /><testcase classname="tests.cpu.test_cpu.CPUTests" name="test_5_min_cpu_utlization_on_[att-Leaf02]" time="0.280" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_running_on_[att-Leaf02]" time="0.203" /><testcase classname="tests.daemon.test_daemon.DaemonTests" name="test_if_daemons_are_enabled_on_[att-Leaf02]" time="0.196" /><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_installed_on_[att-Leaf02]" time="0.206"><failure message="AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']&#10;  At index 2 diff: None != 'installed'&#10;  Full diff:&#10;  - ['installed', 'installed', 'installed']&#10;  ?                            ^^ ----- --&#10;  + ['installed', 'installed', None]&#10;  ?                            ^^">self = &lt;vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f8967478430&gt;
dut = {'connection': Node(connection=EapiConnection(transport=https://3.141.125.33:443//command-api)), 'name': 'att-Leaf02',...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n'}, ...}}
tests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}

    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):
        """Verify a list of extension are installed on a DUT
    
        Args:
          dut (dict): Encapsulates dut details including name, connection
          tests_definitions (dict): Test parameters
        """
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        extensions = tops.test_parameters["extensions"]
    
        for extension in extensions:
            dut_ptr = dut["output"][tops.show_cmd]["json"]
    
            if extension in dut_ptr["extensions"]:
                tops.actual_output = dut_ptr["extensions"][extension]["status"]
            else:
                tops.actual_output = None
    
            tops.test_result = tops.actual_output == tops.expected_output
    
            tops.output_msg += (
                f"\nOn router |{tops.dut_name}| extension "
                f"|{extension}| status is "
                f"|{tops.actual_output}|, correct status is "
                f"|{tops.expected_output}|.\n"
            )
            tops.comment += (
                f"TEST is {extension} extension installed on "
                f" |{tops.dut_name}|.\n"
                f"GIVEN {extension} extenstion installation state is "
                f"|{tops.expected_output}|.\n"
                f"WHEN {extension} extenstion installation state is "
                f"|{tops.actual_output}|.\n"
                f"THEN test case result is |{tops.test_result}|.\n"
                f"OUTPUT of |{tops.show_cmd}| is:\n{tops.show_cmd_txt}"
                ".\n"
            )
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        print(f"{tops.output_msg}\n{tops.comment}")
    
        tops.actual_output, tops.expected_output = (
            tops.actual_results,
            tops.expected_results,
        )
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       AssertionError: assert ['installed',...talled', None] == ['installed',..., 'installed']
E         At index 2 diff: None != 'installed'
E         Full diff:
E         - ['installed', 'installed', 'installed']
E         ?                            ^^ ----- --
E         + ['installed', 'installed', None]
E         ?                            ^^

tests/extension/test_extension.py:97: AssertionError</failure></testcase><testcase classname="tests.extension.test_extension.ExtensionsTests" name="test_if_extensions_are_erroring_on_[att-Leaf02]" time="0.195" /><testcase classname="tests.filesystem.test_filesystem.FileSystemTests" name="test_if_files_on_[att-Leaf02]" time="0.894" /><testcase classname="tests.host.test_host.HostTests" name="test_if_hostname_is_correcet_on_[att-Leaf02]" time="0.196" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_protocol_status_is_connected_on_[att-Leaf02]" time="0.195" /><testcase classname="tests.interface.test_interface.InterfaceStatusTests" name="test_if_intf_link_status_is_connected_on_[att-Leaf02]" time="0.192" /><testcase classname="tests.log.test_logging.LoggingTests" name="test_if_log_messages_appear_on_[att-Leaf02]" time="0.216" /><testcase classname="tests.memory.test_memory.MemoryTests" name="test_memory_utilization_on_[att-Leaf02]" time="0.216" /><testcase classname="tests.system.test_system.CrashTests" name="test_if_there_is_agents_have_crashed_on_[att-Leaf02]" time="0.546" /><testcase classname="tests.system.test_system.SystemTests" name="test_if_eos_version_is_correct_on_[att-Leaf02]" time="0.203" /><testcase classname="tests.users.test_users.UsersTests" name="test_if_usernames_are_configured_on_[att-Leaf02]" time="0.199" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_if_zerotouch_is_disabled_on_[att-Leaf02]" time="0.200" /><testcase classname="tests.ztp.test_ztp.ZTPTests" name="test_for_zerotouch_config_file_on_[att-Leaf02]" time="0.200" /></testsuite></testsuites>