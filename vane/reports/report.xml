<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="4" hostname="100872f5073d" name="pytest" skipped="0" tests="12" time="17.812" timestamp="2020-10-08T01:18:05.850556"><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_resolves_on_[kg-topology-CloudEosRR1]" time="1.577"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_servers_are_reachable_on_[kg-topology-CloudEosRR1]" time="5.115"><failure message="assert [False] == [True]
  At index 0 diff: False != True
  Full diff:
  - [True]
  + [False]">self = &lt;bin.tests.dns.test_dns.DNSTests object at 0x7fb5c43ba310&gt;
dut = {&apos;connection&apos;: Node(connection=EapiConnection(transport=https://3.22.137.44:443//command-api)), &apos;name&apos;: &apos;kg-topology-C...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n&apos;}, ...}}
tests_definitions = {&apos;test_suites&apos;: [{&apos;name&apos;: &apos;test_aaa.py&apos;, &apos;testcases&apos;: [{&apos;comment&apos;: None, &apos;description&apos;: &apos;Verify AAA counters are worki...ted_output&apos;: &apos;ok&apos;, &apos;name&apos;: &apos;test_if_fan_status_is_in_spec_on_&apos;, &apos;show_cmd&apos;: &apos;show system environment cooling&apos;}]}, ...]}

    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):
        &quot;&quot;&quot; Verifies DNS servers are reachable via ping
    
            Args:
              dut (dict): Encapsulates dut details including name, connection
        &quot;&quot;&quot;
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        dns_servers = tops.test_parameters[&quot;dns_servers&quot;]
        dns_vrf = tops.test_parameters[&quot;dns_vrf&quot;]
    
        for dns_server in dns_servers:
            if dns_vrf:
                show_cmd = f&quot;ping vrf {dns_vrf} ip {dns_server}&quot;
            else:
                show_cmd = f&quot;ping {dns_server}&quot;
    
            tops.return_show_cmd(show_cmd)
            tops.actual_output = &apos;bytes from&apos; in tops.show_cmd_txt
            tops.test_result = tops.actual_output is tops.expected_output
    
            tops.output_msg += (f&quot;\nOn router |{tops.dut_name}|, verifying NTP &quot;
                                f&quot;server reachability for |{dns_server}| is &quot;
                                f&quot;|{tops.test_result}|.\n&quot;)
    
            tops.comment += (f&apos;TEST NTP servers are reachable on |{tops.dut_name}| &apos;
                             f&apos;GIVEN server |{dns_server}|.\n&apos;
                             &apos;WHEN exception is |bytes from| &apos;
                             &apos;string.\n&apos;
                             f&apos;THEN test case result is |{tops.test_result}|.\n&apos;
                             f&apos;OUTPUT of |{show_cmd}| is :\n\n{tops.show_cmd_txt}.\n&apos;)
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [False] == [True]
E         At index 0 diff: False != True
E         Full diff:
E         - [True]
E         + [False]

tests/dns/test_dns.py:131: AssertionError</failure></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_dns_configuration_on_[kg-topology-CloudEosRR1]" time="1.165"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_dns_configuration_on_[kg-topology-CloudEosRR2]" time="0.777"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_resolves_on_[kg-topology-CloudEosRR2]" time="1.195"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_resolves_on_[kg-topology-CloudEOSEdge1]" time="1.205"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_servers_are_reachable_on_[kg-topology-CloudEOSEdge1]" time="4.807"><failure message="assert [False] == [True]
  At index 0 diff: False != True
  Full diff:
  - [True]
  + [False]">self = &lt;bin.tests.dns.test_dns.DNSTests object at 0x7f676a5c05e0&gt;
dut = {&apos;connection&apos;: Node(connection=EapiConnection(transport=https://3.132.90.164:443//command-api)), &apos;name&apos;: &apos;kg-topology-...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n&apos;}, ...}}
tests_definitions = {&apos;test_suites&apos;: [{&apos;name&apos;: &apos;test_aaa.py&apos;, &apos;testcases&apos;: [{&apos;comment&apos;: None, &apos;description&apos;: &apos;Verify AAA counters are worki...ted_output&apos;: &apos;ok&apos;, &apos;name&apos;: &apos;test_if_fan_status_is_in_spec_on_&apos;, &apos;show_cmd&apos;: &apos;show system environment cooling&apos;}]}, ...]}

    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):
        &quot;&quot;&quot; Verifies DNS servers are reachable via ping
    
            Args:
              dut (dict): Encapsulates dut details including name, connection
        &quot;&quot;&quot;
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        dns_servers = tops.test_parameters[&quot;dns_servers&quot;]
        dns_vrf = tops.test_parameters[&quot;dns_vrf&quot;]
    
        for dns_server in dns_servers:
            if dns_vrf:
                show_cmd = f&quot;ping vrf {dns_vrf} ip {dns_server}&quot;
            else:
                show_cmd = f&quot;ping {dns_server}&quot;
    
            tops.return_show_cmd(show_cmd)
            tops.actual_output = &apos;bytes from&apos; in tops.show_cmd_txt
            tops.test_result = tops.actual_output is tops.expected_output
    
            tops.output_msg += (f&quot;\nOn router |{tops.dut_name}|, verifying NTP &quot;
                                f&quot;server reachability for |{dns_server}| is &quot;
                                f&quot;|{tops.test_result}|.\n&quot;)
    
            tops.comment += (f&apos;TEST NTP servers are reachable on |{tops.dut_name}| &apos;
                             f&apos;GIVEN server |{dns_server}|.\n&apos;
                             &apos;WHEN exception is |bytes from| &apos;
                             &apos;string.\n&apos;
                             f&apos;THEN test case result is |{tops.test_result}|.\n&apos;
                             f&apos;OUTPUT of |{show_cmd}| is :\n\n{tops.show_cmd_txt}.\n&apos;)
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [False] == [True]
E         At index 0 diff: False != True
E         Full diff:
E         - [True]
E         + [False]

tests/dns/test_dns.py:131: AssertionError</failure></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_dns_configuration_on_[kg-topology-CloudEOSEdge1]" time="0.646"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_servers_are_reachable_on_[kg-topology-CloudEOSEdge2]" time="4.845"><failure message="assert [False] == [True]
  At index 0 diff: False != True
  Full diff:
  - [True]
  + [False]">self = &lt;bin.tests.dns.test_dns.DNSTests object at 0x7f28a1f31490&gt;
dut = {&apos;connection&apos;: Node(connection=EapiConnection(transport=https://3.131.34.190:443//command-api)), &apos;name&apos;: &apos;kg-topology-...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n&apos;}, ...}}
tests_definitions = {&apos;test_suites&apos;: [{&apos;name&apos;: &apos;test_aaa.py&apos;, &apos;testcases&apos;: [{&apos;comment&apos;: None, &apos;description&apos;: &apos;Verify AAA counters are worki...ted_output&apos;: &apos;ok&apos;, &apos;name&apos;: &apos;test_if_fan_status_is_in_spec_on_&apos;, &apos;show_cmd&apos;: &apos;show system environment cooling&apos;}]}, ...]}

    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):
        &quot;&quot;&quot; Verifies DNS servers are reachable via ping
    
            Args:
              dut (dict): Encapsulates dut details including name, connection
        &quot;&quot;&quot;
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        dns_servers = tops.test_parameters[&quot;dns_servers&quot;]
        dns_vrf = tops.test_parameters[&quot;dns_vrf&quot;]
    
        for dns_server in dns_servers:
            if dns_vrf:
                show_cmd = f&quot;ping vrf {dns_vrf} ip {dns_server}&quot;
            else:
                show_cmd = f&quot;ping {dns_server}&quot;
    
            tops.return_show_cmd(show_cmd)
            tops.actual_output = &apos;bytes from&apos; in tops.show_cmd_txt
            tops.test_result = tops.actual_output is tops.expected_output
    
            tops.output_msg += (f&quot;\nOn router |{tops.dut_name}|, verifying NTP &quot;
                                f&quot;server reachability for |{dns_server}| is &quot;
                                f&quot;|{tops.test_result}|.\n&quot;)
    
            tops.comment += (f&apos;TEST NTP servers are reachable on |{tops.dut_name}| &apos;
                             f&apos;GIVEN server |{dns_server}|.\n&apos;
                             &apos;WHEN exception is |bytes from| &apos;
                             &apos;string.\n&apos;
                             f&apos;THEN test case result is |{tops.test_result}|.\n&apos;
                             f&apos;OUTPUT of |{show_cmd}| is :\n\n{tops.show_cmd_txt}.\n&apos;)
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [False] == [True]
E         At index 0 diff: False != True
E         Full diff:
E         - [True]
E         + [False]

tests/dns/test_dns.py:131: AssertionError</failure></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_servers_are_reachable_on_[kg-topology-CloudEosRR2]" time="4.849"><failure message="assert [False] == [True]
  At index 0 diff: False != True
  Full diff:
  - [True]
  + [False]">self = &lt;bin.tests.dns.test_dns.DNSTests object at 0x7fb5c408cca0&gt;
dut = {&apos;connection&apos;: Node(connection=EapiConnection(transport=https://3.131.6.163:443//command-api)), &apos;name&apos;: &apos;kg-topology-C...TEM:\n  name=system default-action=none\nAccounting method list for DOT1X:\n  name=dot1x default-action=none\n&apos;}, ...}}
tests_definitions = {&apos;test_suites&apos;: [{&apos;name&apos;: &apos;test_aaa.py&apos;, &apos;testcases&apos;: [{&apos;comment&apos;: None, &apos;description&apos;: &apos;Verify AAA counters are worki...ted_output&apos;: &apos;ok&apos;, &apos;name&apos;: &apos;test_if_fan_status_is_in_spec_on_&apos;, &apos;show_cmd&apos;: &apos;show system environment cooling&apos;}]}, ...]}

    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):
        &quot;&quot;&quot; Verifies DNS servers are reachable via ping
    
            Args:
              dut (dict): Encapsulates dut details including name, connection
        &quot;&quot;&quot;
    
        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)
        dns_servers = tops.test_parameters[&quot;dns_servers&quot;]
        dns_vrf = tops.test_parameters[&quot;dns_vrf&quot;]
    
        for dns_server in dns_servers:
            if dns_vrf:
                show_cmd = f&quot;ping vrf {dns_vrf} ip {dns_server}&quot;
            else:
                show_cmd = f&quot;ping {dns_server}&quot;
    
            tops.return_show_cmd(show_cmd)
            tops.actual_output = &apos;bytes from&apos; in tops.show_cmd_txt
            tops.test_result = tops.actual_output is tops.expected_output
    
            tops.output_msg += (f&quot;\nOn router |{tops.dut_name}|, verifying NTP &quot;
                                f&quot;server reachability for |{dns_server}| is &quot;
                                f&quot;|{tops.test_result}|.\n&quot;)
    
            tops.comment += (f&apos;TEST NTP servers are reachable on |{tops.dut_name}| &apos;
                             f&apos;GIVEN server |{dns_server}|.\n&apos;
                             &apos;WHEN exception is |bytes from| &apos;
                             &apos;string.\n&apos;
                             f&apos;THEN test case result is |{tops.test_result}|.\n&apos;
                             f&apos;OUTPUT of |{show_cmd}| is :\n\n{tops.show_cmd_txt}.\n&apos;)
    
            tops.actual_results.append(tops.actual_output)
            tops.expected_results.append(tops.expected_output)
    
        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results
        tops.post_testcase()
    
&gt;       assert tops.actual_results == tops.expected_results
E       assert [False] == [True]
E         At index 0 diff: False != True
E         Full diff:
E         - [True]
E         + [False]

tests/dns/test_dns.py:131: AssertionError</failure></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_if_dns_resolves_on_[kg-topology-CloudEOSEdge2]" time="1.212"></testcase><testcase classname="tests.dns.test_dns.DNSTests" name="test_dns_configuration_on_[kg-topology-CloudEOSEdge2]" time="0.678"></testcase></testsuite></testsuites>