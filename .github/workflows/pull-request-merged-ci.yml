name: pull-request-merged-ci
run-name: Pull request merge processing

# Run the unittests when a pull request is merged, and post the coverage
# results badge to the repo page

on:
  pull_request:
    branches:
      - develop
    types:
      - closed

env:
  POETRY_VERSION: 1.5.1

jobs:
  coverage:
    # Run the Vane unittests and get the total coverage, updating the
    # coverage badge if necessary

    # Only run the tests when the pull request is merged
    # A closed (canceled) PR does not need to be processed
    if: github.event.pull_request.merged == true

    runs-on: ubuntu-latest

    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # architecture: 'x64' # The default

      - name: Display the Python version
        run: python -c "import sys; print(sys.version)"

      # - name: Display github context information
      #   # Prints all the github.<xxx> variables in the workflow log.
      #   # Uncomment if needed for reference
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"

      - name: Install Vane and dependencies
        # Use poetry to install Vane and its dependencies
        #   Later stages that require Vane or dependencies must activate the virtual environment
        #   so we export `source $(poetry env info --path)/bin/activate` as env.poetry_home and
        #   eval that value in the stages that need it
        run: |
          python -m pip install --upgrade pip
          pip install poetry==$POETRY_VERSION
          poetry install
          echo "poetry_home=source $(poetry env info --path)/bin/activate" >> $GITHUB_ENV

      - name: Run the unittests
        # Install vane in "editable/developer" mode, so the executable is using
        # the source files and coverage can monitor the proper directory
        continue-on-error: true
        run: |
          eval "${{ env.poetry_home }}"
          mkdir -p $PWD/tests/unittests/fixtures/reports/results
          pytest --cov-report term-missing --cov=$PWD/vane $PWD/tests/unittests

      - name: Report the coverage
        # Get the coverage score and create the coverage badge
        # Coverage score is for reference only
        run: |
          eval "${{ env.poetry_home }}"
          cov_score=$(coverage report | awk '$1 == "TOTAL" {print $NF+0}')
          echo -e "\n----------------"
          echo "Coverage is ${cov_score}%"
          echo -e "----------------\n"
          coverage-badge -f -o coverage.svg

      - name: Commit the coverage badge
        # Commit the coverage badge file to the coverage-badge branch, if it was created
        #   This process empties out the repo except for the README and the coverage badge file,
        #   then copies the README from the coverage-badge branche over the current README. Then
        #   a commit is made, but not pushed to the current branch but pushed to the coverage-badge
        #   branch instead. Since we're working in a container, all the changes are discarded and do
        #   not affect develop or the branch that was merged.
        run: |
          git status || true
          git config --local user.name actions-user
          git config --local user.email "actions@github.com"
          #
          # List the files in the repo
          #
          ls -la
          #
          # Show the current repo status
          #
          git status
          #
          # Remove all the files in the repo except the .git folder,
          # the README file, and the coverage file. 'or' the command
          # to true since it will fail when trying to delete '.' and '..'
          #
          shopt -s dotglob extglob
          rm -rf !(.git|README.md|coverage.svg) || true
          #
          if [ $(git ls-files --others | grep coverage.svg ) ] ; then
            echo "Updating coverage badge"
            # Copy the version of README from the coverage-badge branch
            curl https://raw.githubusercontent.com/aristanetworks/vane/coverage-badge/README.md -o README.md
            # Add and commit all the changes we just made, so we end up committing
            # just the README and the coverage badge to the coverage-badge branch
            git add --all
            git status
            # Make the commit, but it will not be saved in GitHub on the working branch
            git commit -am "Updating coverage badge"
            # Push the commit to the coverage-badge branch (not to the working branch or develop)
            git push -f origin ${{ github.ref }}:coverage-badge
          fi
