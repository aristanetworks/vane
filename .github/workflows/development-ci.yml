name: development-ci
run-name: ${{ github.actor }} CI development run

on:
  push:
    # Do not run when merging into develop or master
    branches-ignore:
      - 'develop'
      - 'main'

env:
  POETRY_VERSION: 1.5.1
  POETRY_ENVIRONMENT: "source $(poetry env info --path)/bin/activate"

jobs:
  validate:
    # Run validation checks on the code that has been changed,
    # including checking formatting with Black, and linting checks
    # with flake8 and pylint. Branches cannot be merged into develop
    # unless the validate checks all pass.

    runs-on: ubuntu-latest

    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # architecture: 'x64' # The default

      - name: Display the Python version
        run: python -c "import sys; print(sys.version)"

      # - name: Display github context information
      #   # Prints all the github.<xxx> variables in the workflow log.
      #   # Uncomment if needed for reference
      #   env:
      #     GITHUB_CONTEXT: ${{ toJson(github) }}
      #   run: echo "$GITHUB_CONTEXT"

      - name: Install Vane and dependencies
        # Use poetry to install Vane and its dependencies
        #   Later stages that require Vane or dependencies must activate the virtual environment
        #   with `source $(poetry env info --path)/bin/activate`
        run: |
          python -m pip install --upgrade pip
          pip install poetry==$POETRY_VERSION
          poetry install

      - name: Get fork point
        id: forkpoint
        # List all the commits in branch yet to be applied to develop (git
        # cherry), then take the first one (head) and pull the commit hash from
        # the line (awk), and request the commit hash before that one (git show
        # ... <hash>^1). This gives us the fork point hash. We need to check
        # out the develop branch before doing this, but use "fetch" so we do
        # not change to the develop branch.
        run: |
          git fetch origin develop:develop
          echo "fork=$(git show $(git cherry -v develop | head -n 1 | awk '{ print $2 }')^1 --format=%H | head -n 1)" >> $GITHUB_ENV

      - name: Get changed files
        id: changes
        # Adds all changed files as env.all, and changed python files as env.python
        run: |
          echo "Fork point hash: ${{ env.fork }}"

          echo -e "\n"
          echo "All changed files:"
          git diff --name-only --diff-filter=ACMRT ${{ env.fork }} ${{ github.sha }} || echo '<none>'
          echo "all=$(git diff --name-only --diff-filter=ACMRT ${{ env.fork }} ${{ github.sha }} | xargs)" >> $GITHUB_ENV

          echo -e "\n"
          echo "Changed python files:"
          git diff --name-only --diff-filter=ACMRT ${{ env.fork }} ${{ github.sha }} | grep .py$ || echo '<none>'
          echo "python=$(git diff --name-only --diff-filter=ACMRT ${{ env.fork }} ${{ github.sha }} | grep .py$ | xargs)" >> $GITHUB_ENV

      # Run Black on the whole repo
      - name: Run Black to check the code for formatting problems
        if: ${{ env.python }}
        # If any code needs reformatting, black returns an exit code of 1,
        # which fails the action
        run: |
          exec "${POETRY_ENVIRONMENT}"
          black --check ${{ env.python }}

      # Run flake8 on the vane and tests directories
      - name: Lint with flake8
        if: ${{ env.python }}
        run: |
          exec "${POETRY_ENVIRONMENT}"
          flake8 ${{ env.python }}

      # Run pylint on the vane and tests directories
      - name: Lint with pylint
        if: ${{ env.python }}
        run: |
          exec "${POETRY_ENVIRONMENT}"
          pylint ${{ env.python }}

  unittest:
    # Run the Vane unittests
    # Test coverage is compared with a 90% target goal and the check will fail
    # if below that point, however the branch is allowed to be merged with
    # develop regardless of the coverage score and whether the unittest check
    # passes or fails.

    runs-on: ubuntu-latest

    steps:

      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          # architecture: 'x64' # The default

      - name: Display the Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        # Use poetry to install Vane and its dependencies
        #   Later stages that require Vane or dependencies must activate the virtual environment
        #   with `source $(poetry env info --path)/bin/activate`
        run: |
          python -m pip install --upgrade pip
          pip install poetry==$POETRY_VERSION
          poetry install

      - name: Run the unittests
        # Install vane in "editable/developer" mode, so the executable is using
        # the source files and coverage can monitor the proper directory
        continue-on-error: true
        run: |
          source $(poetry env info --path)/bin/activate
          mkdir -p $PWD/tests/unittests/fixtures/reports/results
          pytest --cov-report term-missing --cov=$PWD/vane $PWD/tests/unittests

      - name: Report the coverage
        # Get the coverage score and return success if the value is >= 90
        run: |
          source $(poetry env info --path)/bin/activate
          cov_score=$(coverage report | awk '$1 == "TOTAL" {print $NF+0}')
          echo -e "\n----------------"
          echo "Coverage is ${cov_score}%"
          echo -e "----------------\n"
          [ "${cov_score}" -ge "90" ]
