{"report": {"environment": {"Python": "3.8.5", "Platform": "Linux-5.4.39-linuxkit-x86_64-with-glibc2.2.5"}, "tests": [{"name": "tests/test_pytest.py::PyTestTests::test_assert_true[kg-topology-CloudEosRR1]", "duration": 0.004767199978232384, "run_index": 0, "setup": {"name": "setup", "duration": 0.00163569999858737, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0010470999404788017, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00044870004057884216, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_authentication_counters_are_incrementing_on_[kg-topology-CloudEosRR1]", "duration": 0.0005918003153055906, "run_index": 1, "setup": {"name": "setup", "duration": 0.00019800011068582535, "outcome": "skipped", "longrepr": "('/project/vane/bin/tests/aaa/test_aaa.py', 51, 'Skipped: No AAA setup on DUTs')"}, "teardown": {"name": "teardown", "duration": 0.00019580009393393993, "outcome": "passed"}, "outcome": "skipped"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_aaa_session_logging_is_working_on_[kg-topology-CloudEosRR1]", "duration": 0.4928602003492415, "run_index": 2, "setup": {"name": "setup", "duration": 0.2417191001586616, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009128600126132369, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| identified eAPi AAA session: |commandApi|\n"}, "teardown": {"name": "teardown", "duration": 0.00029339990578591824, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_commands_authorization_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.48202709946781397, "run_index": 3, "setup": {"name": "setup", "duration": 0.2350350997876376, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011441200040280819, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA authorization methods for fcommands: |['none']|\n"}, "teardown": {"name": "teardown", "duration": 0.000515699852257967, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_authorization_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.4819434001110494, "run_index": 4, "setup": {"name": "setup", "duration": 0.2359593000728637, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009547099936753511, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA authorization methods for exec: |['none']|\n"}, "teardown": {"name": "teardown", "duration": 0.00047770002856850624, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_default_login_authentication_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.4867989004123956, "run_index": 5, "setup": {"name": "setup", "duration": 0.23840650008060038, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009320200188085437, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA authentication methods for default login: |['local']|\n"}, "teardown": {"name": "teardown", "duration": 0.0006657000631093979, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_login_authentication_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.5023356000892818, "run_index": 6, "setup": {"name": "setup", "duration": 0.24594329996034503, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010203100042417645, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002459001261740923, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_authentication_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.48165319999679923, "run_index": 7, "setup": {"name": "setup", "duration": 0.23393029998987913, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01352120004594326, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA authentication methods for dot1x default: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00027139997109770775, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_enable_authentication_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.4955112000461668, "run_index": 8, "setup": {"name": "setup", "duration": 0.24304069997742772, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009050300111994147, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA authentication methods for enable default: |['local']|\n"}, "teardown": {"name": "teardown", "duration": 0.00037949997931718826, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_system_accounting_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.4816577001474798, "run_index": 9, "setup": {"name": "setup", "duration": 0.23555230000056326, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010181500110775232, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA accounting methods for default: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00037160003557801247, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_accounting_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.48727279994636774, "run_index": 10, "setup": {"name": "setup", "duration": 0.23824530001729727, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010531899984925985, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA accounting exec methods for console: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00025029992684721947, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_priviledge_accounting_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.5311692000832409, "run_index": 11, "setup": {"name": "setup", "duration": 0.2602168000303209, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010380599880591035, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA accounting exec methods for console: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.0003550001420080662, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_accounting_methods_set_on_[kg-topology-CloudEosRR1]", "duration": 0.4844237002544105, "run_index": 12, "setup": {"name": "setup", "duration": 0.23760069999843836, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008790000109001994, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| AAA accounting exec methods for dot1x: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00043230014853179455, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_running_on_[kg-topology-CloudEosRR1]", "duration": 0.572090300032869, "run_index": 13, "setup": {"name": "setup", "duration": 0.23638210003264248, "outcome": "passed"}, "call": {"name": "call", "duration": 0.09908830001950264, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00023779994808137417, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_port_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.5042201995383948, "run_index": 14, "setup": {"name": "setup", "duration": 0.2392087997868657, "outcome": "passed"}, "call": {"name": "call", "duration": 0.025528700090944767, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00027389987371861935, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_enabled_on_[kg-topology-CloudEosRR1]", "duration": 0.5182507003191859, "run_index": 15, "setup": {"name": "setup", "duration": 0.2486626000609249, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020493500167503953, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004320000298321247, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_http_api_server_is_running_on_[kg-topology-CloudEosRR1]", "duration": 0.4980682998429984, "run_index": 16, "setup": {"name": "setup", "duration": 0.23898219992406666, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01986110000871122, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00024279998615384102, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_local_http_api_server_is_running_on_[kg-topology-CloudEosRR1]", "duration": 0.49395570042543113, "run_index": 17, "setup": {"name": "setup", "duration": 0.23678210005164146, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020076400134712458, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003151001874357462, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_sec_cpu_utlization_on_[kg-topology-CloudEosRR1]", "duration": 0.5647523999214172, "run_index": 18, "setup": {"name": "setup", "duration": 0.2387679999228567, "outcome": "passed"}, "call": {"name": "call", "duration": 0.08657869999296963, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| 1 second CPU load average is |1.18%| and should be under |10%|\nTEST if 1 second CPU utilization is less than specified value on |kg-topology-CloudEosRR1|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.18|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.18, 1.17, 1.18\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1928  102  3.4 ?        Sl     Oct 09 55-08:33:25 Sfe\n 1678  0.4  2.0 ?        Sl     Oct 09 05:14:56 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.12.101 -taillogs -grpcaddr=0.0.0.0:6042\n 5435  0.2  0.7 ?        SNl    Nov 25 00:23:30 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1231  0.1  0.9 ?        S      Oct 09 02:28:58 ProcMgr-worker\n 1545  0.1  7.1 ?        Sl     Oct 09 01:44:58 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:41 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    7  0.0  0.0 ?        S      Oct 09 00:01:19 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:01 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:11 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  345  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:2]\n  383  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  414  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  679  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  733  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  749  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  751  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:35 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  778  0.0  0.0 ?        Ss     Oct 09 00:00:15 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  849  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  868  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  986  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  988  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1001  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1005  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1016  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1021  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1022  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1053  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1177  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1178  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1211  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1214  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1216  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1230  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1403  0.0  0.0 ?        S      Oct 09 00:17:10 /usr/bin/EosOomAdjust\n 1411  0.0  0.0 ?        S      Oct 09 00:00:34 [rbfd_vrf_cleanu]\n 1426  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1463  0.0  0.0 ?        S      Oct 09 00:04:08 /usr/bin/SlabMonitor\n 1464  0.0  2.5 ?        S      Oct 09 00:57:15 Sysdb\n 1543  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1547  0.0  1.4 ?        S      Oct 09 00:02:42 Fru\n 1548  0.0  1.8 ?        S      Oct 09 00:01:00 Launcher\n 1712  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=275482372096,275482095106,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1713  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1715  0.0  1.2 ?        S      Oct 09 00:14:46 Lldp\n 1717  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=275539207066,275531172101,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1718  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1719  0.0  1.2 ?        S      Oct 09 00:05:14 McastCommon\n 1722  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=275630742842,275586496008,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1723  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1725  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=275697984092,275668336464,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1726  0.0  1.1 ?        S      Oct 09 00:03:13 PortSec\n 1727  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1729  0.0  1.3 ?        S      Oct 09 00:06:29 Bfd\n 1730  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=275798425594,275754087410,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1731  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1732  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.3 ?        S      Oct 09 00:27:54 Lag\n 1738  0.0  1.7 ?        S      Oct 09 00:55:09 SuperServer\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=279430842216,279242511590,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.4 ?        S      Oct 09 00:05:48 Ira\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=279643633598,279537036113,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1753  0.0  1.1 ?        S      Oct 09 00:04:37 LedPolicy\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=279769194613,279729578605,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1755  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1756  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=279994695436,279989742052,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1757  0.0  1.3 ?        S      Oct 09 00:12:01 EventMgr\n 1758  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1759  0.0  1.2 ?        S      Oct 09 00:41:30 StpTxRx\n 1760  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=283497454610,280155363384,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1761  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  1.1 ?        S      Oct 09 00:01:00 StandbyCpld\n 1764  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=283615375164,283615161637,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1765  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1766  0.0  1.0 ?        S      Oct 09 01:02:11 AgentMonitor\n 1767  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=283815717588,283815476170,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1768  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1769  0.0  1.2 ?        S      Oct 09 00:02:20 Tunnel\n 1770  0.0  1.5 ?        Sl     Oct 09 00:02:54 Aaa\n 1772  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=284200272970,284200028375,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1773  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1774  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=284441840621,284425363995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1775  0.0  1.2 ?        S      Oct 09 00:05:22 StpTopology\n 1776  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1777  0.0  1.3 ?        S      Oct 09 00:30:58 Acl\n 1780  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=288142997842,287926529966,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1781  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1782  0.0  1.1 ?        S      Oct 09 00:08:03 Stp\n 1783  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=288348042626,288306991250,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1784  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=288476386621,288476154232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1787  0.0  1.1 ?        S      Oct 09 00:02:52 KernelNetworkInfo\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1791  0.0  1.2 ?        S      Oct 09 00:05:17 McastCommon6\n 1792  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=288660551570,288660315029,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1793  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1794  0.0  1.2 ?        S      Oct 09 00:05:24 LacpTxAgent\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=292182880197,292182644203,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1798  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=292387136971,292386913377,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1799  0.0  1.4 ?        S      Oct 09 00:07:44 Arp\n 1801  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1802  0.0  1.3 ?        S      Oct 09 00:05:22 KernelFib\n 1803  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=292597182171,292545957912,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1804  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1805  0.0  1.2 ?        S      Oct 09 00:04:12 Qos\n 1808  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=293031182227,292789955533,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1811  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1813  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=296490028279,296489674232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1814  0.0  1.1 ?        S      Oct 09 00:02:51 Thermostat\n 1816  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1818  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1820  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=296723998947,296723793865,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1821  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1823  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=296913137499,296912919995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1824  0.0  1.1 ?        S      Oct 09 00:02:46 TopoAgent\n 1826  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1828  0.0  1.0 ?        S      Oct 09 00:01:01 PowerFuse\n 1830  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=297125141566,297124919716,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1832  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=300674037695,300668400686,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1835  0.0  1.1 ?        S      Oct 09 00:01:00 PowerManager\n 1838  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1842  0.0  1.3 ?        S      Oct 09 00:10:53 Ebra\n 1849  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=301136672884,300906411409,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1857  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1860  0.0  1.1 ?        S      Oct 09 00:01:00 ReloadCauseAgent\n 1861  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=301283236428,301260543814,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1866  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1867  0.0  1.5 ?        S      Oct 09 00:05:35 IgmpSnooping\n 1868  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1882  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=305461543441,305461133260,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1887  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1888  0.0  1.3 ?        S      Oct 09 00:02:52 StaticRoute\n 1891  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=305680427337,305680168169,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1896  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1897  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=305860331663,305860120352,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1898  0.0  1.6 ?        S      Oct 09 00:07:34 IpRib\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1904  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=309314764439,309314498787,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1905  0.0  1.9 ?        S      Oct 09 00:03:34 BgpCliHelper\n 1907  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1908  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=309483970353,309483752885,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1909  0.0  1.2 ?        S      Oct 09 00:05:39 ConnectedRoute\n 1912  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1913  0.0  2.2 ?        Sl     Oct 09 00:18:40 Bgp\n 1916  0.0  1.3 ?        S      Oct 09 00:03:30 RouteInput\n 1924  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=310187581898,309839049654,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1926  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2274  0.0  0.0 ?        Ssl    Oct 09 00:00:58 /usr/sbin/rsyslogd -n\n 2325  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2420  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=357235757262,357235513961,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2423  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2425  0.0  1.1 ?        S      Oct 09 00:01:05 LicenseManager\n 2617  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2618  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2619  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2623  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2626  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console\n 2627  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2629  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2678  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=378052162806,378051926006,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2679  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2681  0.0  1.2 ?        S      Oct 09 00:17:27 Ipsec\n 2684  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2713  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2717  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3345  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3347  0.0  0.1 ?        Ssl    Oct 09 00:03:31 /usr/libexec/strongswan/charon --use-syslog\n 4607  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5742810699600,5742810359951,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4608  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4609  0.0  1.3 ?        Sl     Oct 09 00:01:07 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4653  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4655  0.0  0.1 ?        S      Oct 09 00:00:03 nginx: worker process                                              \n 5394  0.0  0.0 ?        S      Nov 25 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n20558  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n26853  0.0  0.0 ?        S    18:24:00 00:00:00 [kworker/0:1]\n28287  0.0  0.0 ?        S    18:45:00 00:00:00 [kworker/0:4]\n28668  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:2]\n29064  0.0  0.0 ?        S    18:57:00 00:00:00 [kworker/0:0]\n29256  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0006377000827342272, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_min_cpu_utlization_on_[kg-topology-CloudEosRR1]", "duration": 0.5780466003343463, "run_index": 19, "setup": {"name": "setup", "duration": 0.2456051001790911, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0865017999894917, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| 1 minute CPU load average is |1.17%| and should be under |10%|\nTEST if 1 minute CPU utilization is less than specified value on |kg-topology-CloudEosRR1|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.17|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.18, 1.17, 1.18\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1928  102  3.4 ?        Sl     Oct 09 55-08:33:25 Sfe\n 1678  0.4  2.0 ?        Sl     Oct 09 05:14:56 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.12.101 -taillogs -grpcaddr=0.0.0.0:6042\n 5435  0.2  0.7 ?        SNl    Nov 25 00:23:30 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1231  0.1  0.9 ?        S      Oct 09 02:28:58 ProcMgr-worker\n 1545  0.1  7.1 ?        Sl     Oct 09 01:44:58 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:41 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    7  0.0  0.0 ?        S      Oct 09 00:01:19 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:01 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:11 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  345  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:2]\n  383  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  414  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  679  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  733  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  749  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  751  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:35 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  778  0.0  0.0 ?        Ss     Oct 09 00:00:15 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  849  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  868  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  986  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  988  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1001  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1005  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1016  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1021  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1022  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1053  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1177  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1178  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1211  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1214  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1216  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1230  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1403  0.0  0.0 ?        S      Oct 09 00:17:10 /usr/bin/EosOomAdjust\n 1411  0.0  0.0 ?        S      Oct 09 00:00:34 [rbfd_vrf_cleanu]\n 1426  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1463  0.0  0.0 ?        S      Oct 09 00:04:08 /usr/bin/SlabMonitor\n 1464  0.0  2.5 ?        S      Oct 09 00:57:15 Sysdb\n 1543  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1547  0.0  1.4 ?        S      Oct 09 00:02:42 Fru\n 1548  0.0  1.8 ?        S      Oct 09 00:01:00 Launcher\n 1712  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=275482372096,275482095106,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1713  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1715  0.0  1.2 ?        S      Oct 09 00:14:46 Lldp\n 1717  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=275539207066,275531172101,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1718  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1719  0.0  1.2 ?        S      Oct 09 00:05:14 McastCommon\n 1722  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=275630742842,275586496008,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1723  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1725  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=275697984092,275668336464,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1726  0.0  1.1 ?        S      Oct 09 00:03:13 PortSec\n 1727  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1729  0.0  1.3 ?        S      Oct 09 00:06:29 Bfd\n 1730  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=275798425594,275754087410,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1731  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1732  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.3 ?        S      Oct 09 00:27:54 Lag\n 1738  0.0  1.7 ?        S      Oct 09 00:55:09 SuperServer\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=279430842216,279242511590,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.4 ?        S      Oct 09 00:05:48 Ira\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=279643633598,279537036113,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1753  0.0  1.1 ?        S      Oct 09 00:04:37 LedPolicy\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=279769194613,279729578605,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1755  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1756  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=279994695436,279989742052,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1757  0.0  1.3 ?        S      Oct 09 00:12:01 EventMgr\n 1758  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1759  0.0  1.2 ?        S      Oct 09 00:41:30 StpTxRx\n 1760  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=283497454610,280155363384,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1761  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  1.1 ?        S      Oct 09 00:01:00 StandbyCpld\n 1764  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=283615375164,283615161637,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1765  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1766  0.0  1.0 ?        S      Oct 09 01:02:11 AgentMonitor\n 1767  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=283815717588,283815476170,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1768  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1769  0.0  1.2 ?        S      Oct 09 00:02:20 Tunnel\n 1770  0.0  1.5 ?        Sl     Oct 09 00:02:54 Aaa\n 1772  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=284200272970,284200028375,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1773  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1774  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=284441840621,284425363995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1775  0.0  1.2 ?        S      Oct 09 00:05:22 StpTopology\n 1776  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1777  0.0  1.3 ?        S      Oct 09 00:30:58 Acl\n 1780  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=288142997842,287926529966,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1781  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1782  0.0  1.1 ?        S      Oct 09 00:08:03 Stp\n 1783  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=288348042626,288306991250,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1784  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=288476386621,288476154232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1787  0.0  1.1 ?        S      Oct 09 00:02:52 KernelNetworkInfo\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1791  0.0  1.2 ?        S      Oct 09 00:05:17 McastCommon6\n 1792  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=288660551570,288660315029,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1793  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1794  0.0  1.2 ?        S      Oct 09 00:05:24 LacpTxAgent\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=292182880197,292182644203,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1798  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=292387136971,292386913377,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1799  0.0  1.4 ?        S      Oct 09 00:07:44 Arp\n 1801  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1802  0.0  1.3 ?        S      Oct 09 00:05:22 KernelFib\n 1803  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=292597182171,292545957912,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1804  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1805  0.0  1.2 ?        S      Oct 09 00:04:12 Qos\n 1808  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=293031182227,292789955533,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1811  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1813  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=296490028279,296489674232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1814  0.0  1.1 ?        S      Oct 09 00:02:51 Thermostat\n 1816  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1818  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1820  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=296723998947,296723793865,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1821  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1823  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=296913137499,296912919995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1824  0.0  1.1 ?        S      Oct 09 00:02:46 TopoAgent\n 1826  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1828  0.0  1.0 ?        S      Oct 09 00:01:01 PowerFuse\n 1830  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=297125141566,297124919716,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1832  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=300674037695,300668400686,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1835  0.0  1.1 ?        S      Oct 09 00:01:00 PowerManager\n 1838  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1842  0.0  1.3 ?        S      Oct 09 00:10:53 Ebra\n 1849  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=301136672884,300906411409,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1857  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1860  0.0  1.1 ?        S      Oct 09 00:01:00 ReloadCauseAgent\n 1861  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=301283236428,301260543814,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1866  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1867  0.0  1.5 ?        S      Oct 09 00:05:35 IgmpSnooping\n 1868  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1882  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=305461543441,305461133260,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1887  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1888  0.0  1.3 ?        S      Oct 09 00:02:52 StaticRoute\n 1891  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=305680427337,305680168169,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1896  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1897  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=305860331663,305860120352,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1898  0.0  1.6 ?        S      Oct 09 00:07:34 IpRib\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1904  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=309314764439,309314498787,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1905  0.0  1.9 ?        S      Oct 09 00:03:34 BgpCliHelper\n 1907  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1908  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=309483970353,309483752885,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1909  0.0  1.2 ?        S      Oct 09 00:05:39 ConnectedRoute\n 1912  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1913  0.0  2.2 ?        Sl     Oct 09 00:18:40 Bgp\n 1916  0.0  1.3 ?        S      Oct 09 00:03:30 RouteInput\n 1924  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=310187581898,309839049654,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1926  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2274  0.0  0.0 ?        Ssl    Oct 09 00:00:58 /usr/sbin/rsyslogd -n\n 2325  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2420  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=357235757262,357235513961,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2423  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2425  0.0  1.1 ?        S      Oct 09 00:01:05 LicenseManager\n 2617  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2618  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2619  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2623  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2626  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console\n 2627  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2629  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2678  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=378052162806,378051926006,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2679  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2681  0.0  1.2 ?        S      Oct 09 00:17:27 Ipsec\n 2684  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2713  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2717  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3345  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3347  0.0  0.1 ?        Ssl    Oct 09 00:03:31 /usr/libexec/strongswan/charon --use-syslog\n 4607  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5742810699600,5742810359951,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4608  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4609  0.0  1.3 ?        Sl     Oct 09 00:01:07 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4653  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4655  0.0  0.1 ?        S      Oct 09 00:00:03 nginx: worker process                                              \n 5394  0.0  0.0 ?        S      Nov 25 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n20558  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n26853  0.0  0.0 ?        S    18:24:00 00:00:00 [kworker/0:1]\n28287  0.0  0.0 ?        S    18:45:00 00:00:00 [kworker/0:4]\n28668  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:2]\n29064  0.0  0.0 ?        S    18:57:00 00:00:00 [kworker/0:0]\n29256  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00033459998667240143, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_5_min_cpu_utlization_on_[kg-topology-CloudEosRR1]", "duration": 0.5547100997064263, "run_index": 20, "setup": {"name": "setup", "duration": 0.23398789996281266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.08648009994067252, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| 5 minute CPU load average is |1.18%| and should be under |10%|\nTEST if 5 minute CPU utilization is less than specified value on |kg-topology-CloudEosRR1|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.18|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.18, 1.17, 1.18\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1928  102  3.4 ?        Sl     Oct 09 55-08:33:25 Sfe\n 1678  0.4  2.0 ?        Sl     Oct 09 05:14:56 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.12.101 -taillogs -grpcaddr=0.0.0.0:6042\n 5435  0.2  0.7 ?        SNl    Nov 25 00:23:30 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1231  0.1  0.9 ?        S      Oct 09 02:28:58 ProcMgr-worker\n 1545  0.1  7.1 ?        Sl     Oct 09 01:44:58 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:41 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    7  0.0  0.0 ?        S      Oct 09 00:01:19 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:01 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:11 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  345  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:2]\n  383  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  414  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  679  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  733  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  749  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  751  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:35 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  778  0.0  0.0 ?        Ss     Oct 09 00:00:15 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  849  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  868  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  986  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  988  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1001  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1005  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1016  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1021  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1022  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1053  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1177  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1178  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1211  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1214  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1216  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1230  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1403  0.0  0.0 ?        S      Oct 09 00:17:10 /usr/bin/EosOomAdjust\n 1411  0.0  0.0 ?        S      Oct 09 00:00:34 [rbfd_vrf_cleanu]\n 1426  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1463  0.0  0.0 ?        S      Oct 09 00:04:08 /usr/bin/SlabMonitor\n 1464  0.0  2.5 ?        S      Oct 09 00:57:15 Sysdb\n 1543  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1547  0.0  1.4 ?        S      Oct 09 00:02:42 Fru\n 1548  0.0  1.8 ?        S      Oct 09 00:01:00 Launcher\n 1712  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=275482372096,275482095106,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1713  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1715  0.0  1.2 ?        S      Oct 09 00:14:46 Lldp\n 1717  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=275539207066,275531172101,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1718  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1719  0.0  1.2 ?        S      Oct 09 00:05:14 McastCommon\n 1722  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=275630742842,275586496008,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1723  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1725  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=275697984092,275668336464,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1726  0.0  1.1 ?        S      Oct 09 00:03:13 PortSec\n 1727  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1729  0.0  1.3 ?        S      Oct 09 00:06:29 Bfd\n 1730  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=275798425594,275754087410,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1731  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1732  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.3 ?        S      Oct 09 00:27:54 Lag\n 1738  0.0  1.7 ?        S      Oct 09 00:55:09 SuperServer\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=279430842216,279242511590,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.4 ?        S      Oct 09 00:05:48 Ira\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=279643633598,279537036113,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1753  0.0  1.1 ?        S      Oct 09 00:04:37 LedPolicy\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=279769194613,279729578605,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1755  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1756  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=279994695436,279989742052,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1757  0.0  1.3 ?        S      Oct 09 00:12:01 EventMgr\n 1758  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1759  0.0  1.2 ?        S      Oct 09 00:41:30 StpTxRx\n 1760  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=283497454610,280155363384,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1761  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  1.1 ?        S      Oct 09 00:01:00 StandbyCpld\n 1764  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=283615375164,283615161637,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1765  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1766  0.0  1.0 ?        S      Oct 09 01:02:11 AgentMonitor\n 1767  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=283815717588,283815476170,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1768  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1769  0.0  1.2 ?        S      Oct 09 00:02:20 Tunnel\n 1770  0.0  1.5 ?        Sl     Oct 09 00:02:54 Aaa\n 1772  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=284200272970,284200028375,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1773  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1774  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=284441840621,284425363995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1775  0.0  1.2 ?        S      Oct 09 00:05:22 StpTopology\n 1776  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1777  0.0  1.3 ?        S      Oct 09 00:30:58 Acl\n 1780  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=288142997842,287926529966,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1781  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1782  0.0  1.1 ?        S      Oct 09 00:08:03 Stp\n 1783  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=288348042626,288306991250,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1784  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=288476386621,288476154232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1787  0.0  1.1 ?        S      Oct 09 00:02:52 KernelNetworkInfo\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1791  0.0  1.2 ?        S      Oct 09 00:05:17 McastCommon6\n 1792  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=288660551570,288660315029,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1793  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1794  0.0  1.2 ?        S      Oct 09 00:05:24 LacpTxAgent\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=292182880197,292182644203,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1798  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=292387136971,292386913377,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1799  0.0  1.4 ?        S      Oct 09 00:07:44 Arp\n 1801  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1802  0.0  1.3 ?        S      Oct 09 00:05:22 KernelFib\n 1803  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=292597182171,292545957912,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1804  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1805  0.0  1.2 ?        S      Oct 09 00:04:12 Qos\n 1808  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=293031182227,292789955533,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1811  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1813  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=296490028279,296489674232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1814  0.0  1.1 ?        S      Oct 09 00:02:51 Thermostat\n 1816  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1818  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1820  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=296723998947,296723793865,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1821  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1823  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=296913137499,296912919995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1824  0.0  1.1 ?        S      Oct 09 00:02:46 TopoAgent\n 1826  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1828  0.0  1.0 ?        S      Oct 09 00:01:01 PowerFuse\n 1830  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=297125141566,297124919716,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1832  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=300674037695,300668400686,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1835  0.0  1.1 ?        S      Oct 09 00:01:00 PowerManager\n 1838  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1842  0.0  1.3 ?        S      Oct 09 00:10:53 Ebra\n 1849  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=301136672884,300906411409,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1857  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1860  0.0  1.1 ?        S      Oct 09 00:01:00 ReloadCauseAgent\n 1861  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=301283236428,301260543814,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1866  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1867  0.0  1.5 ?        S      Oct 09 00:05:35 IgmpSnooping\n 1868  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1882  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=305461543441,305461133260,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1887  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1888  0.0  1.3 ?        S      Oct 09 00:02:52 StaticRoute\n 1891  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=305680427337,305680168169,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1896  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1897  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=305860331663,305860120352,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1898  0.0  1.6 ?        S      Oct 09 00:07:34 IpRib\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1904  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=309314764439,309314498787,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1905  0.0  1.9 ?        S      Oct 09 00:03:34 BgpCliHelper\n 1907  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1908  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=309483970353,309483752885,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1909  0.0  1.2 ?        S      Oct 09 00:05:39 ConnectedRoute\n 1912  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1913  0.0  2.2 ?        Sl     Oct 09 00:18:40 Bgp\n 1916  0.0  1.3 ?        S      Oct 09 00:03:30 RouteInput\n 1924  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=310187581898,309839049654,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1926  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2274  0.0  0.0 ?        Ssl    Oct 09 00:00:58 /usr/sbin/rsyslogd -n\n 2325  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2420  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=357235757262,357235513961,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2423  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2425  0.0  1.1 ?        S      Oct 09 00:01:05 LicenseManager\n 2617  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2618  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2619  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2623  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2626  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console\n 2627  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2629  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2678  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=378052162806,378051926006,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2679  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2681  0.0  1.2 ?        S      Oct 09 00:17:27 Ipsec\n 2684  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2713  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2717  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3345  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3347  0.0  0.1 ?        Ssl    Oct 09 00:03:31 /usr/libexec/strongswan/charon --use-syslog\n 4607  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5742810699600,5742810359951,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4608  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4609  0.0  1.3 ?        Sl     Oct 09 00:01:07 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4653  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4655  0.0  0.1 ?        S      Oct 09 00:00:03 nginx: worker process                                              \n 5394  0.0  0.0 ?        S      Nov 25 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n20558  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n26853  0.0  0.0 ?        S    18:24:00 00:00:00 [kworker/0:1]\n28287  0.0  0.0 ?        S    18:45:00 00:00:00 [kworker/0:4]\n28668  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:2]\n29064  0.0  0.0 ?        S    18:57:00 00:00:00 [kworker/0:0]\n29256  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002541998401284218, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_running_on_[kg-topology-CloudEosRR1]", "duration": 0.5012196998577565, "run_index": 21, "setup": {"name": "setup", "duration": 0.24183230008929968, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017194599844515324, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|, daemon running state is |True| correct state is |True|.\n\nTEST is TerminAttr daemon running on |kg-topology-CloudEosRR1|.\nGIVEN expected TerminAttr running state: |True|.\nWHEN TerminAttr device running state is |True|.\nTHEN test case result is |True|.\nOUTPUT of |show daemon| is :\n\nProcess: TerminAttr (running with PID 1678)\nUptime: 54 days, 2:49:07 (Start time: Fri Oct 09 16:10:25 2020)\nNo configuration options stored.\n\nNo status data stored.\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00036049983464181423, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_enabled_on_[kg-topology-CloudEosRR1]", "duration": 0.5079131000675261, "run_index": 22, "setup": {"name": "setup", "duration": 0.24469990003854036, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0178868998773396, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|, daemon enabled state is |True| correct state is |True|.\n\nTEST is TerminAttr daemon enabled on |kg-topology-CloudEosRR1|.\nGIVEN expected TerminAttr enabled state: |True|.\nWHEN TerminAttr device enabled state is |True|.\nTHEN test case result is |True|.\nOUTPUT of |show daemon| is :\n\nProcess: TerminAttr (running with PID 1678)\nUptime: 54 days, 2:49:07 (Start time: Fri Oct 09 16:10:25 2020)\nNo configuration options stored.\n\nNo status data stored.\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0006264001131057739, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_resolves_on_[kg-topology-CloudEosRR1]", "duration": 1.665394099894911, "run_index": 23, "setup": {"name": "setup", "duration": 0.23838039999827743, "outcome": "passed"}, "call": {"name": "call", "duration": 1.1880340999923646, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|, DNS resolution is|True| for google.com.\n\nOn router |kg-topology-CloudEosRR1|, DNS resolution is|True| for cnn.com.\n\nOn router |kg-topology-CloudEosRR1|, DNS resolution is|True| for arista.com.\n\nTEST can |kg-topology-CloudEosRR1| resolve |google.com|.\nGIVEN URL is |google.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping google.com| is :\n\nPING google.com (172.217.9.78) 72(100) bytes of data.\n76 bytes from ord38s09-in-f14.1e100.net (172.217.9.78): icmp_seq=1 ttl=101 (truncated)\n76 bytes from ord38s09-in-f14.1e100.net (172.217.9.78): icmp_seq=2 ttl=101 (truncated)\n76 bytes from ord38s09-in-f14.1e100.net (172.217.9.78): icmp_seq=3 ttl=101 (truncated)\n76 bytes from ord38s09-in-f14.1e100.net (172.217.9.78): icmp_seq=4 ttl=101 (truncated)\n76 bytes from ord38s09-in-f14.1e100.net (172.217.9.78): icmp_seq=5 ttl=101 (truncated)\n\n--- google.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 64ms\nrtt min/avg/max/mdev = 17.494/17.510/17.531/0.084 ms, pipe 2, ipg/ewma 16.016/17.507 ms\n.\nTEST can |kg-topology-CloudEosRR1| resolve |cnn.com|.\nGIVEN URL is |cnn.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping cnn.com| is :\n\nPING cnn.com (151.101.65.67) 72(100) bytes of data.\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=1 ttl=39 time=11.4 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=2 ttl=39 time=11.1 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=3 ttl=39 time=11.1 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=4 ttl=39 time=11.2 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=5 ttl=39 time=11.4 ms\n\n--- cnn.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 46ms\nrtt min/avg/max/mdev = 11.168/11.304/11.480/0.187 ms, pipe 2, ipg/ewma 11.668/11.374 ms\n.\nTEST can |kg-topology-CloudEosRR1| resolve |arista.com|.\nGIVEN URL is |arista.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping arista.com| is :\n\nPING arista.com (64.68.200.46) 72(100) bytes of data.\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=1 ttl=39 time=23.8 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=2 ttl=39 time=23.6 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=3 ttl=39 time=23.7 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=4 ttl=39 time=23.7 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=5 ttl=39 time=23.6 ms\n\n--- arista.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 164ms\nrtt min/avg/max/mdev = 23.651/23.739/23.884/0.085 ms, pipe 3, ipg/ewma 41.177/23.808 ms\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005991999059915543, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_servers_are_reachable_on_[kg-topology-CloudEosRR1]", "duration": 5.145417500054464, "run_index": 24, "setup": {"name": "setup", "duration": 0.26907999999821186, "outcome": "passed"}, "call": {"name": "call", "duration": 4.606923999963328, "outcome": "failed", "longrepr": "self = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f349b6070>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.242.29:443//command-api)), 'name': 'kg-topology-...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        dns_servers = tops.test_parameters[\"dns_servers\"]\n        dns_vrf = tops.test_parameters[\"dns_vrf\"]\n    \n        for dns_server in dns_servers:\n            if dns_vrf:\n                show_cmd = f\"ping vrf {dns_vrf} ip {dns_server}\"\n            else:\n                show_cmd = f\"ping {dns_server}\"\n    \n            tops.return_show_cmd(show_cmd)\n            tops.actual_output = 'bytes from' in tops.show_cmd_txt\n            tops.test_result = tops.actual_output is tops.expected_output\n    \n            tops.output_msg += (f\"\\nOn router |{tops.dut_name}|, verifying NTP \"\n                                f\"server reachability for |{dns_server}| is \"\n                                f\"|{tops.test_result}|.\\n\")\n    \n            tops.comment += (f'TEST NTP servers are reachable on |{tops.dut_name}| '\n                             f'GIVEN server |{dns_server}|.\\n'\n                             'WHEN exception is |bytes from| '\n                             'string.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n'\n                             f'OUTPUT of |{show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [False] == [True]\nE         At index 0 diff: False != True\nE         Full diff:\nE         - [True]\nE         + [False]\n\ntests/dns/test_dns.py:131: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00033350009471178055, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_dns_configuration_on_[kg-topology-CloudEosRR1]", "duration": 0.9711925997398794, "run_index": 25, "setup": {"name": "setup", "duration": 0.24047179985791445, "outcome": "passed"}, "call": {"name": "call", "duration": 0.48973140004090965, "outcome": "passed", "stdout": "|kg-topology-CloudEosRR1| has the dns config |ip name-server vrf default 11.201.12.2\n|, expect the dns config |ip name-server vrf default 11.201.12.2\n|.\n\n\nTEST |kg-topology-CloudEosRR1| DNS config.\nGIVEN DNS config |ip name-server vrf default 11.201.12.2\n|.\nWHEN DNS config |ip name-server vrf default 11.201.12.2\n|.\nTHEN test case result is |True|.\n\nOUTPUT of |show running-config section name-server| is :\n\nip name-server vrf default 11.201.12.2\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005175999831408262, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_temp_is_in_spec_on_[kg-topology-CloudEosRR1]", "duration": 0.49108350020833313, "run_index": 26, "setup": {"name": "setup", "duration": 0.23584130010567605, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01892569987103343, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00047520012594759464, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_sensors_temp_is_in_spec_on_[kg-topology-CloudEosRR1]", "duration": 0.4949906999245286, "run_index": 27, "setup": {"name": "setup", "duration": 0.23936180002056062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.016019599977880716, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00024749990552663803, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_power_are_in_spec_on_[kg-topology-CloudEosRR1]", "duration": 0.5059472001157701, "run_index": 28, "setup": {"name": "setup", "duration": 0.24285680009052157, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019923999905586243, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt have power-supplies.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt have power-supplies.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00030960002914071083, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_cooling_is_in_spec_on_[kg-topology-CloudEosRR1]", "duration": 0.5245720001403242, "run_index": 29, "setup": {"name": "setup", "duration": 0.2525456000585109, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01912890002131462, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003519000019878149, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_fan_status_is_in_spec_on_[kg-topology-CloudEosRR1]", "duration": 0.5193699998781085, "run_index": 30, "setup": {"name": "setup", "duration": 0.2504666999448091, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018144699977710843, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require fans.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR1| doesnt require fans.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002919000107795, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_installed_on_[kg-topology-CloudEosRR1]", "duration": 0.5236523998901248, "run_index": 31, "setup": {"name": "setup", "duration": 0.25122199999168515, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020758300088346004, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| extension |awslogs.swix| status is |installed|, correct status is |installed|.\n\nOn router |kg-topology-CloudEosRR1| extension |awsha.rpm| status is |installed|, correct status is |installed|.\n\nTEST is awslogs.swix extension installed on  |kg-topology-CloudEosRR1|.\nGIVEN awslogs.swix extenstion installation state is |installed|.\nWHEN awslogs.swix extenstion installation state is |installed|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\nTEST is awsha.rpm extension installed on  |kg-topology-CloudEosRR1|.\nGIVEN awsha.rpm extenstion installation state is |installed|.\nWHEN awsha.rpm extenstion installation state is |installed|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00045009981840848923, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_erroring_on_[kg-topology-CloudEosRR1]", "duration": 0.521746400045231, "run_index": 32, "setup": {"name": "setup", "duration": 0.24916770006529987, "outcome": "passed"}, "call": {"name": "call", "duration": 0.022670600097626448, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| extension |awslogs.swix| error status is |False|, correct error status is |False|.\n\nOn router |kg-topology-CloudEosRR1| extension |awsha.rpm| error status is |False|, correct error status is |False|.\n\nTEST is awslogs.swix extension not erroring on  |kg-topology-CloudEosRR1|.\nGIVEN awslogs.swix extenstion error state is |False|.\nWHEN awslogs.swix extenstion error state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\nTEST is awsha.rpm extension not erroring on  |kg-topology-CloudEosRR1|.\nGIVEN awsha.rpm extenstion error state is |False|.\nWHEN awsha.rpm extenstion error state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0007403998170047998, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/filesystem/test_filesystem.py::FileSystemTests::test_if_files_on_[kg-topology-CloudEosRR1]", "duration": 1.228864399716258, "run_index": 33, "setup": {"name": "setup", "duration": 0.27359330002218485, "outcome": "passed"}, "call": {"name": "call", "duration": 0.6810011998750269, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|: flash:startup-config file isDir state is |False|, correct state is |False|.\n\nOn router |kg-topology-CloudEosRR1|: flash:veos-config file isDir state is |False|, correct state is |False|.\n\nOn router |kg-topology-CloudEosRR1|: flash:zerotouch-config file isDir state is |False|, correct state is |False|.\n\nTEST is flash:startup-config file present on |kg-topology-CloudEosRR1|.\nGIVEN flash:startup-config file isDir state is: |False|.\nWHEN flash:startup-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:startup-config| is :\n\n[{'output': 'flash:/startup-config:\\n  type is file\\n'}].\nTEST is flash:veos-config file present on |kg-topology-CloudEosRR1|.\nGIVEN flash:veos-config file isDir state is: |False|.\nWHEN flash:veos-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:veos-config| is :\n\n[{'output': 'flash:/veos-config:\\n  type is file\\n'}].\nTEST is flash:zerotouch-config file present on |kg-topology-CloudEosRR1|.\nGIVEN flash:zerotouch-config file isDir state is: |False|.\nWHEN flash:zerotouch-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:zerotouch-config| is :\n\n[{'output': 'flash:/zerotouch-config:\\n  type is file\\n'}].\n\n"}, "teardown": {"name": "teardown", "duration": 0.0006765997968614101, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/host/test_host.py::HostTests::test_if_hostname_is_correcet_on_[kg-topology-CloudEosRR1]", "duration": 0.6931843000929803, "run_index": 34, "setup": {"name": "setup", "duration": 0.33638640004210174, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02006229991093278, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR1| the configured hostname is |kg-topology-CloudEosRR1| and the correct hostname is |kg-topology-CloudEosRR1|\nTEST is hostname correct.\nGIVEN hostname |kg-topology-CloudEosRR1|.\nWHEN hostname is |kg-topology-CloudEosRR1|.\nTHEN test case result is |True|.\nOUTPUT of |show hostname| is :\n\nHostname: kg-topology-CloudEosRR1\nFQDN:     kg-topology-CloudEosRR1\n\n"}, "teardown": {"name": "teardown", "duration": 0.00034920009784400463, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_protocol_status_is_connected_on_[kg-topology-CloudEosRR1]", "duration": 0.5406231002416462, "run_index": 35, "setup": {"name": "setup", "duration": 0.26093000010587275, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018368399934843183, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface link line protocol status is set to: |up|, correct state is |up|.\n\n\nTEST if interface |Ethernet1| link prootocol statuses on |kg-topology-CloudEosRR1|.\nGIVEN interface status is |up|.\nWHEN interface status is |up|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces status| is :\n\nPort       Name   Status       Vlan     Duplex Speed  Type         Flags Encapsulation\nEt1               connected    routed   full   unconf 10/100/1000                     \nEt100             connected    routed   full   10G    10/100/1000                     \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003947000950574875, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_link_status_is_connected_on_[kg-topology-CloudEosRR1]", "duration": 0.5353916997555643, "run_index": 36, "setup": {"name": "setup", "duration": 0.25851590000092983, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01752289989963174, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface link  status is set to: |connected|, correct state is |connected|.\n\n\nTEST if interface |Ethernet1| link status on |kg-topology-CloudEosRR1|.\nGIVEN interface status is |connected|.\nWHEN interface status is |connected|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces status| is :\n\nPort       Name   Status       Vlan     Duplex Speed  Type         Flags Encapsulation\nEt1               connected    routed   full   unconf 10/100/1000                     \nEt100             connected    routed   full   10G    10/100/1000                     \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0008369998540729284, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfacePhyTests::test_if_intf_phy_status_connected_on_[kg-topology-CloudEosRR1]", "duration": 0.667107299901545, "run_index": 37, "setup": {"name": "setup", "duration": 0.32391000003553927, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01892409985885024, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00036319997161626816, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_if_interface_errors_on_[kg-topology-CloudEosRR1]", "duration": 0.517350199399516, "run_index": 38, "setup": {"name": "setup", "duration": 0.24373739981092513, "outcome": "passed"}, "call": {"name": "call", "duration": 0.029453199822455645, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface Rx errors is |0|, correct Rx errors is |0|.\n\nOn interface |Ethernet1|: interface Giant Frames is |0|, correct Giant Frames is |0|.\n\nOn interface |Ethernet1|: interface Tx Errors is |0|, correct Tx Errors is |0|.\n\nOn interface |Ethernet1|: interface Runt Frames is |0|, correct Runt Frames is |0|.\n\nOn interface |Ethernet1|: interface FCS Errors is |0|, correct FCS Errors is |0|.\n\nOn interface |Ethernet1|: interface Alignment Errors is |0|, correct Alignment Errors is |0|.\n\n\nTEST if interface |Ethernet1| Rx Errors is correct.\nGIVEN Rx errors is |0|.\nWHEN Rx errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Giant Frames is correct.\nGIVEN Giant Frames is |0|.\nWHEN Giant Frames is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Tx Errors is correct.\nGIVEN Tx Errors is |0|.\nWHEN Tx Errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Runt Frames is correct.\nGIVEN Runt Frames is |0|.\nWHEN Runt Frames is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| FCS Errors is correct.\nGIVEN FCS Errors is |0|.\nWHEN FCS Errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Alignment Errors is correct.\nGIVEN Alignment Errors is |0|.\nWHEN Alignment Errors is |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de91.1b6c (bia 02df.de91.1b6c)\n  Internet address is 11.201.12.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 45 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.0 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.2 kbps (- with framing overhead), 25 packets/sec\n     103016374 packets input, 12767084911 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115291802 packets output, 21649084649 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de50.a8f9 (bia 02df.de50.a8f9)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 43 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.3/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 13 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.103/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 49 minutes\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004221999552100897, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_interface_utilization_on_[kg-topology-CloudEosRR1]", "duration": 0.5350443997886032, "run_index": 39, "setup": {"name": "setup", "duration": 0.25393959996290505, "outcome": "passed"}, "call": {"name": "call", "duration": 0.026866599917411804, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: input bandwidth utilization is |0.0002204510058823974%|, bandwidth utilization should be less than |70%|.\n\nOn interface |Ethernet1|: output bandwidth utilization is |0.0003723301400396447%|, bandwidth utilization should be less than |70%|.\n\n\nTEST if interface |Ethernet1| input bw utilization is correct.\nGIVEN bw utilization is |70|.\nWHEN bw utilization is |0.0002204510058823974|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| output bw utilization is correct.\nGIVEN bw utilization is |70|.\nWHEN bw utilization is |0.0003723301400396447|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de91.1b6c (bia 02df.de91.1b6c)\n  Internet address is 11.201.12.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 45 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.0 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.2 kbps (- with framing overhead), 25 packets/sec\n     103016374 packets input, 12767084911 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115291802 packets output, 21649084649 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de50.a8f9 (bia 02df.de50.a8f9)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 43 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.3/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 13 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.103/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 49 minutes\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00029859994538128376, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_out_counters_are_discarding_on_[kg-topology-CloudEosRR1]", "duration": 0.5480811004526913, "run_index": 40, "setup": {"name": "setup", "duration": 0.2641993002034724, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019434799905866385, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface counter discards has |0| outDiscards, correct state is |0|.\n\n\nTEST if interface |Ethernet1| counters has outbound discards on |kg-topology-CloudEosRR1|.\nGIVEN interface outbound discards are |0|\nWHEN interface outbound discards are |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces counters discards| is :\n\nPort               InDiscards    OutDiscards \n--------------- ---------------- ----------- \nEt1                         0              0 \nEt100                       0              0 \n---------           ---------      --------- \nTotals                      0              0 \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00024770013988018036, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_in_counters_are_discarding_on_[kg-topology-CloudEosRR1]", "duration": 0.5151693995576352, "run_index": 41, "setup": {"name": "setup", "duration": 0.24817369994707406, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018500799778848886, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface counter discards has |0| inDiscards, correct state is |0|.\n\n\nTEST if interface |Ethernet1| counters has inbound discards on |kg-topology-CloudEosRR1|.\nGIVEN interface inbound discards are |0|.\nWHEN interface inbound discards are |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces counters discards| is :\n\nPort               InDiscards    OutDiscards \n--------------- ---------------- ----------- \nEt1                         0              0 \nEt100                       0              0 \n---------           ---------      --------- \nTotals                      0              0 \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00032119988463819027, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceMtuTests::test_if_intf_mtu_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.5243226999882609, "run_index": 42, "setup": {"name": "setup", "duration": 0.24922339990735054, "outcome": "passed"}, "call": {"name": "call", "duration": 0.025158600183203816, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceMtuTests object at 0x7f6f34739520>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.242.29:443//command-api)), 'name': 'kg-topology-...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_mtu_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        print(f\"\\nOn router |{tops.dut_name}|:\")\n    \n        for interface in tops.interface_list:\n            interface_name = interface['interface_name'].replace(\" \", \"\")\n            int_ptr = dut[\"output\"][tops.show_cmd]['json']['interfaces']\n            tops.actual_output = int_ptr[interface_name]['mtu']\n            tops.test_result = tops.actual_output == tops.expected_output\n    \n            tops.output_msg += (f\"On interface |{interface_name}|: interface \"\n                                f\"MTU is |{tops.actual_output}|, correct MTU is \"\n                                f\"|{tops.expected_output}|.\\n\\n\")\n            tops.comment += (f'TEST if interface |{interface_name}| MTU is correct '\n                             f'on |{tops.dut_name}|.\\n'\n                             f'GIVEN MTU of |{tops.expected_output}|.\\n'\n                             f'WHEN interface MTU is |{tops.actual_output}|.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.comment += (f'OUTPUT of |{tops.show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [1500] == [10178]\nE         At index 0 diff: 1500 != 10178\nE         Full diff:\nE         - [10178]\nE         + [1500]\n\ntests/interface/test_interface.py:605: AssertionError", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface MTU is |1500|, correct MTU is |10178|.\n\n\nTEST if interface |Ethernet1| MTU is correct on |kg-topology-CloudEosRR1|.\nGIVEN MTU of |10178|.\nWHEN interface MTU is |1500|.\nTHEN test case result is |False|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de91.1b6c (bia 02df.de91.1b6c)\n  Internet address is 11.201.12.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 45 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.0 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.2 kbps (- with framing overhead), 25 packets/sec\n     103016374 packets input, 12767084911 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115291802 packets output, 21649084649 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 02df.de50.a8f9 (bia 02df.de50.a8f9)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 43 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.3/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 13 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.103/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 49 minutes\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0007172999903559685, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_rx_is_enabled_on_[kg-topology-CloudEosRR1]", "duration": 0.5414901999756694, "run_index": 43, "setup": {"name": "setup", "duration": 0.26021880004554987, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020774699980393052, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface LLDPrxEnabled is in state |True|, correct LLDP rxEnabled state is |True|\nTEST if interface |Ethernet1| LLDP receive is enabled on |kg-topology-CloudEosRR1|.\nGIVEN LLDP receive state is |True|.\nWHEN LLDP receive state is |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp| is :\n\nLLDP transmit interval      : 30 seconds\nLLDP transmit holdtime      : 120 seconds\nLLDP reinitialization delay : 2 seconds\nLLDP Management Address VRF : default\n\nEnabled optional TLVs:\n  Port Description\n  System Name\n  System Description\n  System Capabilities\n  Management Address (best)\n  IEEE802.1 Port VLAN ID\n  IEEE802.3 Link Aggregation\n  IEEE802.3 Maximum Frame Size\n  IEEE802.3 Power Via MDI\n  LLDP-MED Capabilities\n  LLDP-MED Network Policy\n\nPort           Tx Enabled    Rx Enabled \n----------- ---------------- ---------- \nEt1            Yes           Yes        \nEt100          Yes           Yes        \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002778999041765928, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_tx_is_enabled_on_[kg-topology-CloudEosRR1]", "duration": 0.5033225000370294, "run_index": 44, "setup": {"name": "setup", "duration": 0.2426607001107186, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017760799964889884, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: interface LLDPtxEnabled is in state |True|, correct LLDP txEnabled state is |True|.\n\n\nTEST if interface |Ethernet1| LLDP receive is enabled on |kg-topology-CloudEosRR1|.\nGIVEN LLDP receive state is |True|.\nWHEN LLDP receive state is |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp| is :\n\nLLDP transmit interval      : 30 seconds\nLLDP transmit holdtime      : 120 seconds\nLLDP reinitialization delay : 2 seconds\nLLDP Management Address VRF : default\n\nEnabled optional TLVs:\n  Port Description\n  System Name\n  System Description\n  System Capabilities\n  Management Address (best)\n  IEEE802.1 Port VLAN ID\n  IEEE802.3 Link Aggregation\n  IEEE802.3 Maximum Frame Size\n  IEEE802.3 Power Via MDI\n  LLDP-MED Capabilities\n  LLDP-MED Network Policy\n\nPort           Tx Enabled    Rx Enabled \n----------- ---------------- ---------- \nEt1            Yes           Yes        \nEt100          Yes           Yes        \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00024029985070228577, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_system_name_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.4884474999271333, "run_index": 45, "setup": {"name": "setup", "duration": 0.23629159992560744, "outcome": "passed"}, "call": {"name": "call", "duration": 0.015569000039249659, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR1|: the LLDP local-info system name is |kg-topology-CloudEosRR1|, correct name is |kg-topology-CloudEosRR1|.\n\n\nTEST if lldp system name matches hostname on dut kg-topology-CloudEosRR1.\nGIVEN hostname is |kg-topology-CloudEosRR1|.\nWHEN LLDP system name is |kg-topology-CloudEosRR1|.\nTHEN test case result is |True|.\nOUTPUT of |show lldp local-info| is:\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00029530003666877747, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_max_frame_size_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.5245318999513984, "run_index": 46, "setup": {"name": "setup", "duration": 0.25249879993498325, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019070900045335293, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f34749e50>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.242.29:443//command-api)), 'name': 'kg-topology-...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_max_frame_size_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info maxFrameSize is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        print(f\"\\nOn router |{tops.dut_name}|:\")\n    \n        for interface in tops.interface_list:\n            interface_name = interface['interface_name'].replace(\" \", \"\")\n            int_ptr = dut[\"output\"][tops.show_cmd][\"json\"]['localInterfaceInfo']\n            tops.actual_output = int_ptr[interface_name]['maxFrameSize']\n    \n            tops.output_msg += (f\"On interface |{interface_name}|: LLDP local-info \"\n                                f\"maxFrameSize is |{tops.actual_output}|, correct \"\n                                f\"maxFrameSize is |{tops.expected_output}|.\\n\\n\")\n            tops.test_result = tops.actual_output == tops.expected_output\n    \n            tops.comment += (f'TEST if |{tops.dut_name}| LLDP maxFrameSize is correct '\n                             f'on interface |{interface_name}|.\\n'\n                             f'GIVEN LLDP maxFrameSize is |{tops.expected_output}|.\\n'\n                             f'WHEN LLDP maxFrameSize is |{tops.actual_output}|.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.comment += (f'OUTPUT of |{tops.show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [9236] == [10200]\nE         At index 0 diff: 9236 != 10200\nE         Full diff:\nE         - [10200]\nE         + [9236]\n\ntests/lldp/test_lldp.py:203: AssertionError", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: LLDP local-info maxFrameSize is |9236|, correct maxFrameSize is |10200|.\n\n\nTEST if |kg-topology-CloudEosRR1| LLDP maxFrameSize is correct on interface |Ethernet1|.\nGIVEN LLDP maxFrameSize is |10200|.\nWHEN LLDP maxFrameSize is |9236|.\nTHEN test case result is |False|.\n\nOUTPUT of |show lldp local-info| is :\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004634000360965729, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_interface_id_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.5359915001317859, "run_index": 47, "setup": {"name": "setup", "duration": 0.2582666000816971, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018978300038725138, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nOn interface |Ethernet1|: LLDP local-info interfaceIdType is |interfaceName|, correct interfaceIdType is |interfaceName|.\n\n\n\nTEST if kg-topology-CloudEosRR1 LLDP interfaceIdType is correct on interface |Ethernet1|.\nGIVEN LLDP interfaceIdType is |interfaceName|.\nWHEN LLDP interfaceIdType is |interfaceName|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp local-info| is :\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00047999992966651917, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/log/test_logging.py::LoggingTests::test_if_log_messages_appear_on_[kg-topology-CloudEosRR1]", "duration": 0.5687494999729097, "run_index": 48, "setup": {"name": "setup", "duration": 0.25772159988991916, "outcome": "passed"}, "call": {"name": "call", "duration": 0.05297910002991557, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1|:\nTest for log message critical, message should not be present.\nTest for log message warning, message should not be present.\nTest for log message ECC, message should not be present.\nTest for log message servers errors, message should not be present.\nTest for log message parity, message should not be present.\n\nTest for log message |critical| on |kg-topology-CloudEosRR1|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |warning| on |kg-topology-CloudEosRR1|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |ECC| on |kg-topology-CloudEosRR1|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |servers errors| on |kg-topology-CloudEosRR1|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |parity| on |kg-topology-CloudEosRR1|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nOUTPUT of |show logging| is :\n\nSyslog logging: enabled\n    Buffer logging: level debugging\n    Console logging: level errors\n    Persistent logging: disabled\n    Monitor logging: level errors\n    Synchronous logging: disabled\n    Trap logging: level informational\n    Sequence numbers: disabled\n    Syslog facility: local4\n    Hostname format: Hostname only\n    Repeat logging interval: disabled\n    Repeat messages: disabled\n\nFacility                   Severity            Effective Severity\n--------------------       -------------       ------------------\naaa                        debugging           debugging    \naccounting                 debugging           debugging    \nacl                        debugging           debugging    \nagent                      debugging           debugging    \nale                        debugging           debugging    \narp                        debugging           debugging    \nbfd                        debugging           debugging    \nbgp                        debugging           debugging    \nbmp                        debugging           debugging    \ncapacity                   debugging           debugging    \ncapi                       debugging           debugging    \nclear                      debugging           debugging    \ncvx                        debugging           debugging    \ndataplane                  debugging           debugging    \ndhcp                       debugging           debugging    \ndot1x                      debugging           debugging    \ndscp                       debugging           debugging    \nenvmon                     debugging           debugging    \neth                        debugging           debugging    \neventmon                   debugging           debugging    \nextension                  debugging           debugging    \nfhrp                       debugging           debugging    \nflow                       debugging           debugging    \nforwarding                 debugging           debugging    \nfru                        debugging           debugging    \nfwk                        debugging           debugging    \ngmp                        debugging           debugging    \nhardware                   debugging           debugging    \nhealth                     debugging           debugging    \nhttpservice                debugging           debugging    \nigmp                       debugging           debugging    \nigmpsnooping               debugging           debugging    \nint                        debugging           debugging    \nintf                       debugging           debugging    \nip6routing                 debugging           debugging    \niprib                      debugging           debugging    \nira                        debugging           debugging    \nisis                       debugging           debugging    \nkernelfib                  debugging           debugging    \nlacp                       debugging           debugging    \nlag                        debugging           debugging    \nlauncher                   debugging           debugging    \nldp                        debugging           debugging    \nlicense                    debugging           debugging    \nlineproto                  debugging           debugging    \nlldp                       debugging           debugging    \nloadbalancer               debugging           debugging    \nlogmgr                     debugging           debugging    \nloopback                   debugging           debugging    \nloopprotect                debugging           debugging    \nmapreducemonitor           debugging           debugging    \nmcs                        debugging           debugging    \nmirroring                  debugging           debugging    \nmka                        debugging           debugging    \nmlag                       debugging           debugging    \nmldsnooping                debugging           debugging    \nmmode                      debugging           debugging    \nmroute                     debugging           debugging    \nmrp                        debugging           debugging    \nmsdp                       debugging           debugging    \nmsrp                       debugging           debugging    \nmsspolicymonitor           debugging           debugging    \nmvrp                       debugging           debugging    \nnat                        debugging           debugging    \nopenconfig                 debugging           debugging    \nopenflow                   debugging           debugging    \nospf                       debugging           debugging    \nospf3                      debugging           debugging    \npackage                    debugging           debugging    \npfc                        debugging           debugging    \npimbsr                     debugging           debugging    \nportsecurity               debugging           debugging    \nptp                        debugging           debugging    \npwrmgmt                    debugging           debugging    \nqos                        debugging           debugging    \nqueuemonitor               debugging           debugging    \nradius                     debugging           debugging    \nredundancy                 debugging           debugging    \nrib                        debugging           debugging    \nrouting                    debugging           debugging    \nsecurity                   debugging           debugging    \nservermonitor              debugging           debugging    \nspantree                   debugging           debugging    \nsso                        debugging           debugging    \nstagemgr                   debugging           debugging    \nsys                        debugging           debugging    \nsysdb                      debugging           debugging    \ntapagg                     debugging           debugging    \ntcp                        debugging           debugging    \ntransceiver                debugging           debugging    \ntunnel                     debugging           debugging    \ntunnelintf                 debugging           debugging    \nvmtracersess               debugging           debugging    \nvmwarevi                   debugging           debugging    \nvmwarevs                   debugging           debugging    \nvrf                        debugging           debugging    \nvrrp                       debugging           debugging    \nvxlan                      debugging           debugging    \nxmpp                       debugging           debugging    \nztp                        debugging           debugging    \n\nLog Buffer:\nNov 29 16:57:12 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user ftpuser failed to login [from: 115.76.163.18] [service: sshd] [reason: Authentication failed - Bad user]\nNov 29 16:59:20 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user RPM failed to login [from: 116.98.170.208] [service: sshd] [reason: Authentication failed - Bad user]\nNov 29 17:11:55 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user one failed to login [from: 116.98.170.208] [service: sshd] [reason: Authentication failed - Bad user]\nNov 29 17:15:17 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user music failed to login [from: 116.98.170.208] [service: sshd] [reason: Authentication failed - Bad user]\nNov 29 17:18:50 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user jason failed to login [from: 115.76.163.18] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 05:46:50 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 101.20.136.181] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 05:46:58 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 101.20.136.181] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 21:30:43 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user cvpsystem logged in [from: localhost] [service: TerminAttr]\nNov 30 21:30:43 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user cvpsystem logged out [from: localhost] [service: TerminAttr]\nNov 30 21:30:43 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user cvpsystem logged in [from: localhost] [service: TerminAttr]\nNov 30 21:30:43 kg-topology-CloudEosRR1 ConfigAgent: %SYS-5-CONFIG_SESSION_ENTERED: User cvpsystem entered configuration session capiVerify-1545-4cfd022c335311eba6f5020000000000 on TerminAttr (localhost)\nNov 30 21:30:44 kg-topology-CloudEosRR1 ConfigAgent: %SYS-5-CONFIG_SESSION_EXITED: User cvpsystem exited configuration session capiVerify-1545-4cfd022c335311eba6f5020000000000 on TerminAttr (localhost)\nNov 30 21:30:44 kg-topology-CloudEosRR1 ConfigAgent: %SYS-5-CONFIG_SESSION_ABORTED: User cvpsystem aborted configuration session capiVerify-1545-4cfd022c335311eba6f5020000000000 on TerminAttr (localhost)\nNov 30 21:30:44 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user cvpsystem logged out [from: localhost] [service: TerminAttr]\nDec  1 12:11:18 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 203.128.16.219] [service: sshd] [reason: Authentication failed - Bad user]\nDec  1 12:11:26 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 203.128.16.219] [service: sshd] [reason: Authentication failed - Bad user]\nDec  2 13:49:51 kg-topology-CloudEosRR1 Aaa: %AAA-4-LOGIN_FAILED: user ubnt failed to login [from: 51.210.80.127] [service: sshd] [reason: Authentication failed - Bad user]\nDec  2 14:36:49 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:00 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:02 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:20 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 15:19:43 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 15:19:53 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 15:19:55 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 15:20:11 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:26 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:32 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:36 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:51 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:53 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:07:04 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 18:59:32 kg-topology-CloudEosRR1 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00032720016315579414, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/memory/test_memory.py::MemoryTests::test_memory_utilization_on_[kg-topology-CloudEosRR1]", "duration": 0.5371968999970704, "run_index": 49, "setup": {"name": "setup", "duration": 0.25857710000127554, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019714599940925837, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR1| memory utilization percent is |38.04471720237133%| and should be under |70%|\nTEST if memory utilization is less than specified value on  |kg-topology-CloudEosRR1|.\nGIVEN memory utilization is less than |70|.\nWHEN  memory utilization is |38.04471720237133|.\nTHEN test case result is |True|.\nOUTPUT of |show version| is:\n\nArista vEOS\nHardware version:    \nSerial number:       3075D517B750B3A4AE23DED82DFAF702\nSystem MAC address:  02df.de50.a8f9\n\nSoftware image version: 4.24.0FX-cloud\nArchitecture:           x86_64\nInternal build version: 4.24.0FX-cloud-16811629.4240FX\nInternal build ID:      4d308dc3-e34e-4c33-b790-7f443d4288fe\n\nUptime:                 7 weeks, 5 days, 2 hours and 50 minutes\nTotal memory:           7818736 kB\nFree memory:            2974208 kB\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00032810005359351635, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_is_synchronized_on_[kg-topology-CloudEosRR1]", "duration": 0.561895300168544, "run_index": 50, "setup": {"name": "setup", "duration": 0.26704640011303127, "outcome": "passed"}, "call": {"name": "call", "duration": 0.027392999967560172, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| NTP synchronised status is |synchronised|  correct status is |synchronised|.\n\nTEST is NTP synchronized on |kg-topology-CloudEosRR1|.\nGIVEN NTP synchronized is |synchronised|.\nWHEN NTP synchronized is |synchronised|.\nTHEN test case result is |True|.\nOUTPUT of |show ntp status| is:\nsynchronised to NTP server (169.254.169.123) at stratum 4\n   time correct to within 9 ms\n   polling server every 1024 s\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004094999749213457, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_associated_with_peers_on_[kg-topology-CloudEosRR1]", "duration": 0.5451979995705187, "run_index": 51, "setup": {"name": "setup", "duration": 0.2631676997989416, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01851979992352426, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| has |1| NTP peer associations, correct associations is |1|\nTEST is NTP associations with peers on |kg-topology-CloudEosRR1|.\nGIVEN associated are greater than or equal to |1|.\nWHEN NTP associated peers are |1|.\nTHEN test case result is |True|.\nOUTPUT of |show ntp associations| is:\n     remote          refid      st t when  poll reach   delay   offset  jitter\n==============================================================================\n*169.254.169.123 169.254.169.12  3 l   69   512  377    0.132   -0.022   0.055\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00034280004911124706, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_process_is_running_on_[kg-topology-CloudEosRR1]", "duration": 0.5665768003091216, "run_index": 52, "setup": {"name": "setup", "duration": 0.24082690011709929, "outcome": "passed"}, "call": {"name": "call", "duration": 0.08454399998299778, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| has 1 NTP processes,  correct processes is equal to or greater |1|.\n\nTEST is ntpd running on |kg-topology-CloudEosRR1|.\nGIVEN ntpd number is |1|.\nWHEN ntpd number is |1|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is:\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.18, 1.17, 1.18\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1928  102  3.4 ?        Sl     Oct 09 55-08:33:25 Sfe\n 1678  0.4  2.0 ?        Sl     Oct 09 05:14:56 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.12.101 -taillogs -grpcaddr=0.0.0.0:6042\n 5435  0.2  0.7 ?        SNl    Nov 25 00:23:30 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1231  0.1  0.9 ?        S      Oct 09 02:28:58 ProcMgr-worker\n 1545  0.1  7.1 ?        Sl     Oct 09 01:44:58 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:41 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    7  0.0  0.0 ?        S      Oct 09 00:01:19 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:01 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:11 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  345  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:2]\n  383  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  414  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  679  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  733  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  749  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  751  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:35 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  778  0.0  0.0 ?        Ss     Oct 09 00:00:15 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  849  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  868  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  986  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  988  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1001  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1005  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1016  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1021  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1022  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1053  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1177  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1178  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1211  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1214  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1216  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1230  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1403  0.0  0.0 ?        S      Oct 09 00:17:10 /usr/bin/EosOomAdjust\n 1411  0.0  0.0 ?        S      Oct 09 00:00:34 [rbfd_vrf_cleanu]\n 1426  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1463  0.0  0.0 ?        S      Oct 09 00:04:08 /usr/bin/SlabMonitor\n 1464  0.0  2.5 ?        S      Oct 09 00:57:15 Sysdb\n 1543  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1547  0.0  1.4 ?        S      Oct 09 00:02:42 Fru\n 1548  0.0  1.8 ?        S      Oct 09 00:01:00 Launcher\n 1712  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=275482372096,275482095106,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1713  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1715  0.0  1.2 ?        S      Oct 09 00:14:46 Lldp\n 1717  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=275539207066,275531172101,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1718  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1719  0.0  1.2 ?        S      Oct 09 00:05:14 McastCommon\n 1722  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=275630742842,275586496008,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1723  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1725  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=275697984092,275668336464,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1726  0.0  1.1 ?        S      Oct 09 00:03:13 PortSec\n 1727  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1729  0.0  1.3 ?        S      Oct 09 00:06:29 Bfd\n 1730  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=275798425594,275754087410,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1731  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1732  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.3 ?        S      Oct 09 00:27:54 Lag\n 1738  0.0  1.7 ?        S      Oct 09 00:55:09 SuperServer\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=279430842216,279242511590,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.4 ?        S      Oct 09 00:05:48 Ira\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=279643633598,279537036113,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1753  0.0  1.1 ?        S      Oct 09 00:04:37 LedPolicy\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=279769194613,279729578605,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1755  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1756  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=279994695436,279989742052,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1757  0.0  1.3 ?        S      Oct 09 00:12:01 EventMgr\n 1758  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1759  0.0  1.2 ?        S      Oct 09 00:41:30 StpTxRx\n 1760  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=283497454610,280155363384,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1761  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  1.1 ?        S      Oct 09 00:01:00 StandbyCpld\n 1764  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=283615375164,283615161637,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1765  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1766  0.0  1.0 ?        S      Oct 09 01:02:11 AgentMonitor\n 1767  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=283815717588,283815476170,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1768  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1769  0.0  1.2 ?        S      Oct 09 00:02:20 Tunnel\n 1770  0.0  1.5 ?        Sl     Oct 09 00:02:54 Aaa\n 1772  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=284200272970,284200028375,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1773  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1774  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=284441840621,284425363995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1775  0.0  1.2 ?        S      Oct 09 00:05:22 StpTopology\n 1776  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1777  0.0  1.3 ?        S      Oct 09 00:30:58 Acl\n 1780  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=288142997842,287926529966,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1781  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1782  0.0  1.1 ?        S      Oct 09 00:08:03 Stp\n 1783  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=288348042626,288306991250,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1784  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=288476386621,288476154232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1787  0.0  1.1 ?        S      Oct 09 00:02:52 KernelNetworkInfo\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1791  0.0  1.2 ?        S      Oct 09 00:05:17 McastCommon6\n 1792  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=288660551570,288660315029,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1793  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1794  0.0  1.2 ?        S      Oct 09 00:05:24 LacpTxAgent\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=292182880197,292182644203,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1798  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=292387136971,292386913377,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1799  0.0  1.4 ?        S      Oct 09 00:07:44 Arp\n 1801  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1802  0.0  1.3 ?        S      Oct 09 00:05:22 KernelFib\n 1803  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=292597182171,292545957912,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1804  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1805  0.0  1.2 ?        S      Oct 09 00:04:12 Qos\n 1808  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=293031182227,292789955533,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1811  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1813  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=296490028279,296489674232,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1814  0.0  1.1 ?        S      Oct 09 00:02:51 Thermostat\n 1816  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1818  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1820  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=296723998947,296723793865,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1821  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1823  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=296913137499,296912919995,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1824  0.0  1.1 ?        S      Oct 09 00:02:46 TopoAgent\n 1826  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1828  0.0  1.0 ?        S      Oct 09 00:01:01 PowerFuse\n 1830  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=297125141566,297124919716,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1832  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=300674037695,300668400686,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1835  0.0  1.1 ?        S      Oct 09 00:01:00 PowerManager\n 1838  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1842  0.0  1.3 ?        S      Oct 09 00:10:53 Ebra\n 1849  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=301136672884,300906411409,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1857  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1860  0.0  1.1 ?        S      Oct 09 00:01:00 ReloadCauseAgent\n 1861  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=301283236428,301260543814,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1866  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1867  0.0  1.5 ?        S      Oct 09 00:05:35 IgmpSnooping\n 1868  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1882  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=305461543441,305461133260,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1887  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1888  0.0  1.3 ?        S      Oct 09 00:02:52 StaticRoute\n 1891  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=305680427337,305680168169,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1896  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1897  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=305860331663,305860120352,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1898  0.0  1.6 ?        S      Oct 09 00:07:34 IpRib\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1904  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=309314764439,309314498787,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1905  0.0  1.9 ?        S      Oct 09 00:03:34 BgpCliHelper\n 1907  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1908  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=309483970353,309483752885,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1909  0.0  1.2 ?        S      Oct 09 00:05:39 ConnectedRoute\n 1912  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1913  0.0  2.2 ?        Sl     Oct 09 00:18:40 Bgp\n 1916  0.0  1.3 ?        S      Oct 09 00:03:30 RouteInput\n 1924  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=310187581898,309839049654,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1926  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2274  0.0  0.0 ?        Ssl    Oct 09 00:00:58 /usr/sbin/rsyslogd -n\n 2325  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2420  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=357235757262,357235513961,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2423  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2425  0.0  1.1 ?        S      Oct 09 00:01:05 LicenseManager\n 2617  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2618  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2619  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2623  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2626  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2617 /var/log/eos-console\n 2627  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2629  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2678  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=378052162806,378051926006,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2679  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2681  0.0  1.2 ?        S      Oct 09 00:17:27 Ipsec\n 2684  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2713  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2717  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3345  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3347  0.0  0.1 ?        Ssl    Oct 09 00:03:31 /usr/libexec/strongswan/charon --use-syslog\n 4607  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5742810699600,5742810359951,tbl://sysdb/+n,Sysdb (pid:1464) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4608  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4609  0.0  1.3 ?        Sl     Oct 09 00:01:07 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4653  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4655  0.0  0.1 ?        S      Oct 09 00:00:03 nginx: worker process                                              \n 5394  0.0  0.0 ?        S      Nov 25 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n20558  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n26853  0.0  0.0 ?        S    18:24:00 00:00:00 [kworker/0:1]\n28287  0.0  0.0 ?        S    18:45:00 00:00:00 [kworker/0:4]\n28668  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:2]\n29064  0.0  0.0 ?        S    18:57:00 00:00:00 [kworker/0:0]\n29256  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003790000919252634, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_ntp_configuration_on_[kg-topology-CloudEosRR1]", "duration": 0.981670199893415, "run_index": 53, "setup": {"name": "setup", "duration": 0.2385738999582827, "outcome": "passed"}, "call": {"name": "call", "duration": 0.5041187000460923, "outcome": "passed", "stdout": "|kg-topology-CloudEosRR1| has the ntp config |ntp server 169.254.169.123\n|, expect the ntp config |ntp server 169.254.169.123\n|.\n\n\nTEST |kg-topology-CloudEosRR1| NTP config.\nGIVEN NTP config |ntp server 169.254.169.123\n|.\nWHEN NTP config |ntp server 169.254.169.123\n|.\nTHEN test case result is |True|.\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00040369993075728416, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_servers_are_reachable_on_[kg-topology-CloudEosRR1]", "duration": 5.110797400353476, "run_index": 54, "setup": {"name": "setup", "duration": 0.25228710006922483, "outcome": "passed"}, "call": {"name": "call", "duration": 4.605722200125456, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f348a4820>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.242.29:443//command-api)), 'name': 'kg-topology-...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        ntp_servers = tops.test_parameters[\"ntp_servers\"]\n        ntp_vrf = tops.test_parameters[\"ntp_vrf\"]\n    \n        for ntp_server in ntp_servers:\n            if ntp_vrf:\n                show_cmd = f\"ping vrf {ntp_vrf} ip {ntp_server}\"\n            else:\n                show_cmd = f\"ping {ntp_server}\"\n    \n            tops.return_show_cmd(show_cmd)\n            tops.actual_output = 'bytes from' in tops.show_cmd_txt\n            tops.test_result = tops.actual_output is tops.expected_output\n    \n            tops.output_msg += (f\"\\nOn router |{tops.dut_name}|, verifying NTP \"\n                                f\"server reachability for |{ntp_server}| is \"\n                                f\"|{tops.test_result}|.\\n\")\n    \n            tops.comment += (f'TEST NTP servers are reachable on |{tops.dut_name}| '\n                             f'GIVEN server |{ntp_server}|.\\n'\n                             'WHEN exception is |bytes from| '\n                             'string.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n'\n                             f'OUTPUT of |{show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [False] == [True]\nE         At index 0 diff: False != True\nE         Full diff:\nE         - [True]\nE         + [False]\n\ntests/ntp/test_ntp.py:250: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005010000895708799, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::CrashTests::test_if_there_is_agents_have_crashed_on_[kg-topology-CloudEosRR1]", "duration": 0.8804150002542883, "run_index": 55, "setup": {"name": "setup", "duration": 0.2399630001746118, "outcome": "passed"}, "call": {"name": "call", "duration": 0.3999008000828326, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| has |0| agent crashes correct number of agent crashes is |0|.\n\nTEST number of agent crashes on |kg-topology-CloudEosRR1|.\nGIVEN |0| agent crashes.\nWHEN |0| agent crashes.\nTHEN test case result is |True|.\nOUTPUT of |show agent logs crash| is:\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005881998222321272, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/system/test_system.py::SystemTests::test_if_eos_version_is_correct_on_[kg-topology-CloudEosRR1]", "duration": 0.5164862000383437, "run_index": 56, "setup": {"name": "setup", "duration": 0.2485599999781698, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019039500039070845, "outcome": "failed", "longrepr": "self = <vane.bin.tests.system.test_system.SystemTests object at 0x7f6f348c8f10>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.242.29:443//command-api)), 'name': 'kg-topology-...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_eos_version_is_correct_on_(self, dut, tests_definitions):\n        \"\"\" Verifies EOS version running on the device\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        tops.actual_output = dut[\"output\"][tops.show_cmd][\"json\"][\"version\"]\n        tops.test_result = tops.actual_output == tops.expected_output\n    \n        tops.output_msg = (f\"On router |{tops.dut_name}| EOS version is \"\n                           f\"|{tops.actual_output}%|, version should be \"\n                           f\"|{tops.expected_output}%|\")\n        tops.comment = ('TEST EOS version running on the device on '\n                        f'|{tops.dut_name}|.\\n'\n                        f'GIVEN version is |{tops.expected_output}|.\\n'\n                        f'WHEN version is |{tops.actual_output}|.\\n'\n                        f'THEN test case result is |{tops.test_result}|.\\n'\n                        f'OUTPUT of |{tops.show_cmd}| is:\\n\\n{tops.show_cmd_txt}')\n    \n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.post_testcase()\n    \n>       assert tops.actual_output == tops.expected_output\nE       AssertionError: assert '4.24.0FX-cloud' == '4.23.1F-clou...eering build)'\nE         - 4.23.1F-cloud-16179785.jakartarel (engineering build)\nE         + 4.24.0FX-cloud\n\ntests/system/test_system.py:116: AssertionError", "stdout": "On router |kg-topology-CloudEosRR1| EOS version is |4.24.0FX-cloud%|, version should be |4.23.1F-cloud-16179785.jakartarel (engineering build)%|\nTEST EOS version running on the device on |kg-topology-CloudEosRR1|.\nGIVEN version is |4.23.1F-cloud-16179785.jakartarel (engineering build)|.\nWHEN version is |4.24.0FX-cloud|.\nTHEN test case result is |False|.\nOUTPUT of |show version| is:\n\nArista vEOS\nHardware version:    \nSerial number:       3075D517B750B3A4AE23DED82DFAF702\nSystem MAC address:  02df.de50.a8f9\n\nSoftware image version: 4.24.0FX-cloud\nArchitecture:           x86_64\nInternal build version: 4.24.0FX-cloud-16811629.4240FX\nInternal build ID:      4d308dc3-e34e-4c33-b790-7f443d4288fe\n\nUptime:                 7 weeks, 5 days, 2 hours and 50 minutes\nTotal memory:           7818736 kB\nFree memory:            2974208 kB\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00032670004293322563, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_sending_messages_on_[kg-topology-CloudEosRR1]", "duration": 0.4951405003666878, "run_index": 57, "setup": {"name": "setup", "duration": 0.24336530012078583, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008093500044196844, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| does not have TACACS servers configured\n"}, "teardown": {"name": "teardown", "duration": 0.00031640008091926575, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_receiving_messages_on_[kg-topology-CloudEosRR1]", "duration": 0.5008535999804735, "run_index": 58, "setup": {"name": "setup", "duration": 0.24655969999730587, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007439299952238798, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR1| does not have TACACS servers configured\n"}, "teardown": {"name": "teardown", "duration": 0.0002949000336229801, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/users/test_users.py::UsersTests::test_if_usernames_are_configured_on_[kg-topology-CloudEosRR1]", "duration": 0.4972033000085503, "run_index": 59, "setup": {"name": "setup", "duration": 0.23845589999109507, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019842799985781312, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR1|: |ec2-user| username configured is |True|, username configured should be |True|.\n\nOn router |kg-topology-CloudEosRR1|: |kgrozis| username configured is |True|, username configured should be |True|.\n\n\nTEST is ec2-user username configured on  |kg-topology-CloudEosRR1|.\nGIVEN username configured status: |True|.\nWHEN username configured status: |True|.\nTHEN test case result is |True|.\n\nTEST is kgrozis username configured on  |kg-topology-CloudEosRR1|.\nGIVEN username configured status: |True|.\nWHEN username configured status: |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show running-config section username| is :\n\nno username admin\n!\nusername ec2-user nopassword\nusername ec2-user ssh-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCW9oTsCjh4dXhU/8P7WwXmgYoJqHcHwPXkCYWklBGHpvgjUBAekGJSfwgM+KMX6e1dX/jKXroFSiRGzafQadO2U2UryY7+1gS90vZ7KRam73Kyy83Is1+ptpgrAvc/F2zIl8PGBQAw3smkkIg6SIT2Rs1L+w+9iYgl0UX/wBuf7pIIjOXDaFBM8QFLMFK0msSIcwPKydoWLFOWbDdn9XxPsiJ5CRJfk2MWAgrXCgb0+4NYgaGRCYM+UJqElSmIj5LhLOf5BJppYNFGCvkMl6wUuBjbpgElefBKOgJbx8prlRIebcSSlutQdxrfcqS/evdLpqr6z9I0CVrr+j1hK4ID kgrozis-east2\nusername kgrozis secret sha512 $6$v79HvPRjgAsoZgMx$oKhb5cP4jZRmSbW4d0AGyN.2yImvSEhdfo3YiLiVrtKWphCSxxtKj15r/Mkldk614h8e2nCYxOLO1siJ0wB7f.\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044870004057884216, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_if_zerotouch_is_disabled_on_[kg-topology-CloudEosRR1]", "duration": 0.5518312002532184, "run_index": 60, "setup": {"name": "setup", "duration": 0.26759480009786785, "outcome": "passed"}, "call": {"name": "call", "duration": 0.016317600151523948, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003239999059587717, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_for_zerotouch_config_file_on_[kg-topology-CloudEosRR1]", "duration": 0.4905603004153818, "run_index": 61, "setup": {"name": "setup", "duration": 0.23643140005879104, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017406900180503726, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00029060011729598045, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/test_pytest.py::PyTestTests::test_assert_true[kg-topology-CloudEosRR2]", "duration": 0.0027402997948229313, "run_index": 62, "setup": {"name": "setup", "duration": 0.0005767999682575464, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0012651998549699783, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003215000033378601, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_authentication_counters_are_incrementing_on_[kg-topology-CloudEosRR2]", "duration": 0.0008283003699034452, "run_index": 63, "setup": {"name": "setup", "duration": 0.0003282001707702875, "outcome": "skipped", "longrepr": "('/project/vane/bin/tests/aaa/test_aaa.py', 51, 'Skipped: No AAA setup on DUTs')"}, "teardown": {"name": "teardown", "duration": 0.00017190002836287022, "outcome": "passed"}, "outcome": "skipped"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_aaa_session_logging_is_working_on_[kg-topology-CloudEosRR2]", "duration": 0.4936736000236124, "run_index": 64, "setup": {"name": "setup", "duration": 0.24173350003547966, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00997409992851317, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| identified eAPi AAA session: |commandApi|\n"}, "teardown": {"name": "teardown", "duration": 0.00023250002413988113, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_commands_authorization_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.49698620033450425, "run_index": 65, "setup": {"name": "setup", "duration": 0.24394430010579526, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008790000109001994, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA authorization methods for fcommands: |['none']|\n"}, "teardown": {"name": "teardown", "duration": 0.0003076000139117241, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_authorization_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.5047482999507338, "run_index": 66, "setup": {"name": "setup", "duration": 0.24754479993134737, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009391600033268332, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA authorization methods for exec: |['none']|\n"}, "teardown": {"name": "teardown", "duration": 0.0002671000547707081, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_default_login_authentication_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.5206593000330031, "run_index": 67, "setup": {"name": "setup", "duration": 0.25543470005504787, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009548600064590573, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA authentication methods for default login: |['local']|\n"}, "teardown": {"name": "teardown", "duration": 0.00024129985831677914, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_login_authentication_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.4842851001303643, "run_index": 68, "setup": {"name": "setup", "duration": 0.23726730002090335, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009528399910777807, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00022210017777979374, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_authentication_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.49255710025317967, "run_index": 69, "setup": {"name": "setup", "duration": 0.24123620009049773, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009745200164616108, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA authentication methods for dot1x default: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.0003394999075680971, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_enable_authentication_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.505889100022614, "run_index": 70, "setup": {"name": "setup", "duration": 0.24787389999255538, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009877000004053116, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA authentication methods for enable default: |['local']|\n"}, "teardown": {"name": "teardown", "duration": 0.00026430003345012665, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_system_accounting_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.48287020018324256, "run_index": 71, "setup": {"name": "setup", "duration": 0.2367090000770986, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00917700002901256, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA accounting methods for default: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00027520000003278255, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_accounting_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.4890715000219643, "run_index": 72, "setup": {"name": "setup", "duration": 0.23940530000254512, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009822499938309193, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA accounting exec methods for console: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.0004384000785648823, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_priviledge_accounting_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.4938515000976622, "run_index": 73, "setup": {"name": "setup", "duration": 0.24207060015760362, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009485799819231033, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA accounting exec methods for console: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.00022449996322393417, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_accounting_methods_set_on_[kg-topology-CloudEosRR2]", "duration": 0.49044470046646893, "run_index": 74, "setup": {"name": "setup", "duration": 0.24020020011812449, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009545600041747093, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| AAA accounting exec methods for dot1x: |[]|\n"}, "teardown": {"name": "teardown", "duration": 0.000498700188472867, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_running_on_[kg-topology-CloudEosRR2]", "duration": 0.49710669997148216, "run_index": 75, "setup": {"name": "setup", "duration": 0.23881320003420115, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019132700050249696, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003475998528301716, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_port_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.5250801998190582, "run_index": 76, "setup": {"name": "setup", "duration": 0.2509669999126345, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02272040001116693, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004257999826222658, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_enabled_on_[kg-topology-CloudEosRR2]", "duration": 0.5996631002053618, "run_index": 77, "setup": {"name": "setup", "duration": 0.2883685000706464, "outcome": "passed"}, "call": {"name": "call", "duration": 0.022386300144717097, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0005397999193519354, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_http_api_server_is_running_on_[kg-topology-CloudEosRR2]", "duration": 0.554370099445805, "run_index": 78, "setup": {"name": "setup", "duration": 0.26608859980478883, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02169919991865754, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004936999175697565, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_local_http_api_server_is_running_on_[kg-topology-CloudEosRR2]", "duration": 0.5435283000115305, "run_index": 79, "setup": {"name": "setup", "duration": 0.2618503998965025, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019376200158149004, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004513000603765249, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_sec_cpu_utlization_on_[kg-topology-CloudEosRR2]", "duration": 0.9479002000298351, "run_index": 80, "setup": {"name": "setup", "duration": 0.39740030001848936, "outcome": "passed"}, "call": {"name": "call", "duration": 0.15139100002124906, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| 1 second CPU load average is |1.52%| and should be under |10%|\nTEST if 1 second CPU utilization is less than specified value on |kg-topology-CloudEosRR2|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.52|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.52, 1.50, 1.28\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1867  102  3.4 ?        Sl     Oct 09 55-09:31:15 Sfe\n 1699  0.4  2.0 ?        Sl     Oct 09 05:14:45 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.13.101 -taillogs -grpcaddr=0.0.0.0:6042\n22426  0.2  0.7 ?        SNl    Nov 30 00:08:10 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1220  0.1  0.9 ?        S      Oct 09 02:30:10 ProcMgr-worker\n 1569  0.1  7.1 ?        Sl     Oct 09 01:44:38 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:43 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    6  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:0]\n    7  0.0  0.0 ?        S      Oct 09 00:01:12 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:05 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:10 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  385  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  411  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  650  0.0  0.0 ?        S    18:39:00 00:00:00 [kworker/0:3]\n  704  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  736  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  750  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  754  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:34 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  783  0.0  0.0 ?        Ss     Oct 09 00:00:12 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  886  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  892  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  984  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  987  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n  998  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1006  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1008  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1020  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1023  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1051  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1117  0.0  0.0 ?        S    18:45:01 00:00:00 [kworker/0:4]\n 1166  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1167  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1200  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1203  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1205  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1219  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1430  0.0  0.0 ?        S      Oct 09 00:17:08 /usr/bin/EosOomAdjust\n 1438  0.0  0.0 ?        S      Oct 09 00:00:30 [rbfd_vrf_cleanu]\n 1453  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1490  0.0  0.0 ?        S      Oct 09 00:04:06 /usr/bin/SlabMonitor\n 1491  0.0  2.5 ?        S      Oct 09 00:57:14 Sysdb\n 1520  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:1]\n 1568  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1571  0.0  1.4 ?        S      Oct 09 00:02:41 Fru\n 1572  0.0  1.8 ?        S      Oct 09 00:00:59 Launcher\n 1688  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=267022308128,267022046453,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1690  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=267060701420,267060508537,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1691  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1693  0.0  1.2 ?        S      Oct 09 00:14:17 Lldp\n 1694  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=267110961213,267109664682,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1695  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1696  0.0  1.2 ?        S      Oct 09 00:05:16 McastCommon\n 1697  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1698  0.0  1.1 ?        S      Oct 09 00:03:23 PortSec\n 1714  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=267287943293,267201183478,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1715  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1717  0.0  1.3 ?        S      Oct 09 00:06:57 Bfd\n 1718  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1719  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=271081382312,270995105784,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1722  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1726  0.0  1.3 ?        S      Oct 09 00:28:15 Lag\n 1729  0.0  1.7 ?        S      Oct 09 00:54:25 SuperServer\n 1734  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=274988497901,271357642443,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1735  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.4 ?        S      Oct 09 00:05:23 Ira\n 1738  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=275250997605,275154076090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1740  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1741  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=275322741078,275313300522,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1742  0.0  1.1 ?        S      Oct 09 00:04:39 LedPolicy\n 1743  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1744  0.0  1.3 ?        S      Oct 09 00:12:00 EventMgr\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=275444901964,275402374762,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.2 ?        S      Oct 09 00:43:15 StpTxRx\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=275574357813,275495834090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1750  0.0  1.1 ?        S      Oct 09 00:01:02 StandbyCpld\n 1751  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=275690651150,275669274609,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1753  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=275828291876,275803253646,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1755  0.0  1.0 ?        S      Oct 09 01:02:34 AgentMonitor\n 1756  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1757  0.0  1.5 ?        Sl     Oct 09 00:02:41 Aaa\n 1758  0.0  1.2 ?        S      Oct 09 00:02:19 Tunnel\n 1759  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=279461268794,279461053568,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1761  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=279657298608,279657060623,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1762  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1764  0.0  1.2 ?        S      Oct 09 00:05:25 StpTopology\n 1765  0.0  1.3 ?        S      Oct 09 00:30:50 Acl\n 1766  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=279904248479,279849063698,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1767  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1768  0.0  1.1 ?        S      Oct 09 00:08:12 Stp\n 1769  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=280070978812,280040277887,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1770  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1772  0.0  1.1 ?        S      Oct 09 00:02:57 KernelNetworkInfo\n 1773  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=283496234961,283496022668,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1775  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1776  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=283670009272,283654033031,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1777  0.0  1.2 ?        S      Oct 09 00:04:37 McastCommon6\n 1779  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1780  0.0  1.2 ?        S      Oct 09 00:04:54 LacpTxAgent\n 1782  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=283962169714,283884454900,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1783  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  1.4 ?        S      Oct 09 00:07:36 Arp\n 1787  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=284368944078,284152030106,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1789  0.0  1.3 ?        S      Oct 09 00:05:28 KernelFib\n 1790  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=287951299826,287794979486,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1792  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1793  0.0  1.2 ?        S      Oct 09 00:04:13 Qos\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=288248865373,288063169954,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1799  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=288352399604,288352136405,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1801  0.0  1.1 ?        S      Oct 09 00:02:55 Thermostat\n 1803  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1804  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=288556229908,288555994956,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1806  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1809  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1810  0.0  1.1 ?        S      Oct 09 00:02:45 TopoAgent\n 1811  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=292069625737,292066417655,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1813  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1815  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=292307240803,292274815881,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1816  0.0  1.0 ?        S      Oct 09 00:00:57 PowerFuse\n 1817  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1819  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=292498169297,292497956396,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1822  0.0  1.1 ?        S      Oct 09 00:00:59 PowerManager\n 1823  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1826  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=292791615266,292746210228,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1827  0.0  1.3 ?        S      Oct 09 00:10:23 Ebra\n 1831  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=292974197331,292973964529,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1837  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1839  0.0  1.1 ?        S      Oct 09 00:00:59 ReloadCauseAgent\n 1840  0.0  1.5 ?        S      Oct 09 00:05:58 IgmpSnooping\n 1842  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1864  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=297106316632,297106081843,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1865  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1881  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=301046223259,301035905330,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1883  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1886  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=301197056671,301187894591,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1887  0.0  1.3 ?        S      Oct 09 00:02:51 StaticRoute\n 1889  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1890  0.0  1.6 ?        S      Oct 09 00:07:32 IpRib\n 1892  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=301382661484,301331080415,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1893  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1895  0.0  1.9 ?        S      Oct 09 00:03:31 BgpCliHelper\n 1896  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=301560922350,301533425877,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1905  0.0  1.2 ?        S      Oct 09 00:05:38 ConnectedRoute\n 1907  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=305119965463,304973045214,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1910  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1911  0.0  2.2 ?        Sl     Oct 09 00:16:28 Bgp\n 1913  0.0  1.3 ?        S      Oct 09 00:03:29 RouteInput\n 2038  0.0  0.0 ?        S    18:57:01 00:00:00 [kworker/0:0]\n 2276  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=348517528299,348517276781,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2279  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2282  0.0  1.1 ?        S      Oct 09 00:01:03 LicenseManager\n 2285  0.0  0.0 ?        Ssl    Oct 09 00:00:55 /usr/sbin/rsyslogd -n\n 2289  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n 2338  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2571  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2613  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2614  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2615  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2618  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2620  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console\n 2621  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2675  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=369420756030,369420505813,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2676  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2680  0.0  1.2 ?        S      Oct 09 00:15:37 Ipsec\n 2700  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2729  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2734  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3363  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3365  0.0  0.1 ?        Ssl    Oct 09 00:02:33 /usr/libexec/strongswan/charon --use-syslog\n 4661  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5957835036638,5957834774817,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4662  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4663  0.0  1.3 ?        Sl     Oct 09 00:01:09 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4707  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4709  0.0  0.1 ?        S      Oct 09 00:00:02 nginx: worker process                                              \n21905  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n22413  0.0  0.0 ?        S      Nov 30 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0017085999716073275, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_min_cpu_utlization_on_[kg-topology-CloudEosRR2]", "duration": 0.9226188997272402, "run_index": 81, "setup": {"name": "setup", "duration": 0.38384749996475875, "outcome": "passed"}, "call": {"name": "call", "duration": 0.1542526998091489, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| 1 minute CPU load average is |1.5%| and should be under |10%|\nTEST if 1 minute CPU utilization is less than specified value on |kg-topology-CloudEosRR2|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.5|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.52, 1.50, 1.28\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1867  102  3.4 ?        Sl     Oct 09 55-09:31:15 Sfe\n 1699  0.4  2.0 ?        Sl     Oct 09 05:14:45 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.13.101 -taillogs -grpcaddr=0.0.0.0:6042\n22426  0.2  0.7 ?        SNl    Nov 30 00:08:10 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1220  0.1  0.9 ?        S      Oct 09 02:30:10 ProcMgr-worker\n 1569  0.1  7.1 ?        Sl     Oct 09 01:44:38 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:43 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    6  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:0]\n    7  0.0  0.0 ?        S      Oct 09 00:01:12 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:05 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:10 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  385  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  411  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  650  0.0  0.0 ?        S    18:39:00 00:00:00 [kworker/0:3]\n  704  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  736  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  750  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  754  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:34 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  783  0.0  0.0 ?        Ss     Oct 09 00:00:12 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  886  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  892  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  984  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  987  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n  998  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1006  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1008  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1020  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1023  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1051  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1117  0.0  0.0 ?        S    18:45:01 00:00:00 [kworker/0:4]\n 1166  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1167  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1200  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1203  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1205  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1219  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1430  0.0  0.0 ?        S      Oct 09 00:17:08 /usr/bin/EosOomAdjust\n 1438  0.0  0.0 ?        S      Oct 09 00:00:30 [rbfd_vrf_cleanu]\n 1453  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1490  0.0  0.0 ?        S      Oct 09 00:04:06 /usr/bin/SlabMonitor\n 1491  0.0  2.5 ?        S      Oct 09 00:57:14 Sysdb\n 1520  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:1]\n 1568  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1571  0.0  1.4 ?        S      Oct 09 00:02:41 Fru\n 1572  0.0  1.8 ?        S      Oct 09 00:00:59 Launcher\n 1688  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=267022308128,267022046453,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1690  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=267060701420,267060508537,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1691  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1693  0.0  1.2 ?        S      Oct 09 00:14:17 Lldp\n 1694  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=267110961213,267109664682,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1695  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1696  0.0  1.2 ?        S      Oct 09 00:05:16 McastCommon\n 1697  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1698  0.0  1.1 ?        S      Oct 09 00:03:23 PortSec\n 1714  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=267287943293,267201183478,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1715  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1717  0.0  1.3 ?        S      Oct 09 00:06:57 Bfd\n 1718  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1719  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=271081382312,270995105784,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1722  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1726  0.0  1.3 ?        S      Oct 09 00:28:15 Lag\n 1729  0.0  1.7 ?        S      Oct 09 00:54:25 SuperServer\n 1734  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=274988497901,271357642443,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1735  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.4 ?        S      Oct 09 00:05:23 Ira\n 1738  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=275250997605,275154076090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1740  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1741  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=275322741078,275313300522,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1742  0.0  1.1 ?        S      Oct 09 00:04:39 LedPolicy\n 1743  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1744  0.0  1.3 ?        S      Oct 09 00:12:00 EventMgr\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=275444901964,275402374762,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.2 ?        S      Oct 09 00:43:15 StpTxRx\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=275574357813,275495834090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1750  0.0  1.1 ?        S      Oct 09 00:01:02 StandbyCpld\n 1751  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=275690651150,275669274609,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1753  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=275828291876,275803253646,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1755  0.0  1.0 ?        S      Oct 09 01:02:34 AgentMonitor\n 1756  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1757  0.0  1.5 ?        Sl     Oct 09 00:02:41 Aaa\n 1758  0.0  1.2 ?        S      Oct 09 00:02:19 Tunnel\n 1759  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=279461268794,279461053568,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1761  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=279657298608,279657060623,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1762  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1764  0.0  1.2 ?        S      Oct 09 00:05:25 StpTopology\n 1765  0.0  1.3 ?        S      Oct 09 00:30:50 Acl\n 1766  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=279904248479,279849063698,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1767  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1768  0.0  1.1 ?        S      Oct 09 00:08:12 Stp\n 1769  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=280070978812,280040277887,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1770  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1772  0.0  1.1 ?        S      Oct 09 00:02:57 KernelNetworkInfo\n 1773  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=283496234961,283496022668,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1775  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1776  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=283670009272,283654033031,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1777  0.0  1.2 ?        S      Oct 09 00:04:37 McastCommon6\n 1779  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1780  0.0  1.2 ?        S      Oct 09 00:04:54 LacpTxAgent\n 1782  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=283962169714,283884454900,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1783  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  1.4 ?        S      Oct 09 00:07:36 Arp\n 1787  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=284368944078,284152030106,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1789  0.0  1.3 ?        S      Oct 09 00:05:28 KernelFib\n 1790  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=287951299826,287794979486,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1792  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1793  0.0  1.2 ?        S      Oct 09 00:04:13 Qos\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=288248865373,288063169954,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1799  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=288352399604,288352136405,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1801  0.0  1.1 ?        S      Oct 09 00:02:55 Thermostat\n 1803  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1804  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=288556229908,288555994956,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1806  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1809  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1810  0.0  1.1 ?        S      Oct 09 00:02:45 TopoAgent\n 1811  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=292069625737,292066417655,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1813  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1815  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=292307240803,292274815881,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1816  0.0  1.0 ?        S      Oct 09 00:00:57 PowerFuse\n 1817  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1819  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=292498169297,292497956396,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1822  0.0  1.1 ?        S      Oct 09 00:00:59 PowerManager\n 1823  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1826  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=292791615266,292746210228,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1827  0.0  1.3 ?        S      Oct 09 00:10:23 Ebra\n 1831  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=292974197331,292973964529,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1837  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1839  0.0  1.1 ?        S      Oct 09 00:00:59 ReloadCauseAgent\n 1840  0.0  1.5 ?        S      Oct 09 00:05:58 IgmpSnooping\n 1842  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1864  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=297106316632,297106081843,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1865  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1881  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=301046223259,301035905330,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1883  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1886  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=301197056671,301187894591,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1887  0.0  1.3 ?        S      Oct 09 00:02:51 StaticRoute\n 1889  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1890  0.0  1.6 ?        S      Oct 09 00:07:32 IpRib\n 1892  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=301382661484,301331080415,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1893  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1895  0.0  1.9 ?        S      Oct 09 00:03:31 BgpCliHelper\n 1896  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=301560922350,301533425877,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1905  0.0  1.2 ?        S      Oct 09 00:05:38 ConnectedRoute\n 1907  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=305119965463,304973045214,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1910  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1911  0.0  2.2 ?        Sl     Oct 09 00:16:28 Bgp\n 1913  0.0  1.3 ?        S      Oct 09 00:03:29 RouteInput\n 2038  0.0  0.0 ?        S    18:57:01 00:00:00 [kworker/0:0]\n 2276  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=348517528299,348517276781,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2279  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2282  0.0  1.1 ?        S      Oct 09 00:01:03 LicenseManager\n 2285  0.0  0.0 ?        Ssl    Oct 09 00:00:55 /usr/sbin/rsyslogd -n\n 2289  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n 2338  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2571  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2613  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2614  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2615  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2618  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2620  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console\n 2621  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2675  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=369420756030,369420505813,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2676  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2680  0.0  1.2 ?        S      Oct 09 00:15:37 Ipsec\n 2700  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2729  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2734  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3363  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3365  0.0  0.1 ?        Ssl    Oct 09 00:02:33 /usr/libexec/strongswan/charon --use-syslog\n 4661  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5957835036638,5957834774817,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4662  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4663  0.0  1.3 ?        Sl     Oct 09 00:01:09 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4707  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4709  0.0  0.1 ?        S      Oct 09 00:00:02 nginx: worker process                                              \n21905  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n22413  0.0  0.0 ?        S      Nov 30 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0006711999885737896, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_5_min_cpu_utlization_on_[kg-topology-CloudEosRR2]", "duration": 0.6726015999447554, "run_index": 82, "setup": {"name": "setup", "duration": 0.2925698000472039, "outcome": "passed"}, "call": {"name": "call", "duration": 0.087171999970451, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| 5 minute CPU load average is |1.28%| and should be under |10%|\nTEST if 5 minute CPU utilization is less than specified value on |kg-topology-CloudEosRR2|.\nGIVEN CPU utilization is less than |10|.\nWHEN CPU utilization is |1.28|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is :\n\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.52, 1.50, 1.28\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1867  102  3.4 ?        Sl     Oct 09 55-09:31:15 Sfe\n 1699  0.4  2.0 ?        Sl     Oct 09 05:14:45 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.13.101 -taillogs -grpcaddr=0.0.0.0:6042\n22426  0.2  0.7 ?        SNl    Nov 30 00:08:10 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1220  0.1  0.9 ?        S      Oct 09 02:30:10 ProcMgr-worker\n 1569  0.1  7.1 ?        Sl     Oct 09 01:44:38 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:43 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    6  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:0]\n    7  0.0  0.0 ?        S      Oct 09 00:01:12 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:05 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:10 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  385  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  411  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  650  0.0  0.0 ?        S    18:39:00 00:00:00 [kworker/0:3]\n  704  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  736  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  750  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  754  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:34 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  783  0.0  0.0 ?        Ss     Oct 09 00:00:12 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  886  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  892  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  984  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  987  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n  998  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1006  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1008  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1020  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1023  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1051  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1117  0.0  0.0 ?        S    18:45:01 00:00:00 [kworker/0:4]\n 1166  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1167  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1200  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1203  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1205  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1219  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1430  0.0  0.0 ?        S      Oct 09 00:17:08 /usr/bin/EosOomAdjust\n 1438  0.0  0.0 ?        S      Oct 09 00:00:30 [rbfd_vrf_cleanu]\n 1453  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1490  0.0  0.0 ?        S      Oct 09 00:04:06 /usr/bin/SlabMonitor\n 1491  0.0  2.5 ?        S      Oct 09 00:57:14 Sysdb\n 1520  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:1]\n 1568  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1571  0.0  1.4 ?        S      Oct 09 00:02:41 Fru\n 1572  0.0  1.8 ?        S      Oct 09 00:00:59 Launcher\n 1688  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=267022308128,267022046453,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1690  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=267060701420,267060508537,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1691  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1693  0.0  1.2 ?        S      Oct 09 00:14:17 Lldp\n 1694  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=267110961213,267109664682,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1695  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1696  0.0  1.2 ?        S      Oct 09 00:05:16 McastCommon\n 1697  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1698  0.0  1.1 ?        S      Oct 09 00:03:23 PortSec\n 1714  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=267287943293,267201183478,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1715  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1717  0.0  1.3 ?        S      Oct 09 00:06:57 Bfd\n 1718  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1719  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=271081382312,270995105784,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1722  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1726  0.0  1.3 ?        S      Oct 09 00:28:15 Lag\n 1729  0.0  1.7 ?        S      Oct 09 00:54:25 SuperServer\n 1734  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=274988497901,271357642443,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1735  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.4 ?        S      Oct 09 00:05:23 Ira\n 1738  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=275250997605,275154076090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1740  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1741  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=275322741078,275313300522,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1742  0.0  1.1 ?        S      Oct 09 00:04:39 LedPolicy\n 1743  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1744  0.0  1.3 ?        S      Oct 09 00:12:00 EventMgr\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=275444901964,275402374762,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.2 ?        S      Oct 09 00:43:15 StpTxRx\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=275574357813,275495834090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1750  0.0  1.1 ?        S      Oct 09 00:01:02 StandbyCpld\n 1751  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=275690651150,275669274609,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1753  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=275828291876,275803253646,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1755  0.0  1.0 ?        S      Oct 09 01:02:34 AgentMonitor\n 1756  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1757  0.0  1.5 ?        Sl     Oct 09 00:02:41 Aaa\n 1758  0.0  1.2 ?        S      Oct 09 00:02:19 Tunnel\n 1759  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=279461268794,279461053568,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1761  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=279657298608,279657060623,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1762  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1764  0.0  1.2 ?        S      Oct 09 00:05:25 StpTopology\n 1765  0.0  1.3 ?        S      Oct 09 00:30:50 Acl\n 1766  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=279904248479,279849063698,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1767  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1768  0.0  1.1 ?        S      Oct 09 00:08:12 Stp\n 1769  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=280070978812,280040277887,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1770  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1772  0.0  1.1 ?        S      Oct 09 00:02:57 KernelNetworkInfo\n 1773  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=283496234961,283496022668,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1775  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1776  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=283670009272,283654033031,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1777  0.0  1.2 ?        S      Oct 09 00:04:37 McastCommon6\n 1779  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1780  0.0  1.2 ?        S      Oct 09 00:04:54 LacpTxAgent\n 1782  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=283962169714,283884454900,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1783  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  1.4 ?        S      Oct 09 00:07:36 Arp\n 1787  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=284368944078,284152030106,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1789  0.0  1.3 ?        S      Oct 09 00:05:28 KernelFib\n 1790  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=287951299826,287794979486,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1792  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1793  0.0  1.2 ?        S      Oct 09 00:04:13 Qos\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=288248865373,288063169954,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1799  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=288352399604,288352136405,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1801  0.0  1.1 ?        S      Oct 09 00:02:55 Thermostat\n 1803  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1804  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=288556229908,288555994956,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1806  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1809  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1810  0.0  1.1 ?        S      Oct 09 00:02:45 TopoAgent\n 1811  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=292069625737,292066417655,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1813  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1815  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=292307240803,292274815881,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1816  0.0  1.0 ?        S      Oct 09 00:00:57 PowerFuse\n 1817  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1819  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=292498169297,292497956396,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1822  0.0  1.1 ?        S      Oct 09 00:00:59 PowerManager\n 1823  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1826  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=292791615266,292746210228,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1827  0.0  1.3 ?        S      Oct 09 00:10:23 Ebra\n 1831  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=292974197331,292973964529,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1837  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1839  0.0  1.1 ?        S      Oct 09 00:00:59 ReloadCauseAgent\n 1840  0.0  1.5 ?        S      Oct 09 00:05:58 IgmpSnooping\n 1842  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1864  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=297106316632,297106081843,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1865  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1881  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=301046223259,301035905330,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1883  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1886  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=301197056671,301187894591,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1887  0.0  1.3 ?        S      Oct 09 00:02:51 StaticRoute\n 1889  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1890  0.0  1.6 ?        S      Oct 09 00:07:32 IpRib\n 1892  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=301382661484,301331080415,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1893  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1895  0.0  1.9 ?        S      Oct 09 00:03:31 BgpCliHelper\n 1896  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=301560922350,301533425877,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1905  0.0  1.2 ?        S      Oct 09 00:05:38 ConnectedRoute\n 1907  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=305119965463,304973045214,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1910  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1911  0.0  2.2 ?        Sl     Oct 09 00:16:28 Bgp\n 1913  0.0  1.3 ?        S      Oct 09 00:03:29 RouteInput\n 2038  0.0  0.0 ?        S    18:57:01 00:00:00 [kworker/0:0]\n 2276  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=348517528299,348517276781,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2279  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2282  0.0  1.1 ?        S      Oct 09 00:01:03 LicenseManager\n 2285  0.0  0.0 ?        Ssl    Oct 09 00:00:55 /usr/sbin/rsyslogd -n\n 2289  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n 2338  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2571  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2613  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2614  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2615  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2618  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2620  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console\n 2621  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2675  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=369420756030,369420505813,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2676  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2680  0.0  1.2 ?        S      Oct 09 00:15:37 Ipsec\n 2700  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2729  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2734  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3363  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3365  0.0  0.1 ?        Ssl    Oct 09 00:02:33 /usr/libexec/strongswan/charon --use-syslog\n 4661  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5957835036638,5957834774817,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4662  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4663  0.0  1.3 ?        Sl     Oct 09 00:01:09 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4707  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4709  0.0  0.1 ?        S      Oct 09 00:00:02 nginx: worker process                                              \n21905  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n22413  0.0  0.0 ?        S      Nov 30 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002899998798966408, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_running_on_[kg-topology-CloudEosRR2]", "duration": 0.5346862999722362, "run_index": 83, "setup": {"name": "setup", "duration": 0.25863440008834004, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017155399778857827, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|, daemon running state is |True| correct state is |True|.\n\nTEST is TerminAttr daemon running on |kg-topology-CloudEosRR2|.\nGIVEN expected TerminAttr running state: |True|.\nWHEN TerminAttr device running state is |True|.\nTHEN test case result is |True|.\nOUTPUT of |show daemon| is :\n\nProcess: TerminAttr (running with PID 1699)\nUptime: 54 days, 2:49:03 (Start time: Fri Oct 09 16:10:29 2020)\nNo configuration options stored.\n\nNo status data stored.\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00026210001669824123, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_enabled_on_[kg-topology-CloudEosRR2]", "duration": 0.5001460998319089, "run_index": 84, "setup": {"name": "setup", "duration": 0.2410650998353958, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017636300064623356, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|, daemon enabled state is |True| correct state is |True|.\n\nTEST is TerminAttr daemon enabled on |kg-topology-CloudEosRR2|.\nGIVEN expected TerminAttr enabled state: |True|.\nWHEN TerminAttr device enabled state is |True|.\nTHEN test case result is |True|.\nOUTPUT of |show daemon| is :\n\nProcess: TerminAttr (running with PID 1699)\nUptime: 54 days, 2:49:03 (Start time: Fri Oct 09 16:10:29 2020)\nNo configuration options stored.\n\nNo status data stored.\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003796000964939594, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_resolves_on_[kg-topology-CloudEosRR2]", "duration": 1.803766499971971, "run_index": 85, "setup": {"name": "setup", "duration": 0.27398950001224875, "outcome": "passed"}, "call": {"name": "call", "duration": 1.2551606998313218, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|, DNS resolution is|True| for google.com.\n\nOn router |kg-topology-CloudEosRR2|, DNS resolution is|True| for cnn.com.\n\nOn router |kg-topology-CloudEosRR2|, DNS resolution is|True| for arista.com.\n\nTEST can |kg-topology-CloudEosRR2| resolve |google.com|.\nGIVEN URL is |google.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping google.com| is :\n\nPING google.com (172.217.4.206) 72(100) bytes of data.\n76 bytes from lga15s48-in-f206.1e100.net (172.217.4.206): icmp_seq=1 ttl=100 (truncated)\n76 bytes from lga15s48-in-f206.1e100.net (172.217.4.206): icmp_seq=2 ttl=100 (truncated)\n76 bytes from lga15s48-in-f206.1e100.net (172.217.4.206): icmp_seq=3 ttl=100 (truncated)\n76 bytes from lga15s48-in-f206.1e100.net (172.217.4.206): icmp_seq=4 ttl=100 (truncated)\n76 bytes from lga15s48-in-f206.1e100.net (172.217.4.206): icmp_seq=5 ttl=100 (truncated)\n\n--- google.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 61ms\nrtt min/avg/max/mdev = 16.564/16.713/17.093/0.242 ms, pipe 2, ipg/ewma 15.280/16.638 ms\n.\nTEST can |kg-topology-CloudEosRR2| resolve |cnn.com|.\nGIVEN URL is |cnn.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping cnn.com| is :\n\nPING cnn.com (151.101.65.67) 72(100) bytes of data.\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=1 ttl=39 time=10.5 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=2 ttl=39 time=10.5 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=3 ttl=39 time=10.5 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=4 ttl=39 time=10.5 ms\n80 bytes from 151.101.65.67 (151.101.65.67): icmp_seq=5 ttl=39 time=10.5 ms\n\n--- cnn.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 60ms\nrtt min/avg/max/mdev = 10.560/10.572/10.579/0.065 ms, pipe 2, ipg/ewma 15.182/10.575 ms\n.\nTEST can |kg-topology-CloudEosRR2| resolve |arista.com|.\nGIVEN URL is |arista.com|.\nWHEN exception is |Name or service not known| string.\nTHEN test case result is |True|.\nOUTPUT of |ping arista.com| is :\n\nPING arista.com (64.68.200.46) 72(100) bytes of data.\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=1 ttl=39 time=22.7 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=2 ttl=39 time=22.7 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=3 ttl=39 time=22.9 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=4 ttl=39 time=22.8 ms\n80 bytes from url-fwd.easydns.com (64.68.200.46): icmp_seq=5 ttl=39 time=22.7 ms\n\n--- arista.com ping statistics ---\n5 packets transmitted, 5 received, 0% packet loss, time 216ms\nrtt min/avg/max/mdev = 22.743/22.830/22.991/0.088 ms, pipe 3, ipg/ewma 54.058/22.813 ms\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0006268001161515713, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_servers_are_reachable_on_[kg-topology-CloudEosRR2]", "duration": 5.101826999802142, "run_index": 86, "setup": {"name": "setup", "duration": 0.26019910001195967, "outcome": "passed"}, "call": {"name": "call", "duration": 4.58080599992536, "outcome": "failed", "longrepr": "self = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f34926a60>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.23.123.34:443//command-api)), 'name': 'kg-topology-C...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        dns_servers = tops.test_parameters[\"dns_servers\"]\n        dns_vrf = tops.test_parameters[\"dns_vrf\"]\n    \n        for dns_server in dns_servers:\n            if dns_vrf:\n                show_cmd = f\"ping vrf {dns_vrf} ip {dns_server}\"\n            else:\n                show_cmd = f\"ping {dns_server}\"\n    \n            tops.return_show_cmd(show_cmd)\n            tops.actual_output = 'bytes from' in tops.show_cmd_txt\n            tops.test_result = tops.actual_output is tops.expected_output\n    \n            tops.output_msg += (f\"\\nOn router |{tops.dut_name}|, verifying NTP \"\n                                f\"server reachability for |{dns_server}| is \"\n                                f\"|{tops.test_result}|.\\n\")\n    \n            tops.comment += (f'TEST NTP servers are reachable on |{tops.dut_name}| '\n                             f'GIVEN server |{dns_server}|.\\n'\n                             'WHEN exception is |bytes from| '\n                             'string.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n'\n                             f'OUTPUT of |{show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [False] == [True]\nE         At index 0 diff: False != True\nE         Full diff:\nE         - [True]\nE         + [False]\n\ntests/dns/test_dns.py:131: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006227998528629541, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_dns_configuration_on_[kg-topology-CloudEosRR2]", "duration": 0.9759951997548342, "run_index": 87, "setup": {"name": "setup", "duration": 0.26708589983172715, "outcome": "passed"}, "call": {"name": "call", "duration": 0.4412563000805676, "outcome": "passed", "stdout": "|kg-topology-CloudEosRR2| has the dns config |ip name-server vrf default 11.201.12.2\n|, expect the dns config |ip name-server vrf default 11.201.12.2\n|.\n\n\nTEST |kg-topology-CloudEosRR2| DNS config.\nGIVEN DNS config |ip name-server vrf default 11.201.12.2\n|.\nWHEN DNS config |ip name-server vrf default 11.201.12.2\n|.\nTHEN test case result is |True|.\n\nOUTPUT of |show running-config section name-server| is :\n\nip name-server vrf default 11.201.12.2\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005671000108122826, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_temp_is_in_spec_on_[kg-topology-CloudEosRR2]", "duration": 0.5238043002318591, "run_index": 88, "setup": {"name": "setup", "duration": 0.2528174000326544, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017694800160825253, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00047470000572502613, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_sensors_temp_is_in_spec_on_[kg-topology-CloudEosRR2]", "duration": 0.51819509989582, "run_index": 89, "setup": {"name": "setup", "duration": 0.24950499995611608, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0187239998485893, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00046110013499855995, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_power_are_in_spec_on_[kg-topology-CloudEosRR2]", "duration": 0.526548300171271, "run_index": 90, "setup": {"name": "setup", "duration": 0.2542008999735117, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017861200030893087, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt have power-supplies.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt have power-supplies.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0002853001933544874, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_cooling_is_in_spec_on_[kg-topology-CloudEosRR2]", "duration": 0.5285349001642317, "run_index": 91, "setup": {"name": "setup", "duration": 0.2552044000476599, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017855799989774823, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require cooling.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00027030007913708687, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_fan_status_is_in_spec_on_[kg-topology-CloudEosRR2]", "duration": 0.5341406997758895, "run_index": 92, "setup": {"name": "setup", "duration": 0.2572124998550862, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019298800034448504, "outcome": "passed", "stdout": "INVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require fans.\n\nINVALID TEST: CloudEOS router |kg-topology-CloudEosRR2| doesnt require fans.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041690003126859665, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_installed_on_[kg-topology-CloudEosRR2]", "duration": 0.5357642997987568, "run_index": 93, "setup": {"name": "setup", "duration": 0.2573193998541683, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02069639996625483, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| extension |awslogs.swix| status is |installed|, correct status is |installed|.\n\nOn router |kg-topology-CloudEosRR2| extension |awsha.rpm| status is |installed|, correct status is |installed|.\n\nTEST is awslogs.swix extension installed on  |kg-topology-CloudEosRR2|.\nGIVEN awslogs.swix extenstion installation state is |installed|.\nWHEN awslogs.swix extenstion installation state is |installed|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\nTEST is awsha.rpm extension installed on  |kg-topology-CloudEosRR2|.\nGIVEN awsha.rpm extenstion installation state is |installed|.\nWHEN awsha.rpm extenstion installation state is |installed|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00042910012416541576, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_erroring_on_[kg-topology-CloudEosRR2]", "duration": 0.5316843998152763, "run_index": 94, "setup": {"name": "setup", "duration": 0.2555776999797672, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020191899966448545, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| extension |awslogs.swix| error status is |False|, correct error status is |False|.\n\nOn router |kg-topology-CloudEosRR2| extension |awsha.rpm| error status is |False|, correct error status is |False|.\n\nTEST is awslogs.swix extension not erroring on  |kg-topology-CloudEosRR2|.\nGIVEN awslogs.swix extenstion error state is |False|.\nWHEN awslogs.swix extenstion error state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\nTEST is awsha.rpm extension not erroring on  |kg-topology-CloudEosRR2|.\nGIVEN awsha.rpm extenstion error state is |False|.\nWHEN awsha.rpm extenstion error state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show extensions| is:\nName              Version/Release      Status      Extension\n----------------- -------------------- ----------- ---------\nawsha.rpm         0.1.1/1              A, I        1        \nawslogs.swix      1.4.0/1.el7          A, I        1        \n\n\nA: available | NA: not available | I: installed | NI: not installed | F: forced\nS: valid signature | NS: invalid signature\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.000337099889293313, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/filesystem/test_filesystem.py::FileSystemTests::test_if_files_on_[kg-topology-CloudEosRR2]", "duration": 1.1970122999045998, "run_index": 95, "setup": {"name": "setup", "duration": 0.2545815999619663, "outcome": "passed"}, "call": {"name": "call", "duration": 0.6873455999884754, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|: flash:startup-config file isDir state is |False|, correct state is |False|.\n\nOn router |kg-topology-CloudEosRR2|: flash:veos-config file isDir state is |False|, correct state is |False|.\n\nOn router |kg-topology-CloudEosRR2|: flash:zerotouch-config file isDir state is |False|, correct state is |False|.\n\nTEST is flash:startup-config file present on |kg-topology-CloudEosRR2|.\nGIVEN flash:startup-config file isDir state is: |False|.\nWHEN flash:startup-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:startup-config| is :\n\n[{'output': 'flash:/startup-config:\\n  type is file\\n'}].\nTEST is flash:veos-config file present on |kg-topology-CloudEosRR2|.\nGIVEN flash:veos-config file isDir state is: |False|.\nWHEN flash:veos-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:veos-config| is :\n\n[{'output': 'flash:/veos-config:\\n  type is file\\n'}].\nTEST is flash:zerotouch-config file present on |kg-topology-CloudEosRR2|.\nGIVEN flash:zerotouch-config file isDir state is: |False|.\nWHEN flash:zerotouch-config file isDir state is |False|.\nTHEN test case result is |True|.\nOUTPUT of |show file information flash:zerotouch-config| is :\n\n[{'output': 'flash:/zerotouch-config:\\n  type is file\\n'}].\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005034999921917915, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/host/test_host.py::HostTests::test_if_hostname_is_correcet_on_[kg-topology-CloudEosRR2]", "duration": 0.5285663001704961, "run_index": 96, "setup": {"name": "setup", "duration": 0.25478600012138486, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018555199960246682, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR2| the configured hostname is |kg-topology-CloudEosRR2| and the correct hostname is |kg-topology-CloudEosRR2|\nTEST is hostname correct.\nGIVEN hostname |kg-topology-CloudEosRR2|.\nWHEN hostname is |kg-topology-CloudEosRR2|.\nTHEN test case result is |True|.\nOUTPUT of |show hostname| is :\n\nHostname: kg-topology-CloudEosRR2\nFQDN:     kg-topology-CloudEosRR2\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004390999674797058, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_protocol_status_is_connected_on_[kg-topology-CloudEosRR2]", "duration": 0.5688801002688706, "run_index": 97, "setup": {"name": "setup", "duration": 0.27498570014722645, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018465799978002906, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface link line protocol status is set to: |up|, correct state is |up|.\n\n\nTEST if interface |Ethernet1| link prootocol statuses on |kg-topology-CloudEosRR2|.\nGIVEN interface status is |up|.\nWHEN interface status is |up|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces status| is :\n\nPort       Name   Status       Vlan     Duplex Speed  Type         Flags Encapsulation\nEt1               connected    routed   full   unconf 10/100/1000                     \nEt100             connected    routed   full   10G    10/100/1000                     \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004428999964147806, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_link_status_is_connected_on_[kg-topology-CloudEosRR2]", "duration": 0.550729199545458, "run_index": 98, "setup": {"name": "setup", "duration": 0.26616199989803135, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018084599869325757, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface link  status is set to: |connected|, correct state is |connected|.\n\n\nTEST if interface |Ethernet1| link status on |kg-topology-CloudEosRR2|.\nGIVEN interface status is |connected|.\nWHEN interface status is |connected|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces status| is :\n\nPort       Name   Status       Vlan     Duplex Speed  Type         Flags Encapsulation\nEt1               connected    routed   full   unconf 10/100/1000                     \nEt100             connected    routed   full   10G    10/100/1000                     \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00032059988006949425, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfacePhyTests::test_if_intf_phy_status_connected_on_[kg-topology-CloudEosRR2]", "duration": 0.5079772998578846, "run_index": 99, "setup": {"name": "setup", "duration": 0.24431729991920292, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018850599881261587, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0004921001382172108, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_if_interface_errors_on_[kg-topology-CloudEosRR2]", "duration": 0.5358236997853965, "run_index": 100, "setup": {"name": "setup", "duration": 0.2542830999009311, "outcome": "passed"}, "call": {"name": "call", "duration": 0.026844599982723594, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface Rx errors is |0|, correct Rx errors is |0|.\n\nOn interface |Ethernet1|: interface Giant Frames is |0|, correct Giant Frames is |0|.\n\nOn interface |Ethernet1|: interface Tx Errors is |0|, correct Tx Errors is |0|.\n\nOn interface |Ethernet1|: interface Runt Frames is |0|, correct Runt Frames is |0|.\n\nOn interface |Ethernet1|: interface FCS Errors is |0|, correct FCS Errors is |0|.\n\nOn interface |Ethernet1|: interface Alignment Errors is |0|, correct Alignment Errors is |0|.\n\n\nTEST if interface |Ethernet1| Rx Errors is correct.\nGIVEN Rx errors is |0|.\nWHEN Rx errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Giant Frames is correct.\nGIVEN Giant Frames is |0|.\nWHEN Giant Frames is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Tx Errors is correct.\nGIVEN Tx Errors is |0|.\nWHEN Tx Errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Runt Frames is correct.\nGIVEN Runt Frames is |0|.\nWHEN Runt Frames is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| FCS Errors is correct.\nGIVEN FCS Errors is |0|.\nWHEN FCS Errors is |0|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| Alignment Errors is correct.\nGIVEN Alignment Errors is |0|.\nWHEN Alignment Errors is |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1ae9.e132 (bia 06aa.1ae9.e132)\n  Internet address is 11.201.13.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 42 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.2 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.3 kbps (- with framing overhead), 25 packets/sec\n     103429537 packets input, 12815542510 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115870877 packets output, 21563591063 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1af7.287f (bia 06aa.1af7.287f)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 40 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.4/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 5 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.104/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 48 minutes, 57 seconds\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00041290000081062317, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_interface_utilization_on_[kg-topology-CloudEosRR2]", "duration": 0.5075000002980232, "run_index": 101, "setup": {"name": "setup", "duration": 0.24025850021280348, "outcome": "passed"}, "call": {"name": "call", "duration": 0.026579200057312846, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: input bandwidth utilization is |0.0002216134231916129%|, bandwidth utilization should be less than |70%|.\n\nOn interface |Ethernet1|: output bandwidth utilization is |0.0003732821222804667%|, bandwidth utilization should be less than |70%|.\n\n\nTEST if interface |Ethernet1| input bw utilization is correct.\nGIVEN bw utilization is |70|.\nWHEN bw utilization is |0.0002216134231916129|.\nTHEN test case result is |True|.\n\nTEST if interface |Ethernet1| output bw utilization is correct.\nGIVEN bw utilization is |70|.\nWHEN bw utilization is |0.0003732821222804667|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1ae9.e132 (bia 06aa.1ae9.e132)\n  Internet address is 11.201.13.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 42 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.2 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.3 kbps (- with framing overhead), 25 packets/sec\n     103429537 packets input, 12815542510 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115870877 packets output, 21563591063 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1af7.287f (bia 06aa.1af7.287f)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 40 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.4/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 5 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.104/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 48 minutes, 57 seconds\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004037998151034117, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_out_counters_are_discarding_on_[kg-topology-CloudEosRR2]", "duration": 0.5646509001962841, "run_index": 102, "setup": {"name": "setup", "duration": 0.27223190013319254, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019875400001183152, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface counter discards has |0| outDiscards, correct state is |0|.\n\n\nTEST if interface |Ethernet1| counters has outbound discards on |kg-topology-CloudEosRR2|.\nGIVEN interface outbound discards are |0|\nWHEN interface outbound discards are |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces counters discards| is :\n\nPort               InDiscards    OutDiscards \n--------------- ---------------- ----------- \nEt1                         0              0 \nEt100                       0              0 \n---------           ---------      --------- \nTotals                      0              0 \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003116999287158251, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_in_counters_are_discarding_on_[kg-topology-CloudEosRR2]", "duration": 0.5502329003065825, "run_index": 103, "setup": {"name": "setup", "duration": 0.2655937001109123, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018737100064754486, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface counter discards has |0| inDiscards, correct state is |0|.\n\n\nTEST if interface |Ethernet1| counters has inbound discards on |kg-topology-CloudEosRR2|.\nGIVEN interface inbound discards are |0|.\nWHEN interface inbound discards are |0|.\nTHEN test case result is |True|.\n\nOUTPUT of |show interfaces counters discards| is :\n\nPort               InDiscards    OutDiscards \n--------------- ---------------- ----------- \nEt1                         0              0 \nEt100                       0              0 \n---------           ---------      --------- \nTotals                      0              0 \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003084000200033188, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/interface/test_interface.py::InterfaceMtuTests::test_if_intf_mtu_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.5596954000648111, "run_index": 104, "setup": {"name": "setup", "duration": 0.26738970004953444, "outcome": "passed"}, "call": {"name": "call", "duration": 0.024434200022369623, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceMtuTests object at 0x7f6f34874f40>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.23.123.34:443//command-api)), 'name': 'kg-topology-C...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_mtu_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        print(f\"\\nOn router |{tops.dut_name}|:\")\n    \n        for interface in tops.interface_list:\n            interface_name = interface['interface_name'].replace(\" \", \"\")\n            int_ptr = dut[\"output\"][tops.show_cmd]['json']['interfaces']\n            tops.actual_output = int_ptr[interface_name]['mtu']\n            tops.test_result = tops.actual_output == tops.expected_output\n    \n            tops.output_msg += (f\"On interface |{interface_name}|: interface \"\n                                f\"MTU is |{tops.actual_output}|, correct MTU is \"\n                                f\"|{tops.expected_output}|.\\n\\n\")\n            tops.comment += (f'TEST if interface |{interface_name}| MTU is correct '\n                             f'on |{tops.dut_name}|.\\n'\n                             f'GIVEN MTU of |{tops.expected_output}|.\\n'\n                             f'WHEN interface MTU is |{tops.actual_output}|.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.comment += (f'OUTPUT of |{tops.show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [1500] == [10178]\nE         At index 0 diff: 1500 != 10178\nE         Full diff:\nE         - [10178]\nE         + [1500]\n\ntests/interface/test_interface.py:605: AssertionError", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface MTU is |1500|, correct MTU is |10178|.\n\n\nTEST if interface |Ethernet1| MTU is correct on |kg-topology-CloudEosRR2|.\nGIVEN MTU of |10178|.\nWHEN interface MTU is |1500|.\nTHEN test case result is |False|.\n\nOUTPUT of |show interfaces| is :\n\nEthernet1 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1ae9.e132 (bia 06aa.1ae9.e132)\n  Internet address is 11.201.13.101/24\n  Broadcast address is 255.255.255.255\n  Address determined by DHCP\n  IP MTU 1500 bytes (default)\n  Full-duplex, Unconfigured, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 42 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 22.2 kbps (- with framing overhead), 22 packets/sec\n  5 minutes output rate 37.3 kbps (- with framing overhead), 25 packets/sec\n     103429537 packets input, 12815542510 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     115870877 packets output, 21563591063 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nEthernet100 is up, line protocol is up (connected)\n  Hardware is Ethernet, address is 06aa.1af7.287f (bia 06aa.1af7.287f)\n  Internet address is 11.201.8.1/22\n  Broadcast address is 255.255.255.255\n  IP MTU 1400 bytes , BW 10000000 kbit\n  Full-duplex, 10Gb/s, auto negotiation: off, uni-link: n/a\n  Up 54 days, 2 hours, 48 minutes, 40 seconds\n  Loopback Mode : None\n  3 link status changes since last clear\n  Last clearing of \"show interface\" counters never\n  5 minutes input rate 0 bps (0.0% with framing overhead), 0 packets/sec\n  5 minutes output rate 0 bps (0.0% with framing overhead), 0 packets/sec\n     0 packets input, 0 bytes\n     Received 0 broadcasts, 0 multicast\n     0 runts, 0 giants\n     0 input errors, 0 CRC, 0 alignment, 0 symbol, 0 input discards\n     0 PAUSE input\n     0 packets output, 0 bytes\n     Sent 0 broadcasts, 0 multicast\n     0 output errors, 0 collisions\n     0 late collision, 0 deferred, 0 output discards\n     0 PAUSE output\nLoopback0 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 11.201.0.4/32\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 46 minutes, 5 seconds\nLoopback10 is up, line protocol is up (connected)\n  Hardware is Loopback\n  Internet address is 198.18.0.104/24\n  Broadcast address is 255.255.255.255\n  IP MTU 65535 bytes (default)\n  Up 54 days, 2 hours, 48 minutes, 57 seconds\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00048179994337260723, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_rx_is_enabled_on_[kg-topology-CloudEosRR2]", "duration": 0.5240450999699533, "run_index": 105, "setup": {"name": "setup", "duration": 0.25243000010959804, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018894099863246083, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface LLDPrxEnabled is in state |True|, correct LLDP rxEnabled state is |True|\nTEST if interface |Ethernet1| LLDP receive is enabled on |kg-topology-CloudEosRR2|.\nGIVEN LLDP receive state is |True|.\nWHEN LLDP receive state is |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp| is :\n\nLLDP transmit interval      : 30 seconds\nLLDP transmit holdtime      : 120 seconds\nLLDP reinitialization delay : 2 seconds\nLLDP Management Address VRF : default\n\nEnabled optional TLVs:\n  Port Description\n  System Name\n  System Description\n  System Capabilities\n  Management Address (best)\n  IEEE802.1 Port VLAN ID\n  IEEE802.3 Link Aggregation\n  IEEE802.3 Maximum Frame Size\n  IEEE802.3 Power Via MDI\n  LLDP-MED Capabilities\n  LLDP-MED Network Policy\n\nPort           Tx Enabled    Rx Enabled \n----------- ---------------- ---------- \nEt1            Yes           Yes        \nEt100          Yes           Yes        \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00029099988751113415, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_tx_is_enabled_on_[kg-topology-CloudEosRR2]", "duration": 0.4966365003492683, "run_index": 106, "setup": {"name": "setup", "duration": 0.2390056001022458, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018135600024834275, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: interface LLDPtxEnabled is in state |True|, correct LLDP txEnabled state is |True|.\n\n\nTEST if interface |Ethernet1| LLDP receive is enabled on |kg-topology-CloudEosRR2|.\nGIVEN LLDP receive state is |True|.\nWHEN LLDP receive state is |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp| is :\n\nLLDP transmit interval      : 30 seconds\nLLDP transmit holdtime      : 120 seconds\nLLDP reinitialization delay : 2 seconds\nLLDP Management Address VRF : default\n\nEnabled optional TLVs:\n  Port Description\n  System Name\n  System Description\n  System Capabilities\n  Management Address (best)\n  IEEE802.1 Port VLAN ID\n  IEEE802.3 Link Aggregation\n  IEEE802.3 Maximum Frame Size\n  IEEE802.3 Power Via MDI\n  LLDP-MED Capabilities\n  LLDP-MED Network Policy\n\nPort           Tx Enabled    Rx Enabled \n----------- ---------------- ---------- \nEt1            Yes           Yes        \nEt100          Yes           Yes        \n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004897001199424267, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_system_name_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.5312054997775704, "run_index": 107, "setup": {"name": "setup", "duration": 0.2570024998858571, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01696899998933077, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR2|: the LLDP local-info system name is |kg-topology-CloudEosRR2|, correct name is |kg-topology-CloudEosRR2|.\n\n\nTEST if lldp system name matches hostname on dut kg-topology-CloudEosRR2.\nGIVEN hostname is |kg-topology-CloudEosRR2|.\nWHEN LLDP system name is |kg-topology-CloudEosRR2|.\nTHEN test case result is |True|.\nOUTPUT of |show lldp local-info| is:\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00023150001652538776, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_max_frame_size_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.514269300037995, "run_index": 108, "setup": {"name": "setup", "duration": 0.24848280008882284, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01675669988617301, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f348738b0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.23.123.34:443//command-api)), 'name': 'kg-topology-C...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_max_frame_size_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info maxFrameSize is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        print(f\"\\nOn router |{tops.dut_name}|:\")\n    \n        for interface in tops.interface_list:\n            interface_name = interface['interface_name'].replace(\" \", \"\")\n            int_ptr = dut[\"output\"][tops.show_cmd][\"json\"]['localInterfaceInfo']\n            tops.actual_output = int_ptr[interface_name]['maxFrameSize']\n    \n            tops.output_msg += (f\"On interface |{interface_name}|: LLDP local-info \"\n                                f\"maxFrameSize is |{tops.actual_output}|, correct \"\n                                f\"maxFrameSize is |{tops.expected_output}|.\\n\\n\")\n            tops.test_result = tops.actual_output == tops.expected_output\n    \n            tops.comment += (f'TEST if |{tops.dut_name}| LLDP maxFrameSize is correct '\n                             f'on interface |{interface_name}|.\\n'\n                             f'GIVEN LLDP maxFrameSize is |{tops.expected_output}|.\\n'\n                             f'WHEN LLDP maxFrameSize is |{tops.actual_output}|.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.comment += (f'OUTPUT of |{tops.show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [9236] == [10200]\nE         At index 0 diff: 9236 != 10200\nE         Full diff:\nE         - [10200]\nE         + [9236]\n\ntests/lldp/test_lldp.py:203: AssertionError", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: LLDP local-info maxFrameSize is |9236|, correct maxFrameSize is |10200|.\n\n\nTEST if |kg-topology-CloudEosRR2| LLDP maxFrameSize is correct on interface |Ethernet1|.\nGIVEN LLDP maxFrameSize is |10200|.\nWHEN LLDP maxFrameSize is |9236|.\nTHEN test case result is |False|.\n\nOUTPUT of |show lldp local-info| is :\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005469999741762877, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_interface_id_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.5478305998258293, "run_index": 109, "setup": {"name": "setup", "duration": 0.26473679998889565, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01794189983047545, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nOn interface |Ethernet1|: LLDP local-info interfaceIdType is |interfaceName|, correct interfaceIdType is |interfaceName|.\n\n\n\nTEST if kg-topology-CloudEosRR2 LLDP interfaceIdType is correct on interface |Ethernet1|.\nGIVEN LLDP interfaceIdType is |interfaceName|.\nWHEN LLDP interfaceIdType is |interfaceName|.\nTHEN test case result is |True|.\n\nOUTPUT of |show lldp local-info| is :\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004151000175625086, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/log/test_logging.py::LoggingTests::test_if_log_messages_appear_on_[kg-topology-CloudEosRR2]", "duration": 0.5713391997851431, "run_index": 110, "setup": {"name": "setup", "duration": 0.2564788998570293, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0580309999641031, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2|:\nTest for log message critical, message should not be present.\nTest for log message warning, message should not be present.\nTest for log message ECC, message should not be present.\nTest for log message servers errors, message should not be present.\nTest for log message parity, message should not be present.\n\nTest for log message |critical| on |kg-topology-CloudEosRR2|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |warning| on |kg-topology-CloudEosRR2|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |ECC| on |kg-topology-CloudEosRR2|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |servers errors| on |kg-topology-CloudEosRR2|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nTest for log message |parity| on |kg-topology-CloudEosRR2|.\nGIVEN message presence is |False|.\nWHEN message presence is |False|.\nTHEN test case result is |True|.\n\nOUTPUT of |show logging| is :\n\nSyslog logging: enabled\n    Buffer logging: level debugging\n    Console logging: level errors\n    Persistent logging: disabled\n    Monitor logging: level errors\n    Synchronous logging: disabled\n    Trap logging: level informational\n    Sequence numbers: disabled\n    Syslog facility: local4\n    Hostname format: Hostname only\n    Repeat logging interval: disabled\n    Repeat messages: disabled\n\nFacility                   Severity            Effective Severity\n--------------------       -------------       ------------------\naaa                        debugging           debugging    \naccounting                 debugging           debugging    \nacl                        debugging           debugging    \nagent                      debugging           debugging    \nale                        debugging           debugging    \narp                        debugging           debugging    \nbfd                        debugging           debugging    \nbgp                        debugging           debugging    \nbmp                        debugging           debugging    \ncapacity                   debugging           debugging    \ncapi                       debugging           debugging    \nclear                      debugging           debugging    \ncvx                        debugging           debugging    \ndataplane                  debugging           debugging    \ndhcp                       debugging           debugging    \ndot1x                      debugging           debugging    \ndscp                       debugging           debugging    \nenvmon                     debugging           debugging    \neth                        debugging           debugging    \neventmon                   debugging           debugging    \nextension                  debugging           debugging    \nfhrp                       debugging           debugging    \nflow                       debugging           debugging    \nforwarding                 debugging           debugging    \nfru                        debugging           debugging    \nfwk                        debugging           debugging    \ngmp                        debugging           debugging    \nhardware                   debugging           debugging    \nhealth                     debugging           debugging    \nhttpservice                debugging           debugging    \nigmp                       debugging           debugging    \nigmpsnooping               debugging           debugging    \nint                        debugging           debugging    \nintf                       debugging           debugging    \nip6routing                 debugging           debugging    \niprib                      debugging           debugging    \nira                        debugging           debugging    \nisis                       debugging           debugging    \nkernelfib                  debugging           debugging    \nlacp                       debugging           debugging    \nlag                        debugging           debugging    \nlauncher                   debugging           debugging    \nldp                        debugging           debugging    \nlicense                    debugging           debugging    \nlineproto                  debugging           debugging    \nlldp                       debugging           debugging    \nloadbalancer               debugging           debugging    \nlogmgr                     debugging           debugging    \nloopback                   debugging           debugging    \nloopprotect                debugging           debugging    \nmapreducemonitor           debugging           debugging    \nmcs                        debugging           debugging    \nmirroring                  debugging           debugging    \nmka                        debugging           debugging    \nmlag                       debugging           debugging    \nmldsnooping                debugging           debugging    \nmmode                      debugging           debugging    \nmroute                     debugging           debugging    \nmrp                        debugging           debugging    \nmsdp                       debugging           debugging    \nmsrp                       debugging           debugging    \nmsspolicymonitor           debugging           debugging    \nmvrp                       debugging           debugging    \nnat                        debugging           debugging    \nopenconfig                 debugging           debugging    \nopenflow                   debugging           debugging    \nospf                       debugging           debugging    \nospf3                      debugging           debugging    \npackage                    debugging           debugging    \npfc                        debugging           debugging    \npimbsr                     debugging           debugging    \nportsecurity               debugging           debugging    \nptp                        debugging           debugging    \npwrmgmt                    debugging           debugging    \nqos                        debugging           debugging    \nqueuemonitor               debugging           debugging    \nradius                     debugging           debugging    \nredundancy                 debugging           debugging    \nrib                        debugging           debugging    \nrouting                    debugging           debugging    \nsecurity                   debugging           debugging    \nservermonitor              debugging           debugging    \nspantree                   debugging           debugging    \nsso                        debugging           debugging    \nstagemgr                   debugging           debugging    \nsys                        debugging           debugging    \nsysdb                      debugging           debugging    \ntapagg                     debugging           debugging    \ntcp                        debugging           debugging    \ntransceiver                debugging           debugging    \ntunnel                     debugging           debugging    \ntunnelintf                 debugging           debugging    \nvmtracersess               debugging           debugging    \nvmwarevi                   debugging           debugging    \nvmwarevs                   debugging           debugging    \nvrf                        debugging           debugging    \nvrrp                       debugging           debugging    \nvxlan                      debugging           debugging    \nxmpp                       debugging           debugging    \nztp                        debugging           debugging    \n\nLog Buffer:\nNov 29 12:28:11 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user ubnt failed to login [from: 51.75.144.43] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 03:04:43 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 208.180.246.109] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 03:04:52 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 208.180.246.109] [service: sshd] [reason: Authentication failed - Bad user]\nNov 30 21:30:40 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user cvpsystem logged in [from: localhost] [service: TerminAttr]\nNov 30 21:30:40 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user cvpsystem logged out [from: localhost] [service: TerminAttr]\nNov 30 21:30:40 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user cvpsystem logged in [from: localhost] [service: TerminAttr]\nNov 30 21:30:41 kg-topology-CloudEosRR2 ConfigAgent: %SYS-5-CONFIG_SESSION_ENTERED: User cvpsystem entered configuration session capiVerify-1569-4ba464c4335311eb8885020000000000 on TerminAttr (localhost)\nNov 30 21:30:41 kg-topology-CloudEosRR2 ConfigAgent: %SYS-5-CONFIG_SESSION_EXITED: User cvpsystem exited configuration session capiVerify-1569-4ba464c4335311eb8885020000000000 on TerminAttr (localhost)\nNov 30 21:30:41 kg-topology-CloudEosRR2 ConfigAgent: %SYS-5-CONFIG_SESSION_ABORTED: User cvpsystem aborted configuration session capiVerify-1569-4ba464c4335311eb8885020000000000 on TerminAttr (localhost)\nNov 30 21:30:42 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user cvpsystem logged out [from: localhost] [service: TerminAttr]\nDec  1 09:26:36 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 191.5.99.145] [service: sshd] [reason: Authentication failed - Bad user]\nDec  1 09:26:43 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user admin failed to login [from: 191.5.99.145] [service: sshd] [reason: Authentication failed - Bad user]\nDec  1 18:37:47 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user ubnt failed to login [from: 193.218.118.235] [service: sshd] [reason: Authentication failed - Bad user]\nDec  2 11:20:45 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user ubnt failed to login [from: 185.220.102.254] [service: sshd] [reason: Authentication failed - Bad user]\nDec  2 14:36:49 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:00 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:11 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:16 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:17 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 14:37:28 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 15:19:43 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 15:19:53 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 15:20:02 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 15:20:19 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:26 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:06:32 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:07:07 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:07:21 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 16:07:24 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\nDec  2 16:07:35 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGOUT: user kgrozis logged out [from: 173.79.124.35] [service: command-api]\nDec  2 18:42:16 kg-topology-CloudEosRR2 Aaa: %AAA-4-LOGIN_FAILED: user ubnt failed to login [from: 185.220.102.251] [service: sshd] [reason: Authentication failed - Bad user]\nDec  2 18:59:32 kg-topology-CloudEosRR2 Aaa: %AAA-5-LOGIN: user kgrozis logged in [from: 173.79.124.35] [service: command-api]\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003504001069813967, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/memory/test_memory.py::MemoryTests::test_memory_utilization_on_[kg-topology-CloudEosRR2]", "duration": 0.605397499864921, "run_index": 111, "setup": {"name": "setup", "duration": 0.292953799944371, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019082600018009543, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR2| memory utilization percent is |38.2001387436537%| and should be under |70%|\nTEST if memory utilization is less than specified value on  |kg-topology-CloudEosRR2|.\nGIVEN memory utilization is less than |70|.\nWHEN  memory utilization is |38.2001387436537|.\nTHEN test case result is |True|.\nOUTPUT of |show version| is:\n\nArista vEOS\nHardware version:    \nSerial number:       5AF63C12E54F39466CB6E9CC07325A44\nSystem MAC address:  06aa.1af7.287f\n\nSoftware image version: 4.24.0FX-cloud\nArchitecture:           x86_64\nInternal build version: 4.24.0FX-cloud-16811629.4240FX\nInternal build ID:      4d308dc3-e34e-4c33-b790-7f443d4288fe\n\nUptime:                 7 weeks, 5 days, 2 hours and 50 minutes\nTotal memory:           7818736 kB\nFree memory:            2986484 kB\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.0004072999581694603, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_is_synchronized_on_[kg-topology-CloudEosRR2]", "duration": 0.5341403996571898, "run_index": 112, "setup": {"name": "setup", "duration": 0.2578829999547452, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01803679997101426, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| NTP synchronised status is |synchronised|  correct status is |synchronised|.\n\nTEST is NTP synchronized on |kg-topology-CloudEosRR2|.\nGIVEN NTP synchronized is |synchronised|.\nWHEN NTP synchronized is |synchronised|.\nTHEN test case result is |True|.\nOUTPUT of |show ntp status| is:\nsynchronised to NTP server (169.254.169.123) at stratum 4\n   time correct to within 25 ms\n   polling server every 1024 s\n\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0003375997766852379, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_associated_with_peers_on_[kg-topology-CloudEosRR2]", "duration": 0.5318744999822229, "run_index": 113, "setup": {"name": "setup", "duration": 0.2571634000632912, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01728000002913177, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| has |1| NTP peer associations, correct associations is |1|\nTEST is NTP associations with peers on |kg-topology-CloudEosRR2|.\nGIVEN associated are greater than or equal to |1|.\nWHEN NTP associated peers are |1|.\nTHEN test case result is |True|.\nOUTPUT of |show ntp associations| is:\n     remote          refid      st t when  poll reach   delay   offset  jitter\n==============================================================================\n*169.254.169.123 169.254.169.12  3 l  581  1024  377    0.103    0.111   0.049\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00026769982650876045, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_process_is_running_on_[kg-topology-CloudEosRR2]", "duration": 0.8069445996079594, "run_index": 114, "setup": {"name": "setup", "duration": 0.350017299875617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10646969988010824, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| has 1 NTP processes,  correct processes is equal to or greater |1|.\n\nTEST is ntpd running on |kg-topology-CloudEosRR2|.\nGIVEN ntpd number is |1|.\nWHEN ntpd number is |1|.\nTHEN test case result is |True|.\nOUTPUT of |show processes| is:\n 18:59:33 up 54 days,  2:50,  0 users,  load average: 1.52, 1.50, 1.28\n  PID %CPU %MEM TT       STAT  STARTED     TIME CMD\n 1867  102  3.4 ?        Sl     Oct 09 55-09:31:15 Sfe\n 1699  0.4  2.0 ?        Sl     Oct 09 05:14:45 /usr/bin/TerminAttr -cvaddr=apiserver.arista.io:443 -cvcompression=gzip -cvauth=token-secure,/tmp/token -smashexcludes=ale,flexCounter,hardware,kni,pulse,strata-ingestexclude=/Sysdb/cell/1/agent,/Sysdb/cell/2/agent -cvvrf=default -cvsourceip=11.201.13.101 -taillogs -grpcaddr=0.0.0.0:6042\n22426  0.2  0.7 ?        SNl    Nov 30 00:08:10 python2.7 /var/awslogs/bin/aws logs push --config-file /mnt/flash/awslogs/awslogs.conf --additional-configs-dir /mnt/flash/awslogs/config\n 1220  0.1  0.9 ?        S      Oct 09 02:30:10 ProcMgr-worker\n 1569  0.1  7.1 ?        Sl     Oct 09 01:44:38 ConfigAgent\n    1  0.0  0.0 ?        Ss     Oct 09 00:07:34 /sbin/init\n    2  0.0  0.0 ?        S      Oct 09 00:00:00 [kthreadd]\n    3  0.0  0.0 ?        S      Oct 09 00:00:43 [ksoftirqd/0]\n    5  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:0H]\n    6  0.0  0.0 ?        S      Oct 09 00:00:02 [kworker/u8:0]\n    7  0.0  0.0 ?        S      Oct 09 00:01:12 [rcu_preempt]\n    8  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_sched]\n    9  0.0  0.0 ?        S      Oct 09 00:00:00 [rcu_bh]\n   10  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/0]\n   11  0.0  0.0 ?        S<     Oct 09 00:00:00 [lru-add-drain]\n   12  0.0  0.0 ?        S      Oct 09 00:00:02 [watchdog/0]\n   13  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/0]\n   14  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/1]\n   15  0.0  0.0 ?        S      Oct 09 00:00:05 [watchdog/1]\n   16  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/1]\n   17  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/1]\n   18  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:0]\n   19  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:0H]\n   20  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/2]\n   21  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/2]\n   22  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/2]\n   23  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/2]\n   24  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/2:0]\n   25  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/2:0H]\n   26  0.0  0.0 ?        S      Oct 09 00:00:00 [cpuhp/3]\n   27  0.0  0.0 ?        S      Oct 09 00:00:00 [watchdog/3]\n   28  0.0  0.0 ?        S      Oct 09 00:00:00 [migration/3]\n   29  0.0  0.0 ?        S      Oct 09 00:00:00 [ksoftirqd/3]\n   30  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/3:0]\n   31  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/3:0H]\n   32  0.0  0.0 ?        S      Oct 09 00:00:00 [kdevtmpfs]\n   33  0.0  0.0 ?        S<     Oct 09 00:00:00 [netns]\n   34  0.0  0.0 ?        S      Oct 09 00:00:00 [khungtaskd]\n   35  0.0  0.0 ?        S      Oct 09 00:02:10 [khungtaskd2]\n   36  0.0  0.0 ?        S      Oct 09 00:00:00 [oom_reaper]\n   37  0.0  0.0 ?        S<     Oct 09 00:00:00 [writeback]\n   38  0.0  0.0 ?        S      Oct 09 00:00:00 [kcompactd0]\n   39  0.0  0.0 ?        S<     Oct 09 00:00:00 [crypto]\n   40  0.0  0.0 ?        S<     Oct 09 00:00:00 [kintegrityd]\n   41  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   42  0.0  0.0 ?        S<     Oct 09 00:00:00 [kblockd]\n   43  0.0  0.0 ?        S<     Oct 09 00:00:00 [ata_sff]\n   44  0.0  0.0 ?        S<     Oct 09 00:00:00 [edac-poller]\n   45  0.0  0.0 ?        S      Oct 09 00:00:00 [dst_gc_task]\n   46  0.0  0.0 ?        S<     Oct 09 00:00:00 [watchdogd]\n   47  0.0  0.0 ?        S      Oct 09 00:00:00 [arp_cache-prd]\n   49  0.0  0.0 ?        S      Oct 09 00:00:00 [icmp_unreachabl]\n   50  0.0  0.0 ?        S<     Oct 09 00:00:00 [rpciod]\n   51  0.0  0.0 ?        S<     Oct 09 00:00:00 [xprtiod]\n   52  0.0  0.0 ?        S      Oct 09 00:00:00 [kswapd0]\n   53  0.0  0.0 ?        S<     Oct 09 00:00:00 [vmstat]\n   54  0.0  0.0 ?        S<     Oct 09 00:00:00 [nfsiod]\n   63  0.0  0.0 ?        S<     Oct 09 00:00:00 [pcielwd]\n   64  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   65  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   66  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   67  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   68  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   69  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   70  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   71  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n   72  0.0  0.0 ?        S<     Oct 09 00:00:00 [nvme]\n   74  0.0  0.0 ?        S      Oct 09 00:00:00 [ndisc_cache-prd]\n   75  0.0  0.0 ?        S<     Oct 09 00:00:00 [ipv6_addrconf]\n   76  0.0  0.0 ?        S<     Oct 09 00:00:00 [ecc_log_wq]\n  124  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  125  0.0  0.0 ?        S<     Oct 09 00:00:00 [bioset]\n  171  0.0  0.0 ?        S      Oct 09 00:00:00 [jbd2/nvme0n1p1-]\n  172  0.0  0.0 ?        S<     Oct 09 00:00:00 [ext4-rsv-conver]\n  247  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/0:1H]\n  272  0.0  0.0 ?        S<     Oct 09 00:00:00 [loop0]\n  385  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/lib/systemd/systemd-udevd\n  411  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/lvmetad -f\n  506  0.0  0.0 ?        S<     Oct 09 00:00:00 [ena]\n  650  0.0  0.0 ?        S    18:39:00 00:00:00 [kworker/0:3]\n  704  0.0  0.0 ?        S      Oct 09 00:00:00 [kworker/1:1]\n  736  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/mcelog --ignorenodev --daemon --foreground\n  750  0.0  0.0 ?        Ss     Oct 09 00:01:31 /usr/bin/ProcMonitor\n  754  0.0  0.0 ?        Ss     Oct 09 00:02:09 /usr/lib/systemd/systemd-logind\n  755  0.0  0.1 ?        Ss     Oct 09 00:04:34 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation\n  783  0.0  0.0 ?        Ss     Oct 09 00:00:12 /usr/sbin/xinetd -stayalive -pidfile /var/run/xinetd.pid\n  886  0.0  0.0 ?        Ss     Oct 09 00:00:25 /usr/sbin/crond -n\n  892  0.0  0.0 ?        S<s    Oct 09 00:00:35 /usr/bin/wdogdev -t 60\n  984  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/local.new . && mv /mnt/flash/persist/local.new /mnt/flash/persist/local || logger -t SetupPersist Failed to update /mnt/flash/persist/local --daemon --logfile=/var/log/inotifyrun-local.log --pidfile=/var/run/inotifyrun-local.pid /persist/local\n  987  0.0  0.0 pts/0    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n  998  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/bin/SaveFossil --dedup --compress --priority Sysdb --maxFiles 1000 /var/tmp/Fossil /mnt/flash/Fossil\n 1006  0.0  0.0 ?        S      Oct 09 00:00:04 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/sys.new . && mv /mnt/flash/persist/sys.new /mnt/flash/persist/sys || logger -t SetupPersist Failed to update /mnt/flash/persist/sys --daemon --logfile=/var/log/inotifyrun-sys.log --pidfile=/var/run/inotifyrun-sys.pid /persist/sys\n 1008  0.0  0.0 pts/1    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1020  0.0  0.0 ?        S      Oct 09 00:00:00 python /usr/bin/inotifyrun -c pax -x sv4cpio -O -w -f /mnt/flash/persist/secure.new . && sync && ( mv /mnt/flash/persist/secure /mnt/flash/persist/secure.old; mv /mnt/flash/persist/secure.new /mnt/flash/persist/secure; sync ) && ( scrub --no-signature /mnt/flash/persist/secure.old; rm /mnt/flash/persist/secure.old ) || logger -t SetupPersist Failed to update /mnt/flash/persist/secure --daemon --logfile=/var/log/inotifyrun-secure.log --pidfile=/var/run/inotifyrun-secure.pid /persist/secure\n 1023  0.0  0.0 pts/2    Ss+    Oct 09 00:00:00 inotifywait -m -r -e modify -e create -e delete -e attrib -e move .\n 1051  0.0  0.0 ?        Ss     Oct 09 00:00:00 /bin/bash /usr/sbin/core_annotate_util daemon\n 1117  0.0  0.0 ?        S    18:45:01 00:00:00 [kworker/0:4]\n 1166  0.0  0.1 ?        S      Oct 09 00:00:00 python /bin/immortalize --daemonize --log=/var/log/agents/ConnMgr --logappend --logpidsuffix --maxcredits=5 --cost=1 --immortalizepidfile=/var/run/ImmortalizeConnMgr.pid /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1167  0.0  0.1 ?        S      Oct 09 00:00:00 /usr/bin/ConnMgr -p /var/run/ConnMgr.pid\n 1200  0.0  0.0 ?        S      Oct 09 00:00:00 inotifywait -e modify /var/lib/rpm\n 1203  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-watcher  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1205  0.0  0.3 ?        S      Oct 09 00:00:00 netnsd-server   -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1219  0.0  0.9 ?        S      Oct 09 00:00:00 ProcMgr-master\n 1430  0.0  0.0 ?        S      Oct 09 00:17:08 /usr/bin/EosOomAdjust\n 1438  0.0  0.0 ?        S      Oct 09 00:00:30 [rbfd_vrf_cleanu]\n 1453  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/sbin/acpid\n 1490  0.0  0.0 ?        S      Oct 09 00:04:06 /usr/bin/SlabMonitor\n 1491  0.0  2.5 ?        S      Oct 09 00:57:14 Sysdb\n 1520  0.0  0.0 ?        S    18:51:00 00:00:00 [kworker/0:1]\n 1568  0.0  1.2 ?        S      Oct 09 00:01:10 StageMgr\n 1571  0.0  1.4 ?        S      Oct 09 00:02:41 Fru\n 1572  0.0  1.8 ?        S      Oct 09 00:00:59 Launcher\n 1688  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lldp --demuxerOpts=267022308128,267022046453,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lldp\n 1690  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon --demuxerOpts=267060701420,267060508537,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon\n 1691  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1693  0.0  1.2 ?        S      Oct 09 00:14:17 Lldp\n 1694  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PortSec --demuxerOpts=267110961213,267109664682,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PortSec\n 1695  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1696  0.0  1.2 ?        S      Oct 09 00:05:16 McastCommon\n 1697  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1698  0.0  1.1 ?        S      Oct 09 00:03:23 PortSec\n 1714  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Bfd --demuxerOpts=267287943293,267201183478,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Bfd\n 1715  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1717  0.0  1.3 ?        S      Oct 09 00:06:57 Bfd\n 1718  0.0  0.0 ?        S<     Oct 09 00:00:00 [kworker/1:1H]\n 1719  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Lag --demuxerOpts=271081382312,270995105784,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Lag\n 1722  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1726  0.0  1.3 ?        S      Oct 09 00:28:15 Lag\n 1729  0.0  1.7 ?        S      Oct 09 00:54:25 SuperServer\n 1734  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ira --demuxerOpts=274988497901,271357642443,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ira\n 1735  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1736  0.0  1.4 ?        S      Oct 09 00:05:23 Ira\n 1738  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LedPolicy --demuxerOpts=275250997605,275154076090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LedPolicy\n 1740  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1741  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=EventMgr --demuxerOpts=275322741078,275313300522,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/EventMgr\n 1742  0.0  1.1 ?        S      Oct 09 00:04:39 LedPolicy\n 1743  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1744  0.0  1.3 ?        S      Oct 09 00:12:00 EventMgr\n 1745  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTxRx --demuxerOpts=275444901964,275402374762,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTxRx\n 1746  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1747  0.0  1.2 ?        S      Oct 09 00:43:15 StpTxRx\n 1748  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StandbyCpld --demuxerOpts=275574357813,275495834090,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StandbyCpld\n 1749  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1750  0.0  1.1 ?        S      Oct 09 00:01:02 StandbyCpld\n 1751  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=AgentMonitor --demuxerOpts=275690651150,275669274609,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/AgentMonitor\n 1753  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1754  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Tunnel --demuxerOpts=275828291876,275803253646,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Tunnel\n 1755  0.0  1.0 ?        S      Oct 09 01:02:34 AgentMonitor\n 1756  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1757  0.0  1.5 ?        Sl     Oct 09 00:02:41 Aaa\n 1758  0.0  1.2 ?        S      Oct 09 00:02:19 Tunnel\n 1759  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StpTopology --demuxerOpts=279461268794,279461053568,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StpTopology\n 1761  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Acl --demuxerOpts=279657298608,279657060623,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Acl\n 1762  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1763  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1764  0.0  1.2 ?        S      Oct 09 00:05:25 StpTopology\n 1765  0.0  1.3 ?        S      Oct 09 00:30:50 Acl\n 1766  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Stp --demuxerOpts=279904248479,279849063698,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Stp\n 1767  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1768  0.0  1.1 ?        S      Oct 09 00:08:12 Stp\n 1769  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelNetworkInfo --demuxerOpts=280070978812,280040277887,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelNetworkInfo\n 1770  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1772  0.0  1.1 ?        S      Oct 09 00:02:57 KernelNetworkInfo\n 1773  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=McastCommon6 --demuxerOpts=283496234961,283496022668,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/McastCommon6\n 1775  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1776  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LacpTxAgent --demuxerOpts=283670009272,283654033031,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LacpTxAgent\n 1777  0.0  1.2 ?        S      Oct 09 00:04:37 McastCommon6\n 1779  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1780  0.0  1.2 ?        S      Oct 09 00:04:54 LacpTxAgent\n 1782  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Arp --demuxerOpts=283962169714,283884454900,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Arp\n 1783  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1785  0.0  1.4 ?        S      Oct 09 00:07:36 Arp\n 1787  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=KernelFib --demuxerOpts=284368944078,284152030106,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/KernelFib\n 1788  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1789  0.0  1.3 ?        S      Oct 09 00:05:28 KernelFib\n 1790  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Qos --demuxerOpts=287951299826,287794979486,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Qos\n 1792  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1793  0.0  1.2 ?        S      Oct 09 00:04:13 Qos\n 1795  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Thermostat --demuxerOpts=288248865373,288063169954,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Thermostat\n 1797  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1799  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=L2Rib --demuxerOpts=288352399604,288352136405,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/L2Rib\n 1801  0.0  1.1 ?        S      Oct 09 00:02:55 Thermostat\n 1803  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1804  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=TopoAgent --demuxerOpts=288556229908,288555994956,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/TopoAgent --scheduled\n 1806  0.0  1.2 ?        S      Oct 09 00:01:49 L2Rib\n 1809  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1810  0.0  1.1 ?        S      Oct 09 00:02:45 TopoAgent\n 1811  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerFuse --demuxerOpts=292069625737,292066417655,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerFuse\n 1813  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1815  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=PowerManager --demuxerOpts=292307240803,292274815881,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/PowerManager\n 1816  0.0  1.0 ?        S      Oct 09 00:00:57 PowerFuse\n 1817  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1819  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ebra --demuxerOpts=292498169297,292497956396,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ebra\n 1822  0.0  1.1 ?        S      Oct 09 00:00:59 PowerManager\n 1823  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1826  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ReloadCauseAgent --demuxerOpts=292791615266,292746210228,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ReloadCauseAgent\n 1827  0.0  1.3 ?        S      Oct 09 00:10:23 Ebra\n 1831  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1833  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=SharedSecretProfile --demuxerOpts=292974197331,292973964529,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/SharedSecretProfile\n 1837  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1839  0.0  1.1 ?        S      Oct 09 00:00:59 ReloadCauseAgent\n 1840  0.0  1.5 ?        S      Oct 09 00:05:58 IgmpSnooping\n 1842  0.0  1.0 ?        S      Oct 09 00:00:59 SharedSecretProfile\n 1864  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Sfe --demuxerOpts=297106316632,297106081843,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Sfe\n 1865  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1881  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=StaticRoute --demuxerOpts=301046223259,301035905330,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/StaticRoute --scheduled\n 1883  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1886  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=IpRib --demuxerOpts=301197056671,301187894591,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/IpRib --scheduled\n 1887  0.0  1.3 ?        S      Oct 09 00:02:51 StaticRoute\n 1889  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1890  0.0  1.6 ?        S      Oct 09 00:07:32 IpRib\n 1892  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=BgpCliHelper --demuxerOpts=301382661484,301331080415,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/BgpCliHelper --scheduled\n 1893  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1895  0.0  1.9 ?        S      Oct 09 00:03:31 BgpCliHelper\n 1896  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=ConnectedRoute --demuxerOpts=301560922350,301533425877,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/ConnectedRoute\n 1901  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1905  0.0  1.2 ?        S      Oct 09 00:05:38 ConnectedRoute\n 1907  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=RouteInput --demuxerOpts=305119965463,304973045214,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/RouteInput\n 1910  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 1911  0.0  2.2 ?        Sl     Oct 09 00:16:28 Bgp\n 1913  0.0  1.3 ?        S      Oct 09 00:03:29 RouteInput\n 2038  0.0  0.0 ?        S    18:57:01 00:00:00 [kworker/0:0]\n 2276  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=LicenseManager --demuxerOpts=348517528299,348517276781,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/LicenseManager\n 2279  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2282  0.0  1.1 ?        S      Oct 09 00:01:03 LicenseManager\n 2285  0.0  0.0 ?        Ssl    Oct 09 00:00:55 /usr/sbin/rsyslogd -n\n 2289  0.0  0.0 ?        Rs   18:59:32 00:00:00 ps -e -o pid,pcpu,pmem,tt,stat,lstart,start,time,cmd --sort=-pcpu -ww\n 2338  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/sbin/dnsmasq\n 2571  0.0  0.0 ?        Zs     Oct 09 00:00:00 [SuperServer] <defunct>\n 2613  0.0  0.0 ?        S      Oct 09 00:00:00 /usr/bin/conlogd\n 2614  0.0  0.0 ttyS0    Ss+    Oct 09 00:00:00 /sbin/mingetty --noclear /dev/ttyS0\n 2615  0.0  0.0 tty1     Ss+    Oct 09 00:00:00 /sbin/agetty --noclear tty1 linux\n 2618  0.0  0.0 ?        S      Oct 09 00:00:00 sh -c /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console | sed 's/\\(.*\\)/\\1\\r/'\n 2620  0.0  0.0 ?        S      Oct 09 00:00:34 /usr/bin/tail -n 0 --retry --follow=name --pid=2613 /var/log/eos-console\n 2621  0.0  0.0 ?        S      Oct 09 00:00:00 sed s/\\(.*\\)/\\1\\r/\n 2675  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=Ipsec --demuxerOpts=369420756030,369420505813,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/Ipsec\n 2676  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 2680  0.0  1.2 ?        S      Oct 09 00:15:37 Ipsec\n 2700  0.0  0.4 ?        Ss     Oct 09 00:00:02 dhclient -e SYSNAME=ar -e SYSDBSOCKNAME=sysdb -e VRFNAME=default -sf /etc/dhcp/dhclient-script.py -pf /var/run/dhclient-default.pid -cf /etc/dhcp/dhclient-default.conf -lf /var/lib/dhclient/dhclient-default.leases -e et1=Ethernet1\n 2729  0.0  0.1 ?        Ssl    Oct 09 00:01:33 ntpd -u ntp:ntp -g -p /var/run/ntpd.pid\n 2734  0.0  0.0 ?        Ss     Oct 09 00:00:00 fusermount -o rw,nosuid,nodev,allow_other,auto_unmount,subtype=MfibFuse -- /BessProc\n 3363  0.0  0.0 ?        Ss     Oct 09 00:00:00 /usr/libexec/strongswan/starter --daemon charon\n 3365  0.0  0.1 ?        Ssl    Oct 09 00:02:33 /usr/libexec/strongswan/charon --use-syslog\n 4661  0.0  0.0 ?        S      Oct 09 00:00:00 netns --agenttitle=CapiApp --demuxerOpts=5957835036638,5957834774817,tbl://sysdb/+n,Sysdb (pid:1491) --sysdbfd=7 --dlopen procmgr /usr/bin/CapiApp --ini /etc/uwsgi/CapiApp.ini\n 4662  0.0  0.3 ?        Ss     Oct 09 00:00:00 netnsd-session  -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4663  0.0  1.3 ?        Sl     Oct 09 00:01:09 CapiApp         -d -i --dlopen -p -f  -l libLoadDynamicLibs.so procmgr libProcMgrSetup.so --daemonize\n 4707  0.0  0.0 ?        Ss     Oct 09 00:00:00 nginx: master process /usr/sbin/nginx -c /etc/nginx/nginx.conf -g pid /var/run/nginx.pid;\n 4709  0.0  0.1 ?        S      Oct 09 00:00:02 nginx: worker process                                              \n21905  0.0  0.0 ?        S      Nov 08 00:00:01 [kworker/u8:1]\n22413  0.0  0.0 ?        S      Nov 30 00:00:00 /bin/sh /var/awslogs/bin/awslogs-agent-launcher.sh\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00044029997661709785, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_ntp_configuration_on_[kg-topology-CloudEosRR2]", "duration": 1.0771211995743215, "run_index": 115, "setup": {"name": "setup", "duration": 0.2693923998158425, "outcome": "passed"}, "call": {"name": "call", "duration": 0.5379641000181437, "outcome": "passed", "stdout": "|kg-topology-CloudEosRR2| has the ntp config |ntp server 169.254.169.123\n|, expect the ntp config |ntp server 169.254.169.123\n|.\n\n\nTEST |kg-topology-CloudEosRR2| NTP config.\nGIVEN NTP config |ntp server 169.254.169.123\n|.\nWHEN NTP config |ntp server 169.254.169.123\n|.\nTHEN test case result is |True|.\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.000372299924492836, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_servers_are_reachable_on_[kg-topology-CloudEosRR2]", "duration": 5.064038300188258, "run_index": 116, "setup": {"name": "setup", "duration": 0.24993110005743802, "outcome": "passed"}, "call": {"name": "call", "duration": 4.563674499979243, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f34763bb0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.23.123.34:443//command-api)), 'name': 'kg-topology-C...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        ntp_servers = tops.test_parameters[\"ntp_servers\"]\n        ntp_vrf = tops.test_parameters[\"ntp_vrf\"]\n    \n        for ntp_server in ntp_servers:\n            if ntp_vrf:\n                show_cmd = f\"ping vrf {ntp_vrf} ip {ntp_server}\"\n            else:\n                show_cmd = f\"ping {ntp_server}\"\n    \n            tops.return_show_cmd(show_cmd)\n            tops.actual_output = 'bytes from' in tops.show_cmd_txt\n            tops.test_result = tops.actual_output is tops.expected_output\n    \n            tops.output_msg += (f\"\\nOn router |{tops.dut_name}|, verifying NTP \"\n                                f\"server reachability for |{ntp_server}| is \"\n                                f\"|{tops.test_result}|.\\n\")\n    \n            tops.comment += (f'TEST NTP servers are reachable on |{tops.dut_name}| '\n                             f'GIVEN server |{ntp_server}|.\\n'\n                             'WHEN exception is |bytes from| '\n                             'string.\\n'\n                             f'THEN test case result is |{tops.test_result}|.\\n'\n                             f'OUTPUT of |{show_cmd}| is :\\n\\n{tops.show_cmd_txt}.\\n')\n    \n            tops.actual_results.append(tops.actual_output)\n            tops.expected_results.append(tops.expected_output)\n    \n        tops.actual_output, tops.expected_output = tops.actual_results, tops.expected_results\n        tops.post_testcase()\n    \n>       assert tops.actual_results == tops.expected_results\nE       assert [False] == [True]\nE         At index 0 diff: False != True\nE         Full diff:\nE         - [True]\nE         + [False]\n\ntests/ntp/test_ntp.py:250: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000501600094139576, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::CrashTests::test_if_there_is_agents_have_crashed_on_[kg-topology-CloudEosRR2]", "duration": 0.8937126998789608, "run_index": 117, "setup": {"name": "setup", "duration": 0.2697630999609828, "outcome": "passed"}, "call": {"name": "call", "duration": 0.35365940001793206, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| has |0| agent crashes correct number of agent crashes is |0|.\n\nTEST number of agent crashes on |kg-topology-CloudEosRR2|.\nGIVEN |0| agent crashes.\nWHEN |0| agent crashes.\nTHEN test case result is |True|.\nOUTPUT of |show agent logs crash| is:\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.0005270999390631914, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/system/test_system.py::SystemTests::test_if_eos_version_is_correct_on_[kg-topology-CloudEosRR2]", "duration": 0.6189835004042834, "run_index": 118, "setup": {"name": "setup", "duration": 0.29813410015776753, "outcome": "passed"}, "call": {"name": "call", "duration": 0.022407500073313713, "outcome": "failed", "longrepr": "self = <vane.bin.tests.system.test_system.SystemTests object at 0x7f6f3477c580>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.23.123.34:443//command-api)), 'name': 'kg-topology-C...TEM:\\n  name=system default-action=none\\nAccounting method list for DOT1X:\\n  name=dot1x default-action=none\\n'}, ...}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_eos_version_is_correct_on_(self, dut, tests_definitions):\n        \"\"\" Verifies EOS version running on the device\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        tops.actual_output = dut[\"output\"][tops.show_cmd][\"json\"][\"version\"]\n        tops.test_result = tops.actual_output == tops.expected_output\n    \n        tops.output_msg = (f\"On router |{tops.dut_name}| EOS version is \"\n                           f\"|{tops.actual_output}%|, version should be \"\n                           f\"|{tops.expected_output}%|\")\n        tops.comment = ('TEST EOS version running on the device on '\n                        f'|{tops.dut_name}|.\\n'\n                        f'GIVEN version is |{tops.expected_output}|.\\n'\n                        f'WHEN version is |{tops.actual_output}|.\\n'\n                        f'THEN test case result is |{tops.test_result}|.\\n'\n                        f'OUTPUT of |{tops.show_cmd}| is:\\n\\n{tops.show_cmd_txt}')\n    \n        print(f\"{tops.output_msg}\\n{tops.comment}\")\n    \n        tops.post_testcase()\n    \n>       assert tops.actual_output == tops.expected_output\nE       AssertionError: assert '4.24.0FX-cloud' == '4.23.1F-clou...eering build)'\nE         - 4.23.1F-cloud-16179785.jakartarel (engineering build)\nE         + 4.24.0FX-cloud\n\ntests/system/test_system.py:116: AssertionError", "stdout": "On router |kg-topology-CloudEosRR2| EOS version is |4.24.0FX-cloud%|, version should be |4.23.1F-cloud-16179785.jakartarel (engineering build)%|\nTEST EOS version running on the device on |kg-topology-CloudEosRR2|.\nGIVEN version is |4.23.1F-cloud-16179785.jakartarel (engineering build)|.\nWHEN version is |4.24.0FX-cloud|.\nTHEN test case result is |False|.\nOUTPUT of |show version| is:\n\nArista vEOS\nHardware version:    \nSerial number:       5AF63C12E54F39466CB6E9CC07325A44\nSystem MAC address:  06aa.1af7.287f\n\nSoftware image version: 4.24.0FX-cloud\nArchitecture:           x86_64\nInternal build version: 4.24.0FX-cloud-16811629.4240FX\nInternal build ID:      4d308dc3-e34e-4c33-b790-7f443d4288fe\n\nUptime:                 7 weeks, 5 days, 2 hours and 50 minutes\nTotal memory:           7818736 kB\nFree memory:            2986484 kB\n\n\n"}, "teardown": {"name": "teardown", "duration": 0.00030780001543462276, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_sending_messages_on_[kg-topology-CloudEosRR2]", "duration": 0.5183895998634398, "run_index": 119, "setup": {"name": "setup", "duration": 0.255119499983266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007921699900180101, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| does not have TACACS servers configured\n"}, "teardown": {"name": "teardown", "duration": 0.000228899996727705, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_receiving_messages_on_[kg-topology-CloudEosRR2]", "duration": 0.48409880022518337, "run_index": 120, "setup": {"name": "setup", "duration": 0.23760060011409223, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00844520004466176, "outcome": "passed", "stdout": "\nOn router |kg-topology-CloudEosRR2| does not have TACACS servers configured\n"}, "teardown": {"name": "teardown", "duration": 0.0004523999523371458, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/users/test_users.py::UsersTests::test_if_usernames_are_configured_on_[kg-topology-CloudEosRR2]", "duration": 0.5024888003244996, "run_index": 121, "setup": {"name": "setup", "duration": 0.24116270011290908, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01968190004117787, "outcome": "passed", "stdout": "On router |kg-topology-CloudEosRR2|: |ec2-user| username configured is |True|, username configured should be |True|.\n\nOn router |kg-topology-CloudEosRR2|: |kgrozis| username configured is |True|, username configured should be |True|.\n\n\nTEST is ec2-user username configured on  |kg-topology-CloudEosRR2|.\nGIVEN username configured status: |True|.\nWHEN username configured status: |True|.\nTHEN test case result is |True|.\n\nTEST is kgrozis username configured on  |kg-topology-CloudEosRR2|.\nGIVEN username configured status: |True|.\nWHEN username configured status: |True|.\nTHEN test case result is |True|.\n\nOUTPUT of |show running-config section username| is :\n\nno username admin\n!\nusername ec2-user nopassword\nusername ec2-user ssh-key ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCW9oTsCjh4dXhU/8P7WwXmgYoJqHcHwPXkCYWklBGHpvgjUBAekGJSfwgM+KMX6e1dX/jKXroFSiRGzafQadO2U2UryY7+1gS90vZ7KRam73Kyy83Is1+ptpgrAvc/F2zIl8PGBQAw3smkkIg6SIT2Rs1L+w+9iYgl0UX/wBuf7pIIjOXDaFBM8QFLMFK0msSIcwPKydoWLFOWbDdn9XxPsiJ5CRJfk2MWAgrXCgb0+4NYgaGRCYM+UJqElSmIj5LhLOf5BJppYNFGCvkMl6wUuBjbpgElefBKOgJbx8prlRIebcSSlutQdxrfcqS/evdLpqr6z9I0CVrr+j1hK4ID kgrozis-east2\nusername kgrozis secret sha512 $6$v79HvPRjgAsoZgMx$oKhb5cP4jZRmSbW4d0AGyN.2yImvSEhdfo3YiLiVrtKWphCSxxtKj15r/Mkldk614h8e2nCYxOLO1siJ0wB7f.\n.\n\n"}, "teardown": {"name": "teardown", "duration": 0.00048150005750358105, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_if_zerotouch_is_disabled_on_[kg-topology-CloudEosRR2]", "duration": 0.4970385998021811, "run_index": 122, "setup": {"name": "setup", "duration": 0.23936120001599193, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017994199879467487, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.00032199989072978497, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_for_zerotouch_config_file_on_[kg-topology-CloudEosRR2]", "duration": 0.5040550001431257, "run_index": 123, "setup": {"name": "setup", "duration": 0.24346030014567077, "outcome": "passed"}, "call": {"name": "call", "duration": 0.016875699860975146, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002586999908089638, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/test_pytest.py::PyTestTests::test_assert_true[kg-topology-CloudEOSEdge1]", "duration": 0.002346700057387352, "run_index": 124, "setup": {"name": "setup", "duration": 0.0004817000590264797, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0011090000625699759, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0002742998767644167, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_authentication_counters_are_incrementing_on_[kg-topology-CloudEOSEdge1]", "duration": 0.0009128998499363661, "run_index": 125, "setup": {"name": "setup", "duration": 0.00018869992345571518, "outcome": "skipped", "longrepr": "('/project/vane/bin/tests/aaa/test_aaa.py', 51, 'Skipped: No AAA setup on DUTs')"}, "teardown": {"name": "teardown", "duration": 0.0005355000030249357, "outcome": "passed"}, "outcome": "skipped"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_aaa_session_logging_is_working_on_[kg-topology-CloudEOSEdge1]", "duration": 0.49939100025221705, "run_index": 126, "setup": {"name": "setup", "duration": 0.24659770005382597, "outcome": "passed"}, "call": {"name": "call", "duration": 0.005816800054162741, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34777ca0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_aaa_session_logging_is_working_on_(self,\n                                                   dut,\n                                                   tests_definitions):\n        \"\"\" Verify AAA session logging is working by identifying eapi connection\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show users detail'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00037880009040236473, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_commands_authorization_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.48107960005290806, "run_index": 127, "setup": {"name": "setup", "duration": 0.23660050006583333, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007551399990916252, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34702730>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authorization\n    def test_if_commands_authorization_methods_set_on_(self,\n                                                       dut,\n                                                       tests_definitions):\n        \"\"\" Verify AAA command authorization are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        cmd_auth = test_parameters[\"cmd_auth\"]\n        expected_output = cmd_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003271999303251505, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_authorization_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5725024996791035, "run_index": 128, "setup": {"name": "setup", "duration": 0.2827639998868108, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006571999983862042, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f347b2160>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authorization\n    def test_if_exec_authorization_methods_set_on_(self,\n                                                   dut,\n                                                   tests_definitions):\n        \"\"\" Verify AAA exec authorization are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        exec_auth = test_parameters[\"exec_auth\"]\n        expected_output = exec_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004024999216198921, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_default_login_authentication_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6854478004388511, "run_index": 129, "setup": {"name": "setup", "duration": 0.3394010001793504, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006301900139078498, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f347b17f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_default_login_authentication_methods_set_on_(self,\n                                                             dut,\n                                                             tests_definitions):\n        \"\"\" Verify AAA default login authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        login_auth = test_parameters[\"login_auth\"]\n        expected_output = login_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:267: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00034389994107186794, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_login_authentication_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5658786001149565, "run_index": 130, "setup": {"name": "setup", "duration": 0.27965559996664524, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006103700026869774, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f346ae460>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_login_authentication_methods_set_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\" Verify AAA login authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        login_auth = test_parameters[\"login_auth\"]\n        expected_output = login_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004637001547962427, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_authentication_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6644499998074025, "run_index": 131, "setup": {"name": "setup", "duration": 0.32864289986900985, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006801699986681342, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34695b20>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_dot1x_authentication_methods_set_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\" Verify AAA dot1x authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        dot1x_auth = test_parameters[\"dot1x_auth\"]\n        expected_output = dot1x_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:361: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003625000827014446, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_enable_authentication_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.535226000007242, "run_index": 132, "setup": {"name": "setup", "duration": 0.2634779999498278, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007932699983939528, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f348330d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_enable_authentication_methods_set_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify AAA enable authentication method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        enable_auth = test_parameters[\"enable_auth\"]\n        expected_output = enable_auth\n    \n        logging.info('TEST is enable authentication methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info('GIVEN enable authentication method list: '\n                     f'|{enable_auth}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00033730012364685535, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_system_accounting_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5651773998979479, "run_index": 133, "setup": {"name": "setup", "duration": 0.2786745000630617, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007518499856814742, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34838c40>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_system_accounting_methods_set_on_(self,\n                                                  dut,\n                                                  tests_definitions):\n        \"\"\" Verify AAA system accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is system accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN default system accounting method list: '\n                     f'|{default_acct}| and console system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000309899915009737, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_accounting_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.571224499726668, "run_index": 134, "setup": {"name": "setup", "duration": 0.2807592998724431, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00917400000616908, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f347089a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_exec_accounting_methods_set_on_(self, dut, tests_definitions):\n        \"\"\" Verify AAA exec accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is exec accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN exec system accounting method list: '\n                     f'|{default_acct}| and exec system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:503: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005318999756127596, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_priviledge_accounting_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5543630998581648, "run_index": 135, "setup": {"name": "setup", "duration": 0.27278080000542104, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008387899957597256, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f346f2520>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_priviledge_accounting_methods_set_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify AAA priviledge accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is priviledge accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN priviledge system accounting method list: '\n                     f'|{default_acct}| and priviledge system accounting '\n                     f'method list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:553: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004135998897254467, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_accounting_methods_set_on_[kg-topology-CloudEOSEdge1]", "duration": 0.55768259963952, "run_index": 136, "setup": {"name": "setup", "duration": 0.27396759996190667, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008783199824392796, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f346cd610>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_dot1x_accounting_methods_set_on_(self, dut, tests_definitions):\n        \"\"\" Verify AAA dot1x accounting method-lists are set correct\n    \n             Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is dot1x accounting methods list set correct on '\n                     f'|{dut_name}|')\n        logging.info(f'GIVEN dot1x system accounting method list: '\n                     f'|{default_acct}| and dot1x system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009641998913139105, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_running_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5581718001049012, "run_index": 137, "setup": {"name": "setup", "duration": 0.27368009998463094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010417500045150518, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f34512460>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_is_running_on_(self,\n                                                           dut,\n                                                           tests_definitions):\n      \"\"\" Verify management api https server is running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34512c10>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00039410009048879147, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_port_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5437299003824592, "run_index": 138, "setup": {"name": "setup", "duration": 0.26706730015575886, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009147100150585175, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f347cd4c0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_port_is_correct_on_(self,\n                                                                dut,\n                                                                tests_definitions):\n      \"\"\" Verify https server is enabled on port 443\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3466d2b0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00044819992035627365, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_enabled_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5600456001702696, "run_index": 139, "setup": {"name": "setup", "duration": 0.2748063001781702, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009781699860468507, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f3466d1f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_is_enabled_on_(self,\n                                                           dut,\n                                                           tests_definitions):\n      \"\"\" Verify management api https server is enabled\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f347f54f0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006512999534606934, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_http_api_server_is_running_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6069726999849081, "run_index": 140, "setup": {"name": "setup", "duration": 0.2989692999981344, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0086300999391824, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f3459ea60>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_http_api_server_is_running_on_(self,\n                                                          dut,\n                                                          tests_definitions):\n      \"\"\" Verify management api http server is not running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f346e2700>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000404000049456954, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_local_http_api_server_is_running_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5591948998626322, "run_index": 141, "setup": {"name": "setup", "duration": 0.27504289988428354, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008694600081071258, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f345faeb0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_local_http_api_server_is_running_on_(self,\n                                                                dut,\n                                                                tests_definitions):\n      \"\"\" Verify management api local httpserver is not running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f345fa8e0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00041450001299381256, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_sec_cpu_utlization_on_[kg-topology-CloudEOSEdge1]", "duration": 0.538760700263083, "run_index": 142, "setup": {"name": "setup", "duration": 0.2649348000995815, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008594000013545156, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f345d3ac0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 1 second CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f346274f0>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00029710005037486553, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_min_cpu_utlization_on_[kg-topology-CloudEOSEdge1]", "duration": 0.634225599700585, "run_index": 143, "setup": {"name": "setup", "duration": 0.31143599981442094, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010856200009584427, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f345c09d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_1_min_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 1 minute CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3469d610>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004974000621587038, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_5_min_cpu_utlization_on_[kg-topology-CloudEOSEdge1]", "duration": 1.0104900994338095, "run_index": 144, "setup": {"name": "setup", "duration": 0.4939913998823613, "outcome": "passed"}, "call": {"name": "call", "duration": 0.021430099848657846, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f346abca0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_5_min_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 5 minute CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3464d670>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0010771998204290867, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_running_on_[kg-topology-CloudEOSEdge1]", "duration": 0.8964007999747992, "run_index": 145, "setup": {"name": "setup", "duration": 0.442724599968642, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010395700111985207, "outcome": "failed", "longrepr": "self = <vane.bin.tests.daemon.test_daemon.DaemonTests object at 0x7f6f3466d2b0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_daemons_are_running_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of daemons are running on DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/daemon/test_daemon.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3466d700>, show_cmd = 'show daemon'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005558999255299568, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_enabled_on_[kg-topology-CloudEOSEdge1]", "duration": 1.044806000078097, "run_index": 146, "setup": {"name": "setup", "duration": 0.5139631000347435, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0158782999496907, "outcome": "failed", "longrepr": "self = <vane.bin.tests.daemon.test_daemon.DaemonTests object at 0x7f6f346b9d90>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_daemons_are_enabled_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of daemons are enabled on DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/daemon/test_daemon.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3464d070>, show_cmd = 'show daemon'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0010015000589191914, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_resolves_on_[kg-topology-CloudEOSEdge1]", "duration": 0.7308350999373943, "run_index": 147, "setup": {"name": "setup", "duration": 0.35992920002900064, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010504999896511436, "outcome": "failed", "longrepr": "self = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f34704850>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_resolves_on_(self, dut, tests_definitions):\n        \"\"\" Verify DNS is running by performing pings and verifying name resolution\n    \n             Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/dns/test_dns.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34610e50>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000471699982881546, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_servers_are_reachable_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5928779998794198, "run_index": 148, "setup": {"name": "setup", "duration": 0.2811221999581903, "outcome": "passed"}, "call": {"name": "call", "duration": 0.029968000017106533, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 148\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f34610430>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        dns_servers = tops.test_parameters[\"dns_servers\"]\n        dns_vrf = tops.test_parameters[\"dns_vrf\"]\n    \n        for dns_server in dns_servers:\n            if dns_vrf:\n                show_cmd = f\"ping vrf {dns_vrf} ip {dns_server}\"\n            else:\n                show_cmd = f\"ping {dns_server}\"\n    \n>           tops.return_show_cmd(show_cmd)\n\ntests/dns/test_dns.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0006655999459326267, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_dns_configuration_on_[kg-topology-CloudEOSEdge1]", "duration": 1.3004236000124365, "run_index": 149, "setup": {"name": "setup", "duration": 0.6218779999762774, "outcome": "passed"}, "call": {"name": "call", "duration": 0.05490390001796186, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 171\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f345457f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_dns_configuration_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS configuration matches the recommended practices\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show running-config section name-server\")\n\ntests/dns/test_dns.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0017637000419199467, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_temp_is_in_spec_on_[kg-topology-CloudEOSEdge1]", "duration": 1.2605238996911794, "run_index": 150, "setup": {"name": "setup", "duration": 0.6237693999428302, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012304499978199601, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f3451de50>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_temp_is_in_spec_on_(self,\n                                                        dut,\n                                                        tests_definitions):\n        \"\"\" Verify system temperature environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0006805998273193836, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_sensors_temp_is_in_spec_on_[kg-topology-CloudEOSEdge1]", "duration": 1.6375845002476126, "run_index": 151, "setup": {"name": "setup", "duration": 0.8090933000203222, "outcome": "passed"}, "call": {"name": "call", "duration": 0.018805300118401647, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f345ced00>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_sensors_temp_is_in_spec_on_(self, dut, tests_definitions):\n        \"\"\" Verify system temperature sensors environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0005926000885665417, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_power_are_in_spec_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6656180999707431, "run_index": 152, "setup": {"name": "setup", "duration": 0.3280499998945743, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00869280006736517, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f345161c0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_power_are_in_spec_on_(self,\n                                                         dut,\n                                                         tests_definitions):\n        \"\"\" Verify system power environmentals are functional within spec\n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0008253001142293215, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_cooling_is_in_spec_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6992369999643415, "run_index": 153, "setup": {"name": "setup", "duration": 0.3408667000476271, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01697729993611574, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f3448b430>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_cooling_is_in_spec_on_(self,\n                                                          dut,\n                                                          tests_definitions):\n        \"\"\" Verify system cooling environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/environment/test_environment.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34483e80>, show_cmd = 'show system environment cooling'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005262999329715967, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_fan_status_is_in_spec_on_[kg-topology-CloudEOSEdge1]", "duration": 0.684626400237903, "run_index": 154, "setup": {"name": "setup", "duration": 0.33684070012532175, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01039780001156032, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f344832e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...utput': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling', ...}]}, ...]}\n\n    def test_if_fan_status_is_in_spec_on_(self, dut, tests_definitions):\n        \"\"\" Verify system cooling environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/environment/test_environment.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34602e20>, show_cmd = 'show system environment cooling'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005471999756991863, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_installed_on_[kg-topology-CloudEOSEdge1]", "duration": 0.7306509001646191, "run_index": 155, "setup": {"name": "setup", "duration": 0.3577205999754369, "outcome": "passed"}, "call": {"name": "call", "duration": 0.013948800042271614, "outcome": "failed", "longrepr": "self = <vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f6f3443f4f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of extension are installed on a DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/extension/test_extension.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f345bf310>, show_cmd = 'show extensions'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0012609001714736223, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_erroring_on_[kg-topology-CloudEOSEdge1]", "duration": 0.7391559998504817, "run_index": 156, "setup": {"name": "setup", "duration": 0.36246189987286925, "outcome": "passed"}, "call": {"name": "call", "duration": 0.013380000134930015, "outcome": "failed", "longrepr": "self = <vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f6f345981f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_extensions_are_erroring_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of extension are not erroring on a DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/extension/test_extension.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f345bf6d0>, show_cmd = 'show extensions'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0008521999698132277, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/filesystem/test_filesystem.py::FileSystemTests::test_if_files_on_[kg-topology-CloudEOSEdge1]", "duration": 0.8312308995518833, "run_index": 157, "setup": {"name": "setup", "duration": 0.3959146998822689, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03849789989180863, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 174\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.filesystem.test_filesystem.FileSystemTests object at 0x7f6f34248be0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_files_on_(self, dut, tests_definitions):\n        \"\"\" Verify filesystem is correct and expected files are present\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        files = tops.test_parameters[\"files\"]\n    \n        for file_name in files:\n            show_cmd = f\"show file information {file_name}\"\n>           show_output, show_cmd_txt = tests_tools.return_show_cmd(show_cmd,\n                                                                    dut,\n                                                                    tops.test_case,\n                                                                    LOG_FILE)\n\ntests/filesystem/test_filesystem.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:290: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0009035998955368996, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/host/test_host.py::HostTests::test_if_hostname_is_correcet_on_[kg-topology-CloudEOSEdge1]", "duration": 1.147363800322637, "run_index": 158, "setup": {"name": "setup", "duration": 0.5608372001443058, "outcome": "passed"}, "call": {"name": "call", "duration": 0.023638000013306737, "outcome": "failed", "longrepr": "self = <vane.bin.tests.host.test_host.HostTests object at 0x7f6f3446d5e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_hostname_is_correcet_on_(self, dut, tests_definitions):\n        \"\"\" Verify hostname is set on device is correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/host/test_host.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f344808b0>, show_cmd = 'show hostname'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0020514000207185745, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_protocol_status_is_connected_on_[kg-topology-CloudEOSEdge1]", "duration": 1.1272843999322504, "run_index": 159, "setup": {"name": "setup", "duration": 0.5543420999310911, "outcome": "passed"}, "call": {"name": "call", "duration": 0.017631199909374118, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceStatusTests object at 0x7f6f34232820>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_protocol_status_is_connected_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify the interfaces of interest protocol statuses are up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f344570d0>, show_cmd = 'show interfaces status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009690001606941223, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_link_status_is_connected_on_[kg-topology-CloudEOSEdge1]", "duration": 1.2950152000412345, "run_index": 160, "setup": {"name": "setup", "duration": 0.6363876999821514, "outcome": "passed"}, "call": {"name": "call", "duration": 0.021248700097203255, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceStatusTests object at 0x7f6f343b5d60>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_link_status_is_connected_on_(self,\n                                                  dut,\n                                                  tests_definitions):\n        \"\"\" Verify the interfaces of interest link statuses are up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343b5730>, show_cmd = 'show interfaces status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009910999797284603, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfacePhyTests::test_if_intf_phy_status_connected_on_[kg-topology-CloudEOSEdge1]", "duration": 1.163123799720779, "run_index": 161, "setup": {"name": "setup", "duration": 0.570773399900645, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020993700018152595, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfacePhyTests object at 0x7f6f342cdcd0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_phy_status_connected_on_(self,\n                                              dut,\n                                              tests_definitions):\n        \"\"\" Verify the interfaces of interest physical state is link up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f344c37c0>, show_cmd = 'show interfaces phy detail'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005832999013364315, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_if_interface_errors_on_[kg-topology-CloudEOSEdge1]", "duration": 1.3749001999385655, "run_index": 162, "setup": {"name": "setup", "duration": 0.6755516999401152, "outcome": "passed"}, "call": {"name": "call", "duration": 0.02286250004544854, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceCountersTests object at 0x7f6f3455bd00>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_interface_errors_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:622: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34232c40>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009343000128865242, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_interface_utilization_on_[kg-topology-CloudEOSEdge1]", "duration": 1.095803600270301, "run_index": 163, "setup": {"name": "setup", "duration": 0.5377794001251459, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019405100028961897, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceCountersTests object at 0x7f6f34456f10>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_interface_utilization_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:728: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3421aca0>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0008396999910473824, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_out_counters_are_discarding_on_[kg-topology-CloudEOSEdge1]", "duration": 1.0067725996486843, "run_index": 164, "setup": {"name": "setup", "duration": 0.49445439991541207, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01686510001309216, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceDiscardTests object at 0x7f6f3421a5b0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_out_counters_are_discarding_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no outDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34572fa0>, show_cmd = 'show interfaces counters discards'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009986998047679663, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_in_counters_are_discarding_on_[kg-topology-CloudEOSEdge1]", "duration": 1.4582275000866503, "run_index": 165, "setup": {"name": "setup", "duration": 0.7176745999604464, "outcome": "passed"}, "call": {"name": "call", "duration": 0.021917900070548058, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceDiscardTests object at 0x7f6f34266c70>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_in_counters_are_discarding_on_(self,\n                                                    dut,\n                                                    tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34493ee0>, show_cmd = 'show interfaces counters discards'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009604000952094793, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceMtuTests::test_if_intf_mtu_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.8853100002743304, "run_index": 166, "setup": {"name": "setup", "duration": 0.4326298001687974, "outcome": "passed"}, "call": {"name": "call", "duration": 0.019107599975541234, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceMtuTests object at 0x7f6f34402f10>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_mtu_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:577: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f344b4580>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000942799961194396, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_rx_is_enabled_on_[kg-topology-CloudEOSEdge1]", "duration": 1.1304354001767933, "run_index": 167, "setup": {"name": "setup", "duration": 0.5595170999877155, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010856000008061528, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpTests object at 0x7f6f345670d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_rx_is_enabled_on_(self, dut, tests_definitions):\n        \"\"\"  Verify LLDP receive is enabled on interesting interfaces\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34229bb0>, show_cmd = 'show lldp'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005452001933008432, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_tx_is_enabled_on_[kg-topology-CloudEOSEdge1]", "duration": 1.3133589997887611, "run_index": 168, "setup": {"name": "setup", "duration": 0.6460531000047922, "outcome": "passed"}, "call": {"name": "call", "duration": 0.020431799814105034, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpTests object at 0x7f6f34575d90>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_tx_is_enabled_on_(self, dut, tests_definitions):\n        \"\"\"  Verify LLDP transmit is enabled on interesting interfaces\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34328310>, show_cmd = 'show lldp'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0008209999650716782, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_system_name_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.7243708996102214, "run_index": 169, "setup": {"name": "setup", "duration": 0.3558083998505026, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012159900041297078, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f3449b670>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_system_name_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info hostname is the system's name\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3449b340>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005941998679190874, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_max_frame_size_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6340495999902487, "run_index": 170, "setup": {"name": "setup", "duration": 0.31150859990157187, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010523200035095215, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f343b6220>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_max_frame_size_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info maxFrameSize is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f342434c0>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005092001520097256, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_interface_id_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.630596999777481, "run_index": 171, "setup": {"name": "setup", "duration": 0.3091650998685509, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01192099996842444, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f342435e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_interface_id_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info interfaceIdType is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34237400>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00034580007195472717, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/log/test_logging.py::LoggingTests::test_if_log_messages_appear_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5731117997784168, "run_index": 172, "setup": {"name": "setup", "duration": 0.28178999992087483, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009015900082886219, "outcome": "failed", "longrepr": "self = <vane.bin.tests.log.test_logging.LoggingTests object at 0x7f6f34255460>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_log_messages_appear_on_(self, dut, tests_definitions):\n        \"\"\" Verify local log messages\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/log/test_logging.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3438b340>, show_cmd = 'show logging'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005158998537808657, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/memory/test_memory.py::MemoryTests::test_memory_utilization_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5910165994428098, "run_index": 173, "setup": {"name": "setup", "duration": 0.28964749979786575, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011146399891003966, "outcome": "failed", "longrepr": "self = <vane.bin.tests.memory.test_memory.MemoryTests object at 0x7f6f345851f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_memory_utilization_on_(self, dut, tests_definitions):\n        \"\"\" Verify memory is not exceeding high utlization\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/memory/test_memory.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343a7790>, show_cmd = 'show version'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000575199956074357, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_is_synchronized_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5494152004830539, "run_index": 174, "setup": {"name": "setup", "duration": 0.26711260015144944, "outcome": "passed"}, "call": {"name": "call", "duration": 0.014709600014612079, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f3438e160>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_is_synchronized_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp is synchronzied\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34430280>, show_cmd = 'show ntp status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00048040016554296017, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_associated_with_peers_on_[kg-topology-CloudEOSEdge1]", "duration": 0.580384399741888, "run_index": 175, "setup": {"name": "setup", "duration": 0.2830111999064684, "outcome": "passed"}, "call": {"name": "call", "duration": 0.013665699865669012, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f34279d60>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_associated_with_peers_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp peers are correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f344167c0>, show_cmd = 'show ntp associations'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006963000632822514, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_process_is_running_on_[kg-topology-CloudEOSEdge1]", "duration": 0.546646700007841, "run_index": 176, "setup": {"name": "setup", "duration": 0.2685867000836879, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008843699935823679, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f343514c0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_process_is_running_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp processes are running\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34508580>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006295999046415091, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_ntp_configuration_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5621746000833809, "run_index": 177, "setup": {"name": "setup", "duration": 0.263755900086835, "outcome": "passed"}, "call": {"name": "call", "duration": 0.034286299953237176, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 163\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f3449b640>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_ntp_configuration_on_(self, dut, tests_definitions):\n        \"\"\" Verifies NTP configuration matches the recommended practices\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show running-config section ntp\")\n\ntests/ntp/test_ntp.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.00037649995647370815, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_servers_are_reachable_on_[kg-topology-CloudEOSEdge1]", "duration": 0.623281400417909, "run_index": 178, "setup": {"name": "setup", "duration": 0.29451820021495223, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03373070014640689, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 152\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f343ab730>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        ntp_servers = tops.test_parameters[\"ntp_servers\"]\n        ntp_vrf = tops.test_parameters[\"ntp_vrf\"]\n    \n        for ntp_server in ntp_servers:\n            if ntp_vrf:\n                show_cmd = f\"ping vrf {ntp_vrf} ip {ntp_server}\"\n            else:\n                show_cmd = f\"ping {ntp_server}\"\n    \n>           tops.return_show_cmd(show_cmd)\n\ntests/ntp/test_ntp.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0005142998415976763, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::CrashTests::test_if_there_is_agents_have_crashed_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6442546998150647, "run_index": 179, "setup": {"name": "setup", "duration": 0.3043585999403149, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03496539988555014, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.129.78.225\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 153\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.129.78.225:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.129.78.225', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.system.test_system.CrashTests object at 0x7f6f342601f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_there_is_agents_have_crashed_on_(self, dut, tests_definitions):\n        \"\"\" Verifies the agents logs crash is empty\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show agent logs crash\")\n\ntests/system/test_system.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.129.78.225:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639903856\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0005721000488847494, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::SystemTests::test_if_eos_version_is_correct_on_[kg-topology-CloudEOSEdge1]", "duration": 0.528135399799794, "run_index": 180, "setup": {"name": "setup", "duration": 0.2595408000051975, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008692699950188398, "outcome": "failed", "longrepr": "self = <vane.bin.tests.system.test_system.SystemTests object at 0x7f6f34251280>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_eos_version_is_correct_on_(self, dut, tests_definitions):\n        \"\"\" Verifies EOS version running on the device\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/system/test_system.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34251610>, show_cmd = 'show version'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00036109983921051025, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_sending_messages_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5190556000452489, "run_index": 181, "setup": {"name": "setup", "duration": 0.2566561000421643, "outcome": "passed"}, "call": {"name": "call", "duration": 0.005421799840405583, "outcome": "failed", "longrepr": "self = <vane.bin.tests.tacacs.test_tacacs.TacacsTests object at 0x7f6f34251ac0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_tacacs_is_sending_messages_on_(self, dut, tests_definitions):\n        \"\"\" Verify tacacs messages are sending correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/tacacs/test_tacacs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show tacacs'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00032160012051463127, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_receiving_messages_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6021346999332309, "run_index": 182, "setup": {"name": "setup", "duration": 0.2977724999655038, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006116900127381086, "outcome": "failed", "longrepr": "self = <vane.bin.tests.tacacs.test_tacacs.TacacsTests object at 0x7f6f342801f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_tacacs_is_receiving_messages_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify tacacs messages are received correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/tacacs/test_tacacs.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show tacacs'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004727998748421669, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/users/test_users.py::UsersTests::test_if_usernames_are_configured_on_[kg-topology-CloudEOSEdge1]", "duration": 0.6094992998987436, "run_index": 183, "setup": {"name": "setup", "duration": 0.3001881998497993, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008660800056532025, "outcome": "failed", "longrepr": "self = <vane.bin.tests.users.test_users.UsersTests object at 0x7f6f34269a00>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_usernames_are_configured_on_(self, dut, tests_definitions):\n        \"\"\" Verify username is set correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/users/test_users.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34269c70>, show_cmd = 'show running-config section username'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004621001426130533, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_if_zerotouch_is_disabled_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5280104998964816, "run_index": 184, "setup": {"name": "setup", "duration": 0.25953999999910593, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008452000096440315, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ztp.test_ztp.ZTPTests object at 0x7f6f340fe730>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_zerotouch_is_disabled_on_(self, dut, tests_definitions):\n        \"\"\" Verify ztp is disabled\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ztp/test_ztp.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f340fe580>, show_cmd = 'show zerotouch'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004784998018294573, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_for_zerotouch_config_file_on_[kg-topology-CloudEOSEdge1]", "duration": 0.5128011002670974, "run_index": 185, "setup": {"name": "setup", "duration": 0.25194770004600286, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008321600034832954, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ztp.test_ztp.ZTPTests object at 0x7f6f340d17c0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_for_zerotouch_config_file_on_(self, dut, tests_definitions):\n        \"\"\" Verify zerotoucn-config file is on flash\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ztp/test_ztp.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3433b730>, show_cmd = 'dir flash:zerotouch-config'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.129.78.225:443//command-api)), 'name': 'kg-topology-...oudEOSEdge1', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005841001402586699, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/test_pytest.py::PyTestTests::test_assert_true[kg-topology-CloudEOSEdge2]", "duration": 0.0028583998791873455, "run_index": 186, "setup": {"name": "setup", "duration": 0.000471699982881546, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0015576998703181744, "outcome": "passed"}, "teardown": {"name": "teardown", "duration": 0.0003573000431060791, "outcome": "passed"}, "outcome": "passed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_authentication_counters_are_incrementing_on_[kg-topology-CloudEOSEdge2]", "duration": 0.0009022997692227364, "run_index": 187, "setup": {"name": "setup", "duration": 0.0002603998873382807, "outcome": "skipped", "longrepr": "('/project/vane/bin/tests/aaa/test_aaa.py', 51, 'Skipped: No AAA setup on DUTs')"}, "teardown": {"name": "teardown", "duration": 0.000381499994546175, "outcome": "passed"}, "outcome": "skipped"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_aaa_session_logging_is_working_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5249964003451169, "run_index": 188, "setup": {"name": "setup", "duration": 0.25903080007992685, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006457800045609474, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f342e83a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_aaa_session_logging_is_working_on_(self,\n                                                   dut,\n                                                   tests_definitions):\n        \"\"\" Verify AAA session logging is working by identifying eapi connection\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show users detail'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004770001396536827, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_commands_authorization_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5551547999493778, "run_index": 189, "setup": {"name": "setup", "duration": 0.2741515999659896, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0064085000194609165, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f342e5340>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authorization\n    def test_if_commands_authorization_methods_set_on_(self,\n                                                       dut,\n                                                       tests_definitions):\n        \"\"\" Verify AAA command authorization are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        cmd_auth = test_parameters[\"cmd_auth\"]\n        expected_output = cmd_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:181: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004430999979376793, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_authorization_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5458573002833873, "run_index": 190, "setup": {"name": "setup", "duration": 0.2698792000301182, "outcome": "passed"}, "call": {"name": "call", "duration": 0.005596500122919679, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34376e20>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authorization\n    def test_if_exec_authorization_methods_set_on_(self,\n                                                   dut,\n                                                   tests_definitions):\n        \"\"\" Verify AAA exec authorization are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        exec_auth = test_parameters[\"exec_auth\"]\n        expected_output = exec_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005024001002311707, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_default_login_authentication_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5208624002989382, "run_index": 191, "setup": {"name": "setup", "duration": 0.25641690008342266, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007567099994048476, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f341e64c0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_default_login_authentication_methods_set_on_(self,\n                                                             dut,\n                                                             tests_definitions):\n        \"\"\" Verify AAA default login authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        login_auth = test_parameters[\"login_auth\"]\n        expected_output = login_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:267: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004615001380443573, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_login_authentication_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.49890669994056225, "run_index": 192, "setup": {"name": "setup", "duration": 0.24600060004740953, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006536999950185418, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f342e2880>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_login_authentication_methods_set_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\" Verify AAA login authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        login_auth = test_parameters[\"login_auth\"]\n        expected_output = login_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:310: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003684998955577612, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_authentication_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6047223997302353, "run_index": 193, "setup": {"name": "setup", "duration": 0.2990780998952687, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006215999834239483, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f341067f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_dot1x_authentication_methods_set_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\" Verify AAA dot1x authentication are method-lists set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        dot1x_auth = test_parameters[\"dot1x_auth\"]\n        expected_output = dot1x_auth\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:361: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000350200105458498, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_enable_authentication_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5573402000591159, "run_index": 194, "setup": {"name": "setup", "duration": 0.2747071001213044, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007579399971291423, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f341025e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.authentication\n    def test_if_enable_authentication_methods_set_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify AAA enable authentication method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        enable_auth = test_parameters[\"enable_auth\"]\n        expected_output = enable_auth\n    \n        logging.info('TEST is enable authentication methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info('GIVEN enable authentication method list: '\n                     f'|{enable_auth}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:409: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003465998452156782, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_system_accounting_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5777641998138279, "run_index": 195, "setup": {"name": "setup", "duration": 0.28283409983851016, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011540800100192428, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f34385160>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_system_accounting_methods_set_on_(self,\n                                                  dut,\n                                                  tests_definitions):\n        \"\"\" Verify AAA system accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is system accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN default system accounting method list: '\n                     f'|{default_acct}| and console system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005552000366151333, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_exec_accounting_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6351598999463022, "run_index": 196, "setup": {"name": "setup", "duration": 0.31241430016234517, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009760199813172221, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f341928b0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_exec_accounting_methods_set_on_(self, dut, tests_definitions):\n        \"\"\" Verify AAA exec accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is exec accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN exec system accounting method list: '\n                     f'|{default_acct}| and exec system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:503: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005710998084396124, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_priviledge_accounting_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5895749996416271, "run_index": 197, "setup": {"name": "setup", "duration": 0.28980889986269176, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009506799979135394, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f340b77f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_priviledge_accounting_methods_set_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify AAA priviledge accounting method-lists are set correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is priviledge accounting methods list set correct '\n                     f'on |{dut_name}| ')\n        logging.info(f'GIVEN priviledge system accounting method list: '\n                     f'|{default_acct}| and priviledge system accounting '\n                     f'method list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:553: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00045039993710815907, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/aaa/test_aaa.py::AAATests::test_if_dot1x_accounting_methods_set_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6901501999236643, "run_index": 198, "setup": {"name": "setup", "duration": 0.3398178000934422, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009712199913337827, "outcome": "failed", "longrepr": "self = <vane.bin.tests.aaa.test_aaa.AAATests object at 0x7f6f340cd760>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    @pytest.mark.accounting\n    def test_if_dot1x_accounting_methods_set_on_(self, dut, tests_definitions):\n        \"\"\" Verify AAA dot1x accounting method-lists are set correct\n    \n             Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n        default_acct = test_parameters[\"default_acct\"]\n        console_acct = test_parameters[\"console_acct\"]\n        expected_output = [default_acct, console_acct]\n    \n        logging.info(f'TEST is dot1x accounting methods list set correct on '\n                     f'|{dut_name}|')\n        logging.info(f'GIVEN dot1x system accounting method list: '\n                     f'|{default_acct}| and dot1x system accounting method'\n                     f'list: |{console_acct}|')\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/aaa/test_aaa.py:601: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show aaa methods all'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0008023998234421015, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_running_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7385656002443284, "run_index": 199, "setup": {"name": "setup", "duration": 0.36160459998063743, "outcome": "passed"}, "call": {"name": "call", "duration": 0.014832900138571858, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f343783a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_is_running_on_(self,\n                                                           dut,\n                                                           tests_definitions):\n      \"\"\" Verify management api https server is running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343d6820>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005235001444816589, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_port_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7032138996291906, "run_index": 200, "setup": {"name": "setup", "duration": 0.3448198998812586, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012103599961847067, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f34368100>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_port_is_correct_on_(self,\n                                                                dut,\n                                                                tests_definitions):\n      \"\"\" Verify https server is enabled on port 443\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343dc8e0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0014704999048262835, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_https_api_server_is_enabled_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7767463005147874, "run_index": 201, "setup": {"name": "setup", "duration": 0.381674500182271, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01295970007777214, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f340ab9d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_https_api_server_is_enabled_on_(self,\n                                                           dut,\n                                                           tests_definitions):\n      \"\"\" Verify management api https server is enabled\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343d56d0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004376000724732876, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_http_api_server_is_running_on_[kg-topology-CloudEOSEdge2]", "duration": 1.1064425997901708, "run_index": 202, "setup": {"name": "setup", "duration": 0.5450309999287128, "outcome": "passed"}, "call": {"name": "call", "duration": 0.015699899988248944, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f34068fd0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_http_api_server_is_running_on_(self,\n                                                          dut,\n                                                          tests_definitions):\n      \"\"\" Verify management api http server is not running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34068790>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006806999444961548, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/api/test_api.py::APITests::test_if_management_local_http_api_server_is_running_on_[kg-topology-CloudEOSEdge2]", "duration": 1.3996199001558125, "run_index": 203, "setup": {"name": "setup", "duration": 0.6502853999845684, "outcome": "passed"}, "call": {"name": "call", "duration": 0.0980653001461178, "outcome": "failed", "longrepr": "self = <vane.bin.tests.api.test_api.APITests object at 0x7f6f3435e100>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_management_local_http_api_server_is_running_on_(self,\n                                                                dut,\n                                                                tests_definitions):\n      \"\"\" Verify management api local httpserver is not running\n           Args:\n            dut (dict): Encapsulates dut details including name, connection\n            tests_definitions (dict): Test parameters\n      \"\"\"\n    \n>     tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/api/test_api.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34193dc0>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0009838000405579805, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_sec_cpu_utlization_on_[kg-topology-CloudEOSEdge2]", "duration": 0.8169495996553451, "run_index": 204, "setup": {"name": "setup", "duration": 0.40191749995574355, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012464899802580476, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f3409eee0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_1_sec_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 1 second CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3435ef40>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000649699941277504, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_1_min_cpu_utlization_on_[kg-topology-CloudEOSEdge2]", "duration": 1.3298687003552914, "run_index": 205, "setup": {"name": "setup", "duration": 0.6098706000484526, "outcome": "passed"}, "call": {"name": "call", "duration": 0.10970270005054772, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f343ea700>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_1_min_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 1 minute CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f343ea5e0>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004248002078384161, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/cpu/test_cpu.py::CPUTests::test_5_min_cpu_utlization_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7133587002754211, "run_index": 206, "setup": {"name": "setup", "duration": 0.3502369001507759, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01244229986332357, "outcome": "failed", "longrepr": "self = <vane.bin.tests.cpu.test_cpu.CPUTests object at 0x7f6f341c1d30>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_5_min_cpu_utlization_on_(self, dut, tests_definitions):\n        \"\"\" Verify 5 minute CPU % is under specificied value\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/cpu/test_cpu.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f342074c0>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00044260011054575443, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_running_on_[kg-topology-CloudEOSEdge2]", "duration": 0.750889899674803, "run_index": 207, "setup": {"name": "setup", "duration": 0.3693843998480588, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011467699892818928, "outcome": "failed", "longrepr": "self = <vane.bin.tests.daemon.test_daemon.DaemonTests object at 0x7f6f341b6e80>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_daemons_are_running_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of daemons are running on DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/daemon/test_daemon.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f341b61f0>, show_cmd = 'show daemon'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006534000858664513, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/daemon/test_daemon.py::DaemonTests::test_if_daemons_are_enabled_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6542763998731971, "run_index": 208, "setup": {"name": "setup", "duration": 0.32123670005239546, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011071099899709225, "outcome": "failed", "longrepr": "self = <vane.bin.tests.daemon.test_daemon.DaemonTests object at 0x7f6f3419dcd0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_daemons_are_enabled_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of daemons are enabled on DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/daemon/test_daemon.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34207f10>, show_cmd = 'show daemon'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000731899868696928, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_resolves_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6542108000721782, "run_index": 209, "setup": {"name": "setup", "duration": 0.32099579996429384, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011636900017037988, "outcome": "failed", "longrepr": "self = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f341b6490>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_resolves_on_(self, dut, tests_definitions):\n        \"\"\" Verify DNS is running by performing pings and verifying name resolution\n    \n             Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/dns/test_dns.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34152640>, show_cmd = 'show management api http-commands'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005823001265525818, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_if_dns_servers_are_reachable_on_[kg-topology-CloudEOSEdge2]", "duration": 0.728564899880439, "run_index": 210, "setup": {"name": "setup", "duration": 0.34817130002193153, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03168199979700148, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 148\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f341771f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_dns_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        dns_servers = tops.test_parameters[\"dns_servers\"]\n        dns_vrf = tops.test_parameters[\"dns_vrf\"]\n    \n        for dns_server in dns_servers:\n            if dns_vrf:\n                show_cmd = f\"ping vrf {dns_vrf} ip {dns_server}\"\n            else:\n                show_cmd = f\"ping {dns_server}\"\n    \n>           tops.return_show_cmd(show_cmd)\n\ntests/dns/test_dns.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 11.201.12.2\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0005403000395745039, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/dns/test_dns.py::DNSTests::test_dns_configuration_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6760922998655587, "run_index": 211, "setup": {"name": "setup", "duration": 0.3180632998701185, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03934700018726289, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 171\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.dns.test_dns.DNSTests object at 0x7f6f340c88e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_dns_configuration_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS configuration matches the recommended practices\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show running-config section name-server\")\n\ntests/dns/test_dns.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section name-server\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0006186999380588531, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_temp_is_in_spec_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7023701001890004, "run_index": 212, "setup": {"name": "setup", "duration": 0.3460705999750644, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009669800056144595, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f34087cd0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_temp_is_in_spec_on_(self,\n                                                        dut,\n                                                        tests_definitions):\n        \"\"\" Verify system temperature environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0005591001827269793, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_sensors_temp_is_in_spec_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7176185001153499, "run_index": 213, "setup": {"name": "setup", "duration": 0.3502036000136286, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01629940001294017, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f27e250a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_sensors_temp_is_in_spec_on_(self, dut, tests_definitions):\n        \"\"\" Verify system temperature sensors environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0009119000751525164, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_power_are_in_spec_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6840993999503553, "run_index": 214, "setup": {"name": "setup", "duration": 0.3373561999760568, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008993800031021237, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f27e02070>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_power_are_in_spec_on_(self,\n                                                         dut,\n                                                         tests_definitions):\n        \"\"\" Verify system power environmentals are functional within spec\n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n>       if not tests_tools.verify_veos(dut):\n\ntests/environment/test_environment.py:155: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_veos(dut):\n        \"\"\" Verify DUT is a VEOS instance\n    \n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        show_cmd = \"show version\"\n    \n        veos_bool = False\n>       veos = dut[\"output\"][show_cmd]['json']['modelName']\nE       KeyError: 'show version'\n\ntests_tools.py:456: KeyError"}, "teardown": {"name": "teardown", "duration": 0.0003931999672204256, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_system_environment_cooling_is_in_spec_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6439549995120615, "run_index": 215, "setup": {"name": "setup", "duration": 0.3144890998955816, "outcome": "passed"}, "call": {"name": "call", "duration": 0.014500999823212624, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f27f7f0a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_system_environment_cooling_is_in_spec_on_(self,\n                                                          dut,\n                                                          tests_definitions):\n        \"\"\" Verify system cooling environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/environment/test_environment.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f60670>, show_cmd = 'show system environment cooling'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000475799897685647, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/environment/test_environment.py::EnvironmentTests::test_if_fan_status_is_in_spec_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6738331001251936, "run_index": 216, "setup": {"name": "setup", "duration": 0.33105779998004436, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011126000201329589, "outcome": "failed", "longrepr": "self = <vane.bin.tests.environment.test_environment.EnvironmentTests object at 0x7f6f34178d30>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...utput': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling', ...}]}, ...]}\n\n    def test_if_fan_status_is_in_spec_on_(self, dut, tests_definitions):\n        \"\"\" Verify system cooling environmentals are functional within spec\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/environment/test_environment.py:241: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f60820>, show_cmd = 'show system environment cooling'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005914999637752771, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_installed_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7374877000693232, "run_index": 217, "setup": {"name": "setup", "duration": 0.36253869999200106, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011789900017902255, "outcome": "failed", "longrepr": "self = <vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f6f34178a90>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_extensions_are_installed_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of extension are installed on a DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/extension/test_extension.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f60a30>, show_cmd = 'show extensions'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006204000674188137, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/extension/test_extension.py::ExtensionsTests::test_if_extensions_are_erroring_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6651759000960737, "run_index": 218, "setup": {"name": "setup", "duration": 0.3267580000683665, "outcome": "passed"}, "call": {"name": "call", "duration": 0.01131230010651052, "outcome": "failed", "longrepr": "self = <vane.bin.tests.extension.test_extension.ExtensionsTests object at 0x7f6f27e1db50>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_extensions_are_erroring_on_(self, dut, tests_definitions):\n        \"\"\" Verify a list of extension are not erroring on a DUT\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/extension/test_extension.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f62220>, show_cmd = 'show extensions'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003475998528301716, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/filesystem/test_filesystem.py::FileSystemTests::test_if_files_on_[kg-topology-CloudEOSEdge2]", "duration": 0.703052899800241, "run_index": 219, "setup": {"name": "setup", "duration": 0.3332262998446822, "outcome": "passed"}, "call": {"name": "call", "duration": 0.036171300103887916, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 174\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.filesystem.test_filesystem.FileSystemTests object at 0x7f6f27e32d90>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_files_on_(self, dut, tests_definitions):\n        \"\"\" Verify filesystem is correct and expected files are present\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n    \n        files = tops.test_parameters[\"files\"]\n    \n        for file_name in files:\n            show_cmd = f\"show file information {file_name}\"\n>           show_output, show_cmd_txt = tests_tools.return_show_cmd(show_cmd,\n                                                                    dut,\n                                                                    tops.test_case,\n                                                                    LOG_FILE)\n\ntests/filesystem/test_filesystem.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:290: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show file information flash:startup-config\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0004290000069886446, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/host/test_host.py::HostTests::test_if_hostname_is_correcet_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6819529996719211, "run_index": 220, "setup": {"name": "setup", "duration": 0.3350390999112278, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010715099982917309, "outcome": "failed", "longrepr": "self = <vane.bin.tests.host.test_host.HostTests object at 0x7f6f27f64e80>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_hostname_is_correcet_on_(self, dut, tests_definitions):\n        \"\"\" Verify hostname is set on device is correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/host/test_host.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f41070>, show_cmd = 'show hostname'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0011596998665481806, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_protocol_status_is_connected_on_[kg-topology-CloudEOSEdge2]", "duration": 0.640857300022617, "run_index": 221, "setup": {"name": "setup", "duration": 0.3139357001055032, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012302199844270945, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceStatusTests object at 0x7f6f27fd6bb0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_protocol_status_is_connected_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify the interfaces of interest protocol statuses are up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f28430>, show_cmd = 'show interfaces status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006836999673396349, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceStatusTests::test_if_intf_link_status_is_connected_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6354193997103721, "run_index": 222, "setup": {"name": "setup", "duration": 0.31176249985583127, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011340999975800514, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceStatusTests object at 0x7f6f27f266a0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_link_status_is_connected_on_(self,\n                                                  dut,\n                                                  tests_definitions):\n        \"\"\" Verify the interfaces of interest link statuses are up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f28820>, show_cmd = 'show interfaces status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005534000229090452, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfacePhyTests::test_if_intf_phy_status_connected_on_[kg-topology-CloudEOSEdge2]", "duration": 0.7183877998031676, "run_index": 223, "setup": {"name": "setup", "duration": 0.3534240999724716, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011115799890831113, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfacePhyTests object at 0x7f6f27f26070>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_phy_status_connected_on_(self,\n                                              dut,\n                                              tests_definitions):\n        \"\"\" Verify the interfaces of interest physical state is link up\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f1e280>, show_cmd = 'show interfaces phy detail'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004237999673932791, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_if_interface_errors_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6193228005431592, "run_index": 224, "setup": {"name": "setup", "duration": 0.30388910020701587, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010879900073632598, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceCountersTests object at 0x7f6f27f1e1f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_interface_errors_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:622: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34150ca0>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006647000554949045, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceCountersTests::test_interface_utilization_on_[kg-topology-CloudEOSEdge2]", "duration": 0.629409599583596, "run_index": 225, "setup": {"name": "setup", "duration": 0.3090804999228567, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010687799891456962, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceCountersTests object at 0x7f6f341250d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_interface_utilization_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:728: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27f79ca0>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005607998464256525, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_out_counters_are_discarding_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5789671998936683, "run_index": 226, "setup": {"name": "setup", "duration": 0.284228399861604, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010022600181400776, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceDiscardTests object at 0x7f6f27ff18e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_out_counters_are_discarding_on_(self,\n                                                     dut,\n                                                     tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no outDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:492: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34031400>, show_cmd = 'show interfaces counters discards'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00048779998905956745, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceDiscardTests::test_if_intf_in_counters_are_discarding_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5528253996744752, "run_index": 227, "setup": {"name": "setup", "duration": 0.27144609997048974, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009328799787908792, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceDiscardTests object at 0x7f6f34031f70>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_in_counters_are_discarding_on_(self,\n                                                    dut,\n                                                    tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:532: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3414ffd0>, show_cmd = 'show interfaces counters discards'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0006043999455869198, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/interface/test_interface.py::InterfaceMtuTests::test_if_intf_mtu_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5471234002616256, "run_index": 228, "setup": {"name": "setup", "duration": 0.2682710001245141, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009987300029024482, "outcome": "failed", "longrepr": "self = <vane.bin.tests.interface.test_interface.InterfaceMtuTests object at 0x7f6f34031130>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_intf_mtu_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify the interfaces of interest have no inDiscards\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/interface/test_interface.py:577: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3414f640>, show_cmd = 'show interfaces'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005940999835729599, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_rx_is_enabled_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5845267004333436, "run_index": 229, "setup": {"name": "setup", "duration": 0.2868274000938982, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010544300079345703, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpTests object at 0x7f6f3414f430>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_rx_is_enabled_on_(self, dut, tests_definitions):\n        \"\"\"  Verify LLDP receive is enabled on interesting interfaces\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34044460>, show_cmd = 'show lldp'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003276001662015915, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpTests::test_if_lldp_tx_is_enabled_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5611467997077852, "run_index": 230, "setup": {"name": "setup", "duration": 0.2754942998290062, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00981259997934103, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpTests object at 0x7f6f342c6ac0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_tx_is_enabled_on_(self, dut, tests_definitions):\n        \"\"\"  Verify LLDP transmit is enabled on interesting interfaces\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3414af10>, show_cmd = 'show lldp'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0003456000704318285, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_system_name_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6059973996598274, "run_index": 231, "setup": {"name": "setup", "duration": 0.2967808998655528, "outcome": "passed"}, "call": {"name": "call", "duration": 0.012032900005578995, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f27fed970>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_system_name_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info hostname is the system's name\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3413c3d0>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004026999231427908, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_max_frame_size_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5484340004622936, "run_index": 232, "setup": {"name": "setup", "duration": 0.2696494001429528, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008585400180891156, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f3413a220>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_max_frame_size_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info maxFrameSize is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f3413a2b0>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005497999954968691, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/lldp/test_lldp.py::LldpLocalInfoTests::test_if_lldp_interface_id_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5381084000691772, "run_index": 233, "setup": {"name": "setup", "duration": 0.26433530007489026, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00898549985140562, "outcome": "failed", "longrepr": "self = <vane.bin.tests.lldp.test_lldp.LldpLocalInfoTests object at 0x7f6f27f21790>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_lldp_interface_id_is_correct_on_(self, dut, tests_definitions):\n        \"\"\"  Verify show lldp local-info interfaceIdType is correct\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/lldp/test_lldp.py:212: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34149430>, show_cmd = 'show lldp local-info'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0004523000679910183, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/log/test_logging.py::LoggingTests::test_if_log_messages_appear_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5584712000563741, "run_index": 234, "setup": {"name": "setup", "duration": 0.2743585000280291, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009280500002205372, "outcome": "failed", "longrepr": "self = <vane.bin.tests.log.test_logging.LoggingTests object at 0x7f6f27ecfa60>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_log_messages_appear_on_(self, dut, tests_definitions):\n        \"\"\" Verify local log messages\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/log/test_logging.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27ffa460>, show_cmd = 'show logging'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00047369999811053276, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/memory/test_memory.py::MemoryTests::test_memory_utilization_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5675554999615997, "run_index": 235, "setup": {"name": "setup", "duration": 0.27846199995838106, "outcome": "passed"}, "call": {"name": "call", "duration": 0.010098000057041645, "outcome": "failed", "longrepr": "self = <vane.bin.tests.memory.test_memory.MemoryTests object at 0x7f6f27ee23d0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_memory_utilization_on_(self, dut, tests_definitions):\n        \"\"\" Verify memory is not exceeding high utlization\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/memory/test_memory.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27fc3880>, show_cmd = 'show version'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000533499987795949, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_is_synchronized_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5533584000077099, "run_index": 236, "setup": {"name": "setup", "duration": 0.2720582999754697, "outcome": "passed"}, "call": {"name": "call", "duration": 0.008896100101992488, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f3414f340>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_is_synchronized_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp is synchronzied\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f341690a0>, show_cmd = 'show ntp status'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000345699954777956, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_associated_with_peers_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5919488000217825, "run_index": 237, "setup": {"name": "setup", "duration": 0.28988950001075864, "outcome": "passed"}, "call": {"name": "call", "duration": 0.011684800032526255, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f27fc32e0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_associated_with_peers_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp peers are correct\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34145e80>, show_cmd = 'show ntp associations'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000484999967738986, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_process_is_running_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6463910995516926, "run_index": 238, "setup": {"name": "setup", "duration": 0.31813939986750484, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009686899837106466, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f27fcde50>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_process_is_running_on_(self, dut, tests_definitions):\n        \"\"\" Verify ntp processes are running\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ntp/test_ntp.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f341459d0>, show_cmd = 'show processes'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00042539997957646847, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_ntp_configuration_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5846793004311621, "run_index": 239, "setup": {"name": "setup", "duration": 0.2755037001334131, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03320599999278784, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 163\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f34137790>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_ntp_configuration_on_(self, dut, tests_definitions):\n        \"\"\" Verifies NTP configuration matches the recommended practices\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show running-config section ntp\")\n\ntests/ntp/test_ntp.py:158: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show running-config section ntp\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.00046590017154812813, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ntp/test_ntp.py::NTPTests::test_if_ntp_servers_are_reachable_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6342605999670923, "run_index": 240, "setup": {"name": "setup", "duration": 0.2991856001317501, "outcome": "passed"}, "call": {"name": "call", "duration": 0.03544979984872043, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 152\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.ntp.test_ntp.NTPTests object at 0x7f6f342a42b0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_ntp_servers_are_reachable_on_(self, dut, tests_definitions):\n        \"\"\" Verifies DNS servers are reachable via ping\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n        ntp_servers = tops.test_parameters[\"ntp_servers\"]\n        ntp_vrf = tops.test_parameters[\"ntp_vrf\"]\n    \n        for ntp_server in ntp_servers:\n            if ntp_vrf:\n                show_cmd = f\"ping vrf {ntp_vrf} ip {ntp_server}\"\n            else:\n                show_cmd = f\"ping {ntp_server}\"\n    \n>           tops.return_show_cmd(show_cmd)\n\ntests/ntp/test_ntp.py:229: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"ping 169.254.169.123\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.00043959985487163067, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::CrashTests::test_if_there_is_agents_have_crashed_on_[kg-topology-CloudEOSEdge2]", "duration": 0.6000106001738459, "run_index": 241, "setup": {"name": "setup", "duration": 0.28476370009593666, "outcome": "passed"}, "call": {"name": "call", "duration": 0.029956999933347106, "outcome": "failed", "longrepr": "self = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n>           self.transport.endheaders(message_body=data)\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:436: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/usr/local/lib/python3.8/http/client.py:1250: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\nmessage_body = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/usr/local/lib/python3.8/http/client.py:1010: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\ndata = b'POST /command-api HTTP/1.1\\r\\nHost: 3.137.2.78\\r\\nAccept-Encoding: identity\\r\\nContent-type: application/json-rpc\\r\\nContent-length: 153\\r\\nAuthorization: Basic a2dyb3ppczphcmlzdGExMjM=\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/usr/local/lib/python3.8/http/client.py:950: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"Connect to a host on a given (SSL) port.\"\n    \n>       super().connect()\n\n/usr/local/lib/python3.8/http/client.py:1417: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = https://3.137.2.78:443//command-api\n\n    def connect(self):\n        \"\"\"Connect to the host and port specified in __init__.\"\"\"\n>       self.sock = self._create_connection(\n            (self.host,self.port), self.timeout, self.source_address)\n\n/usr/local/lib/python3.8/http/client.py:921: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                # Break explicitly a reference cycle\n                err = None\n                return sock\n    \n            except error as _:\n                err = _\n                if sock is not None:\n                    sock.close()\n    \n        if err is not None:\n            try:\n>               raise err\n\n/usr/local/lib/python3.8/socket.py:808: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('3.137.2.78', 443), timeout = 60, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/socket.py:796: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <vane.bin.tests.system.test_system.CrashTests object at 0x7f6f27ec9ee0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_there_is_agents_have_crashed_on_(self, dut, tests_definitions):\n        \"\"\" Verifies the agents logs crash is empty\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n        \"\"\"\n    \n        tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n>       tops.return_show_cmd(\"show agent logs crash\")\n\ntests/system/test_system.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:723: in return_show_cmd\n    show_output = conn.enable(show_cmd)\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:684: in enable\n    resp = self.run_commands(command, encoding, send_enable,\n/usr/local/lib/python3.8/site-packages/pyeapi/client.py:743: in run_commands\n    response = self._connection.execute(commands, encoding, **kwargs)\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:550: in execute\n    response = self.send(request)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = EapiConnection(transport=https://3.137.2.78:443//command-api)\ndata = b'{\"jsonrpc\": \"2.0\", \"method\": \"runCmds\", \"params\": {\"version\": 1, \"cmds\": [\"enable\", \"show agent logs crash\"], \"format\": \"json\"}, \"id\": \"140115639902320\"}'\n\n    def send(self, data):\n        \"\"\"Sends the eAPI request to the destination node\n    \n        This method is responsible for sending an eAPI request to the\n        destination node and returning a response based on the eAPI response\n        object.  eAPI responds to request messages with either a success\n        message or failure message.\n    \n        eAPI Response - success\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"result\": [\n                    {},\n                    {}\n                    {\n                        \"warnings\": [\n                            <message>\n                        ]\n                    },\n                ],\n                \"id\": <reqid>\n            }\n    \n        eAPI Response - failure\n    \n        .. code-block:: json\n    \n            {\n                \"jsonrpc\": \"2.0\",\n                \"error\": {\n                    \"code\": <int>,\n                    \"message\": <string>\n                    \"data\": [\n                        {},\n                        {},\n                        {\n                            \"errors\": [\n                                <message>\n                            ]\n                        }\n                    ]\n                }\n                \"id\": <reqid>\n            }\n    \n        Args:\n            data (string): The data to be included in the body of the eAPI\n                request object\n    \n        Returns:\n            A decoded response.  The response object is deserialized from\n                JSON and returned as a standard Python dictionary object\n    \n        Raises:\n            CommandError if an eAPI failure response object is returned from\n                the node.   The CommandError exception includes the error\n                code and error message from the eAPI response.\n        \"\"\"\n        try:\n            _LOGGER.debug('Request content: {}'.format(data))\n            # debug('eapi_request: %s' % data)\n    \n            self.transport.putrequest('POST', '/command-api')\n    \n            self.transport.putheader('Content-type', 'application/json-rpc')\n            self.transport.putheader('Content-length', '%d' % len(data))\n    \n            if self._auth:\n                self.transport.putheader('Authorization',\n                                         'Basic %s' % self._auth)\n    \n            if int(sys.version[0]) > 2:\n                # For Python 3.x compatibility\n                data = data.encode()\n    \n            self.transport.endheaders(message_body=data)\n    \n            try:  # Python 2.7: use buffering of HTTP responses\n                response = self.transport.getresponse(buffering=True)\n            except TypeError:  # Python 2.6: older, and 3.x on\n                response = self.transport.getresponse()\n    \n            response_content = response.read()\n            _LOGGER.debug('Response: status:{status}, reason:{reason}'.format(\n                          status=response.status,\n                          reason=response.reason))\n            _LOGGER.debug('Response content: {}'.format(response_content))\n    \n            if response.status == 401:\n                raise ConnectionError(str(self), '%s. %s' % (response.reason,\n                                                             response_content))\n    \n            # Work around for Python 2.7/3.x compatibility\n            if not type(response_content) == str:\n                # For Python 3.x - decode bytes into string\n                response_content = response_content.decode()\n            decoded = json.loads(response_content)\n            _LOGGER.debug('eapi_response: %s' % decoded)\n    \n            if 'error' in decoded:\n                (code, msg, err, out) = self._parse_error_message(decoded)\n                pattern = \"unexpected keyword argument '(.*)'\"\n                match = re.search(pattern, msg)\n                if match:\n                    auto_msg = ('%s parameter is not supported in this'\n                                ' version of EOS.' % match.group(1))\n                    _LOGGER.error(auto_msg)\n                    msg = msg + '. ' + auto_msg\n                raise CommandError(code, msg, command_error=err, output=out)\n    \n            return decoded\n    \n        # socket.error is deprecated in python 3 and replaced with OSError.\n        except (socket.error, OSError) as exc:\n            _LOGGER.exception(exc)\n            self.socket_error = exc\n            self.error = exc\n            error_msg = 'Socket error during eAPI connection: %s' % str(exc)\n>           raise ConnectionError(str(self), error_msg)\nE           pyeapi.eapilib.ConnectionError: Socket error during eAPI connection: [Errno 111] Connection refused\n\n/usr/local/lib/python3.8/site-packages/pyeapi/eapilib.py:479: ConnectionError"}, "teardown": {"name": "teardown", "duration": 0.0005262000486254692, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/system/test_system.py::SystemTests::test_if_eos_version_is_correct_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5542931000236422, "run_index": 242, "setup": {"name": "setup", "duration": 0.2722021001391113, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009471399942412972, "outcome": "failed", "longrepr": "self = <vane.bin.tests.system.test_system.SystemTests object at 0x7f6f3402c820>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_eos_version_is_correct_on_(self, dut, tests_definitions):\n        \"\"\" Verifies EOS version running on the device\n    \n            Args:\n                dut (dict): Encapsulates dut details including name, connection\n                tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/system/test_system.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f34017df0>, show_cmd = 'show version'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000417499803006649, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_sending_messages_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5699681001715362, "run_index": 243, "setup": {"name": "setup", "duration": 0.28106670011766255, "outcome": "passed"}, "call": {"name": "call", "duration": 0.007471299963071942, "outcome": "failed", "longrepr": "self = <vane.bin.tests.tacacs.test_tacacs.TacacsTests object at 0x7f6f27da3ca0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_tacacs_is_sending_messages_on_(self, dut, tests_definitions):\n        \"\"\" Verify tacacs messages are sending correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/tacacs/test_tacacs.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show tacacs'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00036339997313916683, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/tacacs/test_tacacs.py::TacacsTests::test_if_tacacs_is_receiving_messages_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5638870997354388, "run_index": 244, "setup": {"name": "setup", "duration": 0.2783347999211401, "outcome": "passed"}, "call": {"name": "call", "duration": 0.006764499936252832, "outcome": "failed", "longrepr": "self = <vane.bin.tests.tacacs.test_tacacs.TacacsTests object at 0x7f6f34013070>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_tacacs_is_receiving_messages_on_(self,\n                                                      dut,\n                                                      tests_definitions):\n        \"\"\" Verify tacacs messages are received correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n        test_case = inspect.currentframe().f_code.co_name\n        test_parameters = tests_tools.get_parameters(tests_definitions,\n                                                     TEST_SUITE,\n                                                     test_case)\n    \n        expected_output = test_parameters[\"expected_output\"]\n        dut_name = dut['name']\n    \n        show_cmd = test_parameters[\"show_cmd\"]\n>       tests_tools.verify_show_cmd(show_cmd, dut)\n\ntests/tacacs/test_tacacs.py:131: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nshow_cmd = 'show tacacs'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def verify_show_cmd(show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:419: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.00045299995690584183, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/users/test_users.py::UsersTests::test_if_usernames_are_configured_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5507663001772016, "run_index": 245, "setup": {"name": "setup", "duration": 0.27058689994737506, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009179900167509913, "outcome": "failed", "longrepr": "self = <vane.bin.tests.users.test_users.UsersTests object at 0x7f6f27e8c4f0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_usernames_are_configured_on_(self, dut, tests_definitions):\n        \"\"\" Verify username is set correctly\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/users/test_users.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27ebcbb0>, show_cmd = 'show running-config section username'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.000412600114941597, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_if_zerotouch_is_disabled_on_[kg-topology-CloudEOSEdge2]", "duration": 0.558516499819234, "run_index": 246, "setup": {"name": "setup", "duration": 0.27428389992564917, "outcome": "passed"}, "call": {"name": "call", "duration": 0.009372799890115857, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ztp.test_ztp.ZTPTests object at 0x7f6f27e8f100>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_if_zerotouch_is_disabled_on_(self, dut, tests_definitions):\n        \"\"\" Verify ztp is disabled\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ztp/test_ztp.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27ebc340>, show_cmd = 'show zerotouch'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.0005759000778198242, "outcome": "passed"}, "outcome": "failed"}, {"name": "tests/ztp/test_ztp.py::ZTPTests::test_for_zerotouch_config_file_on_[kg-topology-CloudEOSEdge2]", "duration": 0.5828908998519182, "run_index": 247, "setup": {"name": "setup", "duration": 0.27978139999322593, "outcome": "passed"}, "call": {"name": "call", "duration": 0.00968199991621077, "outcome": "failed", "longrepr": "self = <vane.bin.tests.ztp.test_ztp.ZTPTests object at 0x7f6f27ebccd0>\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\ntests_definitions = {'test_suites': [{'name': 'test_aaa.py', 'testcases': [{'comment': None, 'description': 'Verify AAA counters are worki...ted_output': 'ok', 'name': 'test_if_fan_status_is_in_spec_on_', 'show_cmd': 'show system environment cooling'}]}, ...]}\n\n    def test_for_zerotouch_config_file_on_(self, dut, tests_definitions):\n        \"\"\" Verify zerotoucn-config file is on flash\n    \n            Args:\n              dut (dict): Encapsulates dut details including name, connection\n              tests_definitions (dict): Test parameters\n        \"\"\"\n    \n>       tops = tests_tools.TestOps(tests_definitions, TEST_SUITE, dut)\n\ntests/ztp/test_ztp.py:85: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests_tools.py:619: in __init__\n    self._verify_show_cmd(self.show_cmd, dut)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <tests_tools.TestOps object at 0x7f6f27dacf70>, show_cmd = 'dir flash:zerotouch-config'\ndut = {'connection': Node(connection=EapiConnection(transport=https://3.137.2.78:443//command-api)), 'name': 'kg-topology-Cl...oudEOSEdge2', 'interface_name': 'Ethernet2', 'media_type': '', 'z_hostname': 'leaf01', ...}], 'show aaa counters': {}}}\n\n    def _verify_show_cmd(self, show_cmd, dut):\n        \"\"\" Verify if show command was successfully executed on dut\n    \n            show_cmd (str): show command\n            dut (dict): data structure of dut parameters\n        \"\"\"\n    \n        dut_name = dut[\"name\"]\n        logging.info(f'Verify if show command |{show_cmd}| was successfully '\n                     f'executed on {dut_name} dut')\n    \n        if show_cmd in dut[\"output\"]:\n            logging.info(f'Verified output for show command |{show_cmd}| on '\n                         f'{dut_name}')\n        else:\n            logging.critical(f'Show command |{show_cmd}| not executed on '\n                             f'{dut_name}')\n>           assert False\nE           AssertionError\n\ntests_tools.py:646: AssertionError"}, "teardown": {"name": "teardown", "duration": 0.013646099949255586, "outcome": "passed"}, "outcome": "failed"}], "summary": {"passed": 114, "skipped": 4, "failed": 130, "num_tests": 248, "duration": 114.54424524307251}, "created_at": "2020-12-02 19:01:28.892661"}}