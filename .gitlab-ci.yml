variables:
  OVPN_FILE: ovpn_profiles/eosplus-act.ovpn
stages:
 - build
 - test
 - deploy

# build container locally for unit and system tests
ci_build:
  stage: build
  before_script:
    - apk update
    - apk add openvpn 
    - openvpn --config ${OVPN_FILE} --daemon
  image: docker:latest
  services: 
    - docker:dind
  script:
    - if [ "$( docker container inspect -f '{{.State.Running}}' vane )" == "true" ]; then docker stop vane; fi
    - docker build . -f ci/Dockerfile.ci -t vane:latest --build-arg UID=$(id -u) --build-arg GID=$(id -g)
    - docker run -t -d --rm --name vane vane:latest
    - docker exec -i vane bash -c "cd src;python3 setup.py install;cd vane;vane"


# build container for registry and distribution
runtime_build:
  stage: build
  image: docker:latest
  services: 
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.aristanetworks.com/arista-eosplus/vane . -f ci/Dockerfile.ci --build-arg UID=$(id -u) --build-arg GID=$(id -g)
    - docker push registry.gitlab.aristanetworks.com/arista-eosplus/vane

unit_tests:
  stage: test
  script:
    - docker exec -i vane bash -c "mkdir /project/vane/reports/results/"
    - docker exec -i vane pwd
    - docker exec -i vane bash -c "pytest --cov-report html --cov-report xml:cov.xml --junit-xml=junit.xml --cov=/project/vane/bin tests"
    - docker exec -i vane bash -c "pytest --cov=/project/vane/bin tests"
    - docker exec -i vane bash -c "coverage report -m "
    - docker exec -i vane bash -c "coverage-badge"
    - docker exec -i vane bash -c "ls"
    - docker cp vane:/project/htmlcov .
    - docker cp vane:/project/junit.xml .
    - docker cp vane:/project/cov.xml .
    - ls
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    paths:
      - htmlcov
      - junit.xml
      - cov.xml
    reports:
     junit: junit.xml

system_tests:
  stage: test
  script:
    - docker exec -i vane pwd
    - docker exec -i vane bash -c "ls /project/vane"
    - docker exec -i vane bash -c "ls /project/vane/bin"
    - docker exec -i vane bash -c "ls /project/vane/reports"
    # - docker exec -i vane bash -c "cd /project/vane/bin && ./vane.py"

pages:
  stage: deploy
  script:
    - mv htmlcov/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
