name: cvp-extension-builder
run-name: Build CVP extension RPM package

# Build the CVP extension RPM package when a pull request is merged to main
# and save the RPM package in the artifacts of the workflow

on:
  # This is the default trigger, to run when a pull request on the 'main' branch is closed
  pull_request:
    branches:
      - main
    types:
      - closed

  # For testing, put the name of the testing branch here, and remove branch names afterwards
  push:
    branches:
      - example-rpm-package-testing-branch

  # Trigger a build manually from the browser interface
  workflow_dispatch:

# Variables
env:
  CVP_BUILD_IMAGE: ghcr.io/aristanetworks/vane-cvp-build:latest
  CVP_IMAGE: vane-cvp
  CVP_IMAGE_FILE: vane-cvp.tar.gz

# Job definitions
jobs:

  # Create the container we use to build the RPM
  #   This is a Centos container to match the CVP environment
  create_centos_build_container:

    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Centos container for creating the RPM images and push to GitHub container registry
        run: |
          docker build -t $CVP_BUILD_IMAGE -f Dockerfile.build-CVP . --build-arg UID=$(id -u) --build-arg GID=$(id -g)
          docker push $CVP_BUILD_IMAGE

  # Create the container that will be running in the CVP environment
  #   This is a minimal container with Vane and its requirements installed
  create_cvp_container:

    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build the CVP Vane container and save it as a tar.gz file
        run: |
          docker build -t $CVP_IMAGE -f Dockerfile.CVP . --network=host
          docker save $CVP_IMAGE | gzip > $CVP_IMAGE_FILE

      - name: Upload the CVP Vane container tar.gz artifact for use in the next job
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.CVP_IMAGE_FILE }}
          path: ${{ env.CVP_IMAGE_FILE }}
          retention-days: 2

  # Create the RPM package and upload the package as an artifact
  package_cvp_container:

    # This job depends on the previous two containers being built
    needs: [create_centos_build_container, create_cvp_container]

    runs-on: ubuntu-latest
    container:
      # Use the previously built vane-cvp-build container
      # We can't use the CVP_BUILD_IMAGE variable here, because the context is not
      # available in the "job" scope
      image: ghcr.io/aristanetworks/vane-cvp-build:latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Download the CVP Vane image file artifact we created in the previous job
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CVP_IMAGE_FILE }}

      - name: Build the CVP rpm package
        run: |
          ls -la
          make rpm-cvp

      - name: Create a vane-cvp distribution directory based on the version being built
        env:
          # Check if we are on a published branch (main or develop)
          PUB_BRANCH: ${{ contains(fromJSON('["main", "develop"]'), github.ref) }}
        run: |
          #
          # Get the version string from the pyproject.toml file
          #
          version_str=$(grep ^version pyproject.toml | awk -F " " '{print $NF}' | tr -d '"')
          #
          # Get a timestamp for the build
          #
          timestamp=$(date +%Y-%m-%d_%H%M)
          #
          # If not on a published branch, append a provisional tag to the distribution name
          #
          if [[ "${{github.ref}}" =~ "main" || "${{github.ref}}" =~ "develop" ]]; then
            tag="-${timestamp}"
          elif [[ "${{github.ref}}" =~ "gar-cvp-update" ]]; then
            tag="-${timestamp}-test-build"
          else
            tag="-${timestamp}-provisional"
          fi
          #
          # Create the distribution directory
          #
          dist_name="vane-cvp-${version_str}${tag}"
          mkdir ${dist_name}
          #
          # List the current directory to show the newly created directory
          #
          ls -la
          #
          # Put the dist_name in the environment as DIST_NAME
          #
          echo "DIST_NAME=${dist_name}" >> $GITHUB_ENV

      - name: Copy the installation scripts and the rpm into the distribution directory
        run: |
          cp resources/vane-cvp-*.sh ${DIST_NAME}/
          cp rpms/*.rpm ${DIST_NAME}/

      - name: Archive the distribution directory
        run: |
          tar czvf ${DIST_NAME}.tgz ${DIST_NAME}

      - name: Save the rpm package as an artifact in GitHub
        # 'name' is the artifact name in GitHub
        # 'path' is the rpm package to be saved
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.DIST_NAME }}-rpm
          path: ${{ env.DIST_NAME }}.tgz
