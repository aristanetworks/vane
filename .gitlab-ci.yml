default:
  tags:
    - registry

variables:
  OVPN_FILE: ovpn_profiles/eosplus-act.ovpn
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

  # Gitlab Container Registry
  REG_URL: eosplus-gitlab.aristanetworks.com:5050/arista-eosplus/vane

  # CVP Container RPM
  CNAME: vane
  REPOSITORY_URL: $REG_URL/$CNAME

  # For Dev Container in Gitlab Registry
  DEV_CNAME: vane-dev
  DEV_REPOSITORY_URL: $REG_URL/$DEV_CNAME

stages:
  - build
  - static analysis
  - test

# build container locally for unit and system tests
ci_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - pwd
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker build .  -t ${DEV_REPOSITORY_URL}
      --build-arg UID=$(id -u)
      --build-arg GID=$(id -g)
    - docker push ${DEV_REPOSITORY_URL}

# build container for registry and distribution
runtime_build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t ${REPOSITORY_URL} . -f ci/Dockerfile.ci --build-arg UID=$(id -u) --build-arg GID=$(id -g)
    - docker push ${REPOSITORY_URL}

pycodestyle:
  stage: static analysis
  image: ${DEV_REPOSITORY_URL}:latest
  allow_failure: true
  script:
    - make pycodestyle

flake8:
  stage: static analysis
  image: ${DEV_REPOSITORY_URL}:latest
  allow_failure: true
  script:
    - make flake8

pylint:
  stage: static analysis
  image: ${DEV_REPOSITORY_URL}:latest
  allow_failure: true
  script:
    - make pylint

unit_tests:
  stage: test
  image: ${DEV_REPOSITORY_URL}:latest
  script:
    - make install
    - make unittest
#  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
#  artifacts:
#    paths:
#      - htmlcov
#      - junit.xml
#      - cov.xml
#    reports:
#     junit: junit.xml

system_tests:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - if [ "$( docker container inspect -f '{{.State.Running}}' vane-dev )" == "true" ]; then docker stop ${DEV_CNAME}; fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - >
      docker run
      --cap-add=NET_ADMIN
      --device /dev/net/tun:/dev/net/tun
      -t -d --rm
      --name ${DEV_CNAME} ${DEV_REPOSITORY_URL}
  script:
    - docker exec -u 0 -i ${DEV_CNAME} bash -c "make install"
    - docker exec -u 0 -i ${DEV_CNAME} bash -c "make systest"
    - docker stop ${DEV_CNAME}

# Need to get systests working then can enable deploy stage and pages job
#pages:
#  stage: deploy
#  script:
#    - mv htmlcov/ public/
#  artifacts:
#    paths:
#      - public
#    expire_in: 30 days
